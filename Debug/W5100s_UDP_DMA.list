
W5100s_UDP_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c94  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08005e34  08005e34  00015e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fa8  08005fa8  000200ac  2**0
                  CONTENTS
  4 .ARM          00000008  08005fa8  08005fa8  00015fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fb0  08005fb0  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fb0  08005fb0  00015fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fb4  08005fb4  00015fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  08005fb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  200000ac  08006064  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003c4  08006064  000203c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bfc5  00000000  00000000  0002011f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000221b  00000000  00000000  0002c0e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b70  00000000  00000000  0002e300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008bb  00000000  00000000  0002ee70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001754f  00000000  00000000  0002f72b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cffa  00000000  00000000  00046c7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008dbbb  00000000  00000000  00053c74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000362c  00000000  00000000  000e1830  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000e4e5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000ac 	.word	0x200000ac
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005e1c 	.word	0x08005e1c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000b0 	.word	0x200000b0
 80001dc:	08005e1c 	.word	0x08005e1c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <_write>:
	return ch;
}
*/
#ifdef True_STD
	int _write(int fd, char *str, int len)
	{
 800057c:	b580      	push	{r7, lr}
 800057e:	b086      	sub	sp, #24
 8000580:	af00      	add	r7, sp, #0
 8000582:	60f8      	str	r0, [r7, #12]
 8000584:	60b9      	str	r1, [r7, #8]
 8000586:	607a      	str	r2, [r7, #4]
		for(int i=0; i<len; i++)
 8000588:	2300      	movs	r3, #0
 800058a:	617b      	str	r3, [r7, #20]
 800058c:	e00b      	b.n	80005a6 <_write+0x2a>
		{
			HAL_UART_Transmit(&huart1, (uint8_t *)&str[i], 1, 0xFFFF);
 800058e:	697b      	ldr	r3, [r7, #20]
 8000590:	68ba      	ldr	r2, [r7, #8]
 8000592:	18d1      	adds	r1, r2, r3
 8000594:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000598:	2201      	movs	r2, #1
 800059a:	4807      	ldr	r0, [pc, #28]	; (80005b8 <_write+0x3c>)
 800059c:	f002 fee1 	bl	8003362 <HAL_UART_Transmit>
		for(int i=0; i<len; i++)
 80005a0:	697b      	ldr	r3, [r7, #20]
 80005a2:	3301      	adds	r3, #1
 80005a4:	617b      	str	r3, [r7, #20]
 80005a6:	697a      	ldr	r2, [r7, #20]
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	429a      	cmp	r2, r3
 80005ac:	dbef      	blt.n	800058e <_write+0x12>
		}
		return len;
 80005ae:	687b      	ldr	r3, [r7, #4]
	}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3718      	adds	r7, #24
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	200001e0 	.word	0x200001e0

080005bc <spiWriteByte>:
#endif


void spiWriteByte(uint8_t byte)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, &byte, 1, HAL_MAX_DELAY);
 80005c6:	1df9      	adds	r1, r7, #7
 80005c8:	f04f 33ff 	mov.w	r3, #4294967295
 80005cc:	2201      	movs	r2, #1
 80005ce:	4803      	ldr	r0, [pc, #12]	; (80005dc <spiWriteByte+0x20>)
 80005d0:	f002 f95b 	bl	800288a <HAL_SPI_Transmit>
}
 80005d4:	bf00      	nop
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	200000c8 	.word	0x200000c8

080005e0 <spiReadByte>:

uint8_t spiReadByte(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
	uint8_t ret;
	HAL_SPI_Receive(&hspi2, &ret, 1, HAL_MAX_DELAY);
 80005e6:	1df9      	adds	r1, r7, #7
 80005e8:	f04f 33ff 	mov.w	r3, #4294967295
 80005ec:	2201      	movs	r2, #1
 80005ee:	4804      	ldr	r0, [pc, #16]	; (8000600 <spiReadByte+0x20>)
 80005f0:	f002 fa87 	bl	8002b02 <HAL_SPI_Receive>
	return ret;
 80005f4:	79fb      	ldrb	r3, [r7, #7]
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	200000c8 	.word	0x200000c8

08000604 <W5100SInitialze>:
{
	HAL_SPI_Receive(&hspi2, buffer, len, HAL_MAX_DELAY);
}

void W5100SInitialze(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
	intr_kind temp;
	int ret=0;
 800060a:	2300      	movs	r3, #0
 800060c:	607b      	str	r3, [r7, #4]
//	unsigned char W5100S_AdrSet[2][4] = {{4,4,0,0},{4,4,0,0}};
	/*
	 */
	do{//check phy status.
		ret = ctlwizchip(CW_GET_PHYLINK,(void*)&temp);
 800060e:	1cbb      	adds	r3, r7, #2
 8000610:	4619      	mov	r1, r3
 8000612:	200f      	movs	r0, #15
 8000614:	f004 f89e 	bl	8004754 <ctlwizchip>
 8000618:	4603      	mov	r3, r0
 800061a:	607b      	str	r3, [r7, #4]
		//printf("temp = %x\r\n",&temp);
		if(ret==-1){
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000622:	d102      	bne.n	800062a <W5100SInitialze+0x26>
			//if(ctlwizchip(CW_GET_PHYLINK,(void*)&temp) == -1){
				printf("Unknown PHY link status.\r\n");
 8000624:	480f      	ldr	r0, [pc, #60]	; (8000664 <W5100SInitialze+0x60>)
 8000626:	f004 fd8f 	bl	8005148 <puts>
			}
		}while(temp == PHY_LINK_OFF);
 800062a:	887b      	ldrh	r3, [r7, #2]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d0ee      	beq.n	800060e <W5100SInitialze+0xa>


	temp = IK_DEST_UNREACH;
 8000630:	2340      	movs	r3, #64	; 0x40
 8000632:	807b      	strh	r3, [r7, #2]
	if(ctlwizchip(CW_INIT_WIZCHIP,(void*)W5100S_AdrSet) == -1)
	{
		printf("W5100S initialized fail.\r\n");
	}
*/
	if(ctlwizchip(CW_SET_INTRMASK,&temp) == -1)
 8000634:	1cbb      	adds	r3, r7, #2
 8000636:	4619      	mov	r1, r3
 8000638:	2004      	movs	r0, #4
 800063a:	f004 f88b 	bl	8004754 <ctlwizchip>
 800063e:	4603      	mov	r3, r0
 8000640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000644:	d102      	bne.n	800064c <W5100SInitialze+0x48>
	{
		printf("W5100S interrupt\r\n");
 8000646:	4808      	ldr	r0, [pc, #32]	; (8000668 <W5100SInitialze+0x64>)
 8000648:	f004 fd7e 	bl	8005148 <puts>
	}
	printf("interrupt mask: %02x\r\n",getIMR());
 800064c:	2016      	movs	r0, #22
 800064e:	f003 fe95 	bl	800437c <WIZCHIP_READ>
 8000652:	4603      	mov	r3, r0
 8000654:	4619      	mov	r1, r3
 8000656:	4805      	ldr	r0, [pc, #20]	; (800066c <W5100SInitialze+0x68>)
 8000658:	f004 fd10 	bl	800507c <iprintf>


}
 800065c:	bf00      	nop
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	08005e34 	.word	0x08005e34
 8000668:	08005e50 	.word	0x08005e50
 800066c:	08005e64 	.word	0x08005e64

08000670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint32_t ti_9 = 0;
 8000676:	2300      	movs	r3, #0
 8000678:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067a:	f000 fd17 	bl	80010ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067e:	f000 f86b 	bl	8000758 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000682:	f000 f983 	bl	800098c <MX_GPIO_Init>
  MX_DMA_Init();
 8000686:	f000 f959 	bl	800093c <MX_DMA_Init>
  MX_SPI2_Init();
 800068a:	f000 f8cd 	bl	8000828 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 800068e:	f000 f92b 	bl	80008e8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000692:	f000 f8ff 	bl	8000894 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  ti_9 = HAL_GetTick();
 8000696:	f000 fd6f 	bl	8001178 <HAL_GetTick>
 800069a:	6078      	str	r0, [r7, #4]
  printf("test1  %ld\r\n",ti_9);
 800069c:	6879      	ldr	r1, [r7, #4]
 800069e:	4827      	ldr	r0, [pc, #156]	; (800073c <main+0xcc>)
 80006a0:	f004 fcec 	bl	800507c <iprintf>
  HAL_GPIO_WritePin(GPIOC, WIZ_RESET_Pin, GPIO_PIN_RESET);
 80006a4:	2200      	movs	r2, #0
 80006a6:	2101      	movs	r1, #1
 80006a8:	4825      	ldr	r0, [pc, #148]	; (8000740 <main+0xd0>)
 80006aa:	f001 fbb3 	bl	8001e14 <HAL_GPIO_WritePin>
  ti_9 = HAL_GetTick();
 80006ae:	f000 fd63 	bl	8001178 <HAL_GetTick>
 80006b2:	6078      	str	r0, [r7, #4]
    printf("test2  %ld\r\n",ti_9);
 80006b4:	6879      	ldr	r1, [r7, #4]
 80006b6:	4823      	ldr	r0, [pc, #140]	; (8000744 <main+0xd4>)
 80006b8:	f004 fce0 	bl	800507c <iprintf>
  HAL_Delay(500);
 80006bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006c0:	f000 fd66 	bl	8001190 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, WIZ_RESET_Pin, GPIO_PIN_SET);
 80006c4:	2201      	movs	r2, #1
 80006c6:	2101      	movs	r1, #1
 80006c8:	481d      	ldr	r0, [pc, #116]	; (8000740 <main+0xd0>)
 80006ca:	f001 fba3 	bl	8001e14 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80006ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006d2:	f000 fd5d 	bl	8001190 <HAL_Delay>
//SPI CS Test
  HAL_GPIO_WritePin(GPIOC, SPI_Select_Pin, GPIO_PIN_SET);
 80006d6:	2201      	movs	r2, #1
 80006d8:	2102      	movs	r1, #2
 80006da:	4819      	ldr	r0, [pc, #100]	; (8000740 <main+0xd0>)
 80006dc:	f001 fb9a 	bl	8001e14 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80006e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006e4:	f000 fd54 	bl	8001190 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, SPI_Select_Pin, GPIO_PIN_RESET);
 80006e8:	2200      	movs	r2, #0
 80006ea:	2102      	movs	r1, #2
 80006ec:	4814      	ldr	r0, [pc, #80]	; (8000740 <main+0xd0>)
 80006ee:	f001 fb91 	bl	8001e14 <HAL_GPIO_WritePin>
  HAL_Delay(500); HAL_Delay(500);
 80006f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006f6:	f000 fd4b 	bl	8001190 <HAL_Delay>
 80006fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006fe:	f000 fd47 	bl	8001190 <HAL_Delay>
reg_wizchip_spi_cbfunc(spiReadByte, spiWriteByte);
 8000702:	4911      	ldr	r1, [pc, #68]	; (8000748 <main+0xd8>)
 8000704:	4811      	ldr	r0, [pc, #68]	; (800074c <main+0xdc>)
 8000706:	f003 fff9 	bl	80046fc <reg_wizchip_spi_cbfunc>



  NETUNLOCK();
 800070a:	21c5      	movs	r1, #197	; 0xc5
 800070c:	2071      	movs	r0, #113	; 0x71
 800070e:	f003 fdef 	bl	80042f0 <WIZCHIP_WRITE>
  wizchip_setnetinfo(&gWIZNETINFO);
 8000712:	480f      	ldr	r0, [pc, #60]	; (8000750 <main+0xe0>)
 8000714:	f004 fb78 	bl	8004e08 <wizchip_setnetinfo>
  W5100SInitialze();
 8000718:	f7ff ff74 	bl	8000604 <W5100SInitialze>
  printf("VERSION(%x) = %.4x \r\n", VERR,getVER());
 800071c:	2080      	movs	r0, #128	; 0x80
 800071e:	f003 fe2d 	bl	800437c <WIZCHIP_READ>
 8000722:	4603      	mov	r3, r0
 8000724:	461a      	mov	r2, r3
 8000726:	2180      	movs	r1, #128	; 0x80
 8000728:	480a      	ldr	r0, [pc, #40]	; (8000754 <main+0xe4>)
 800072a:	f004 fca7 	bl	800507c <iprintf>
  HAL_Delay(500);
 800072e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000732:	f000 fd2d 	bl	8001190 <HAL_Delay>


    print_network_information();
 8000736:	f000 f9ab 	bl	8000a90 <print_network_information>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800073a:	e7fe      	b.n	800073a <main+0xca>
 800073c:	08005e7c 	.word	0x08005e7c
 8000740:	40020800 	.word	0x40020800
 8000744:	08005e8c 	.word	0x08005e8c
 8000748:	080005bd 	.word	0x080005bd
 800074c:	080005e1 	.word	0x080005e1
 8000750:	20000000 	.word	0x20000000
 8000754:	08005e9c 	.word	0x08005e9c

08000758 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b094      	sub	sp, #80	; 0x50
 800075c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075e:	f107 0320 	add.w	r3, r7, #32
 8000762:	2230      	movs	r2, #48	; 0x30
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f004 fdce 	bl	8005308 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800076c:	f107 030c 	add.w	r3, r7, #12
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800077c:	2300      	movs	r3, #0
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	4b27      	ldr	r3, [pc, #156]	; (8000820 <SystemClock_Config+0xc8>)
 8000782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000784:	4a26      	ldr	r2, [pc, #152]	; (8000820 <SystemClock_Config+0xc8>)
 8000786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800078a:	6413      	str	r3, [r2, #64]	; 0x40
 800078c:	4b24      	ldr	r3, [pc, #144]	; (8000820 <SystemClock_Config+0xc8>)
 800078e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000794:	60bb      	str	r3, [r7, #8]
 8000796:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000798:	2300      	movs	r3, #0
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	4b21      	ldr	r3, [pc, #132]	; (8000824 <SystemClock_Config+0xcc>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a20      	ldr	r2, [pc, #128]	; (8000824 <SystemClock_Config+0xcc>)
 80007a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007a6:	6013      	str	r3, [r2, #0]
 80007a8:	4b1e      	ldr	r3, [pc, #120]	; (8000824 <SystemClock_Config+0xcc>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007b4:	2302      	movs	r3, #2
 80007b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007b8:	2301      	movs	r3, #1
 80007ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007bc:	2310      	movs	r3, #16
 80007be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c0:	2302      	movs	r3, #2
 80007c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007c4:	2300      	movs	r3, #0
 80007c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007c8:	2308      	movs	r3, #8
 80007ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80007cc:	2348      	movs	r3, #72	; 0x48
 80007ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d0:	2302      	movs	r3, #2
 80007d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007d4:	2304      	movs	r3, #4
 80007d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d8:	f107 0320 	add.w	r3, r7, #32
 80007dc:	4618      	mov	r0, r3
 80007de:	f001 fb33 	bl	8001e48 <HAL_RCC_OscConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007e8:	f000 f9c2 	bl	8000b70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ec:	230f      	movs	r3, #15
 80007ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f0:	2302      	movs	r3, #2
 80007f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007fe:	2300      	movs	r3, #0
 8000800:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000802:	f107 030c 	add.w	r3, r7, #12
 8000806:	2102      	movs	r1, #2
 8000808:	4618      	mov	r0, r3
 800080a:	f001 fd95 	bl	8002338 <HAL_RCC_ClockConfig>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000814:	f000 f9ac 	bl	8000b70 <Error_Handler>
  }
}
 8000818:	bf00      	nop
 800081a:	3750      	adds	r7, #80	; 0x50
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40023800 	.word	0x40023800
 8000824:	40007000 	.word	0x40007000

08000828 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800082c:	4b17      	ldr	r3, [pc, #92]	; (800088c <MX_SPI2_Init+0x64>)
 800082e:	4a18      	ldr	r2, [pc, #96]	; (8000890 <MX_SPI2_Init+0x68>)
 8000830:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000832:	4b16      	ldr	r3, [pc, #88]	; (800088c <MX_SPI2_Init+0x64>)
 8000834:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000838:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800083a:	4b14      	ldr	r3, [pc, #80]	; (800088c <MX_SPI2_Init+0x64>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000840:	4b12      	ldr	r3, [pc, #72]	; (800088c <MX_SPI2_Init+0x64>)
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000846:	4b11      	ldr	r3, [pc, #68]	; (800088c <MX_SPI2_Init+0x64>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800084c:	4b0f      	ldr	r3, [pc, #60]	; (800088c <MX_SPI2_Init+0x64>)
 800084e:	2200      	movs	r2, #0
 8000850:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <MX_SPI2_Init+0x64>)
 8000854:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000858:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800085a:	4b0c      	ldr	r3, [pc, #48]	; (800088c <MX_SPI2_Init+0x64>)
 800085c:	2200      	movs	r2, #0
 800085e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000860:	4b0a      	ldr	r3, [pc, #40]	; (800088c <MX_SPI2_Init+0x64>)
 8000862:	2200      	movs	r2, #0
 8000864:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000866:	4b09      	ldr	r3, [pc, #36]	; (800088c <MX_SPI2_Init+0x64>)
 8000868:	2200      	movs	r2, #0
 800086a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800086c:	4b07      	ldr	r3, [pc, #28]	; (800088c <MX_SPI2_Init+0x64>)
 800086e:	2200      	movs	r2, #0
 8000870:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <MX_SPI2_Init+0x64>)
 8000874:	220a      	movs	r2, #10
 8000876:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000878:	4804      	ldr	r0, [pc, #16]	; (800088c <MX_SPI2_Init+0x64>)
 800087a:	f001 ff7d 	bl	8002778 <HAL_SPI_Init>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000884:	f000 f974 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000888:	bf00      	nop
 800088a:	bd80      	pop	{r7, pc}
 800088c:	200000c8 	.word	0x200000c8
 8000890:	40003800 	.word	0x40003800

08000894 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000898:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_USART1_UART_Init+0x4c>)
 800089a:	4a12      	ldr	r2, [pc, #72]	; (80008e4 <MX_USART1_UART_Init+0x50>)
 800089c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800089e:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <MX_USART1_UART_Init+0x4c>)
 80008a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_USART1_UART_Init+0x4c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_USART1_UART_Init+0x4c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <MX_USART1_UART_Init+0x4c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_USART1_UART_Init+0x4c>)
 80008ba:	220c      	movs	r2, #12
 80008bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008be:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <MX_USART1_UART_Init+0x4c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_USART1_UART_Init+0x4c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_USART1_UART_Init+0x4c>)
 80008cc:	f002 fcfc 	bl	80032c8 <HAL_UART_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008d6:	f000 f94b 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	200001e0 	.word	0x200001e0
 80008e4:	40011000 	.word	0x40011000

080008e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008ec:	4b11      	ldr	r3, [pc, #68]	; (8000934 <MX_USART2_UART_Init+0x4c>)
 80008ee:	4a12      	ldr	r2, [pc, #72]	; (8000938 <MX_USART2_UART_Init+0x50>)
 80008f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008f2:	4b10      	ldr	r3, [pc, #64]	; (8000934 <MX_USART2_UART_Init+0x4c>)
 80008f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008fa:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <MX_USART2_UART_Init+0x4c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000900:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <MX_USART2_UART_Init+0x4c>)
 8000902:	2200      	movs	r2, #0
 8000904:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000906:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <MX_USART2_UART_Init+0x4c>)
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800090c:	4b09      	ldr	r3, [pc, #36]	; (8000934 <MX_USART2_UART_Init+0x4c>)
 800090e:	220c      	movs	r2, #12
 8000910:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000912:	4b08      	ldr	r3, [pc, #32]	; (8000934 <MX_USART2_UART_Init+0x4c>)
 8000914:	2200      	movs	r2, #0
 8000916:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000918:	4b06      	ldr	r3, [pc, #24]	; (8000934 <MX_USART2_UART_Init+0x4c>)
 800091a:	2200      	movs	r2, #0
 800091c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800091e:	4805      	ldr	r0, [pc, #20]	; (8000934 <MX_USART2_UART_Init+0x4c>)
 8000920:	f002 fcd2 	bl	80032c8 <HAL_UART_Init>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800092a:	f000 f921 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20000224 	.word	0x20000224
 8000938:	40004400 	.word	0x40004400

0800093c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	607b      	str	r3, [r7, #4]
 8000946:	4b10      	ldr	r3, [pc, #64]	; (8000988 <MX_DMA_Init+0x4c>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a0f      	ldr	r2, [pc, #60]	; (8000988 <MX_DMA_Init+0x4c>)
 800094c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b0d      	ldr	r3, [pc, #52]	; (8000988 <MX_DMA_Init+0x4c>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800095e:	2200      	movs	r2, #0
 8000960:	2100      	movs	r1, #0
 8000962:	200e      	movs	r0, #14
 8000964:	f000 fd13 	bl	800138e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000968:	200e      	movs	r0, #14
 800096a:	f000 fd2c 	bl	80013c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800096e:	2200      	movs	r2, #0
 8000970:	2100      	movs	r1, #0
 8000972:	200f      	movs	r0, #15
 8000974:	f000 fd0b 	bl	800138e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000978:	200f      	movs	r0, #15
 800097a:	f000 fd24 	bl	80013c6 <HAL_NVIC_EnableIRQ>

}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40023800 	.word	0x40023800

0800098c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08a      	sub	sp, #40	; 0x28
 8000990:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000992:	f107 0314 	add.w	r3, r7, #20
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
 80009a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	613b      	str	r3, [r7, #16]
 80009a6:	4b37      	ldr	r3, [pc, #220]	; (8000a84 <MX_GPIO_Init+0xf8>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a36      	ldr	r2, [pc, #216]	; (8000a84 <MX_GPIO_Init+0xf8>)
 80009ac:	f043 0304 	orr.w	r3, r3, #4
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b34      	ldr	r3, [pc, #208]	; (8000a84 <MX_GPIO_Init+0xf8>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0304 	and.w	r3, r3, #4
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	4b30      	ldr	r3, [pc, #192]	; (8000a84 <MX_GPIO_Init+0xf8>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a2f      	ldr	r2, [pc, #188]	; (8000a84 <MX_GPIO_Init+0xf8>)
 80009c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b2d      	ldr	r3, [pc, #180]	; (8000a84 <MX_GPIO_Init+0xf8>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	60bb      	str	r3, [r7, #8]
 80009de:	4b29      	ldr	r3, [pc, #164]	; (8000a84 <MX_GPIO_Init+0xf8>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a28      	ldr	r2, [pc, #160]	; (8000a84 <MX_GPIO_Init+0xf8>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b26      	ldr	r3, [pc, #152]	; (8000a84 <MX_GPIO_Init+0xf8>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	4b22      	ldr	r3, [pc, #136]	; (8000a84 <MX_GPIO_Init+0xf8>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a21      	ldr	r2, [pc, #132]	; (8000a84 <MX_GPIO_Init+0xf8>)
 8000a00:	f043 0302 	orr.w	r3, r3, #2
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b1f      	ldr	r3, [pc, #124]	; (8000a84 <MX_GPIO_Init+0xf8>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0302 	and.w	r3, r3, #2
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, WIZ_RESET_Pin|SPI_Select_Pin, GPIO_PIN_RESET);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2103      	movs	r1, #3
 8000a16:	481c      	ldr	r0, [pc, #112]	; (8000a88 <MX_GPIO_Init+0xfc>)
 8000a18:	f001 f9fc 	bl	8001e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2120      	movs	r1, #32
 8000a20:	481a      	ldr	r0, [pc, #104]	; (8000a8c <MX_GPIO_Init+0x100>)
 8000a22:	f001 f9f7 	bl	8001e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a2c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4812      	ldr	r0, [pc, #72]	; (8000a88 <MX_GPIO_Init+0xfc>)
 8000a3e:	f001 f865 	bl	8001b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : WIZ_RESET_Pin SPI_Select_Pin */
  GPIO_InitStruct.Pin = WIZ_RESET_Pin|SPI_Select_Pin;
 8000a42:	2303      	movs	r3, #3
 8000a44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a46:	2301      	movs	r3, #1
 8000a48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	4619      	mov	r1, r3
 8000a58:	480b      	ldr	r0, [pc, #44]	; (8000a88 <MX_GPIO_Init+0xfc>)
 8000a5a:	f001 f857 	bl	8001b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a5e:	2320      	movs	r3, #32
 8000a60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a62:	2301      	movs	r3, #1
 8000a64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	4619      	mov	r1, r3
 8000a74:	4805      	ldr	r0, [pc, #20]	; (8000a8c <MX_GPIO_Init+0x100>)
 8000a76:	f001 f849 	bl	8001b0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a7a:	bf00      	nop
 8000a7c:	3728      	adds	r7, #40	; 0x28
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40020800 	.word	0x40020800
 8000a8c:	40020000 	.word	0x40020000

08000a90 <print_network_information>:

/* USER CODE BEGIN 4 */
void print_network_information(void)
{
 8000a90:	b5b0      	push	{r4, r5, r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af04      	add	r7, sp, #16
	wizchip_getnetinfo(&gWIZNETINFO);
 8000a96:	4830      	ldr	r0, [pc, #192]	; (8000b58 <print_network_information+0xc8>)
 8000a98:	f004 f9f2 	bl	8004e80 <wizchip_getnetinfo>
	printf("Mac address: %02x:%02x:%02x:%02x:%02x:%02x\n\r",gWIZNETINFO.mac[0],gWIZNETINFO.mac[1],gWIZNETINFO.mac[2],gWIZNETINFO.mac[3],gWIZNETINFO.mac[4],gWIZNETINFO.mac[5]);
 8000a9c:	4b2e      	ldr	r3, [pc, #184]	; (8000b58 <print_network_information+0xc8>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	4b2d      	ldr	r3, [pc, #180]	; (8000b58 <print_network_information+0xc8>)
 8000aa4:	785b      	ldrb	r3, [r3, #1]
 8000aa6:	461c      	mov	r4, r3
 8000aa8:	4b2b      	ldr	r3, [pc, #172]	; (8000b58 <print_network_information+0xc8>)
 8000aaa:	789b      	ldrb	r3, [r3, #2]
 8000aac:	461d      	mov	r5, r3
 8000aae:	4b2a      	ldr	r3, [pc, #168]	; (8000b58 <print_network_information+0xc8>)
 8000ab0:	78db      	ldrb	r3, [r3, #3]
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	4b28      	ldr	r3, [pc, #160]	; (8000b58 <print_network_information+0xc8>)
 8000ab6:	791b      	ldrb	r3, [r3, #4]
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4b27      	ldr	r3, [pc, #156]	; (8000b58 <print_network_information+0xc8>)
 8000abc:	795b      	ldrb	r3, [r3, #5]
 8000abe:	9302      	str	r3, [sp, #8]
 8000ac0:	9101      	str	r1, [sp, #4]
 8000ac2:	9200      	str	r2, [sp, #0]
 8000ac4:	462b      	mov	r3, r5
 8000ac6:	4622      	mov	r2, r4
 8000ac8:	4601      	mov	r1, r0
 8000aca:	4824      	ldr	r0, [pc, #144]	; (8000b5c <print_network_information+0xcc>)
 8000acc:	f004 fad6 	bl	800507c <iprintf>
	printf("IP address : %d.%d.%d.%d\n\r",gWIZNETINFO.ip[0],gWIZNETINFO.ip[1],gWIZNETINFO.ip[2],gWIZNETINFO.ip[3]);
 8000ad0:	4b21      	ldr	r3, [pc, #132]	; (8000b58 <print_network_information+0xc8>)
 8000ad2:	799b      	ldrb	r3, [r3, #6]
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4b20      	ldr	r3, [pc, #128]	; (8000b58 <print_network_information+0xc8>)
 8000ad8:	79db      	ldrb	r3, [r3, #7]
 8000ada:	461a      	mov	r2, r3
 8000adc:	4b1e      	ldr	r3, [pc, #120]	; (8000b58 <print_network_information+0xc8>)
 8000ade:	7a1b      	ldrb	r3, [r3, #8]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	4b1d      	ldr	r3, [pc, #116]	; (8000b58 <print_network_information+0xc8>)
 8000ae4:	7a5b      	ldrb	r3, [r3, #9]
 8000ae6:	9300      	str	r3, [sp, #0]
 8000ae8:	4603      	mov	r3, r0
 8000aea:	481d      	ldr	r0, [pc, #116]	; (8000b60 <print_network_information+0xd0>)
 8000aec:	f004 fac6 	bl	800507c <iprintf>
	printf("SN Mask	   : %d.%d.%d.%d\n\r",gWIZNETINFO.sn[0],gWIZNETINFO.sn[1],gWIZNETINFO.sn[2],gWIZNETINFO.sn[3]);
 8000af0:	4b19      	ldr	r3, [pc, #100]	; (8000b58 <print_network_information+0xc8>)
 8000af2:	7a9b      	ldrb	r3, [r3, #10]
 8000af4:	4619      	mov	r1, r3
 8000af6:	4b18      	ldr	r3, [pc, #96]	; (8000b58 <print_network_information+0xc8>)
 8000af8:	7adb      	ldrb	r3, [r3, #11]
 8000afa:	461a      	mov	r2, r3
 8000afc:	4b16      	ldr	r3, [pc, #88]	; (8000b58 <print_network_information+0xc8>)
 8000afe:	7b1b      	ldrb	r3, [r3, #12]
 8000b00:	4618      	mov	r0, r3
 8000b02:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <print_network_information+0xc8>)
 8000b04:	7b5b      	ldrb	r3, [r3, #13]
 8000b06:	9300      	str	r3, [sp, #0]
 8000b08:	4603      	mov	r3, r0
 8000b0a:	4816      	ldr	r0, [pc, #88]	; (8000b64 <print_network_information+0xd4>)
 8000b0c:	f004 fab6 	bl	800507c <iprintf>
	printf("Gate way   : %d.%d.%d.%d\n\r",gWIZNETINFO.gw[0],gWIZNETINFO.gw[1],gWIZNETINFO.gw[2],gWIZNETINFO.gw[3]);
 8000b10:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <print_network_information+0xc8>)
 8000b12:	7b9b      	ldrb	r3, [r3, #14]
 8000b14:	4619      	mov	r1, r3
 8000b16:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <print_network_information+0xc8>)
 8000b18:	7bdb      	ldrb	r3, [r3, #15]
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <print_network_information+0xc8>)
 8000b1e:	7c1b      	ldrb	r3, [r3, #16]
 8000b20:	4618      	mov	r0, r3
 8000b22:	4b0d      	ldr	r3, [pc, #52]	; (8000b58 <print_network_information+0xc8>)
 8000b24:	7c5b      	ldrb	r3, [r3, #17]
 8000b26:	9300      	str	r3, [sp, #0]
 8000b28:	4603      	mov	r3, r0
 8000b2a:	480f      	ldr	r0, [pc, #60]	; (8000b68 <print_network_information+0xd8>)
 8000b2c:	f004 faa6 	bl	800507c <iprintf>
	printf("DNS Server : %d.%d.%d.%d\n\r",gWIZNETINFO.dns[0],gWIZNETINFO.dns[1],gWIZNETINFO.dns[2],gWIZNETINFO.dns[3]);
 8000b30:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <print_network_information+0xc8>)
 8000b32:	7c9b      	ldrb	r3, [r3, #18]
 8000b34:	4619      	mov	r1, r3
 8000b36:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <print_network_information+0xc8>)
 8000b38:	7cdb      	ldrb	r3, [r3, #19]
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <print_network_information+0xc8>)
 8000b3e:	7d1b      	ldrb	r3, [r3, #20]
 8000b40:	4618      	mov	r0, r3
 8000b42:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <print_network_information+0xc8>)
 8000b44:	7d5b      	ldrb	r3, [r3, #21]
 8000b46:	9300      	str	r3, [sp, #0]
 8000b48:	4603      	mov	r3, r0
 8000b4a:	4808      	ldr	r0, [pc, #32]	; (8000b6c <print_network_information+0xdc>)
 8000b4c:	f004 fa96 	bl	800507c <iprintf>



}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bdb0      	pop	{r4, r5, r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000000 	.word	0x20000000
 8000b5c:	08005eb4 	.word	0x08005eb4
 8000b60:	08005ee4 	.word	0x08005ee4
 8000b64:	08005f00 	.word	0x08005f00
 8000b68:	08005f1c 	.word	0x08005f1c
 8000b6c:	08005f38 	.word	0x08005f38

08000b70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b74:	b672      	cpsid	i
}
 8000b76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <Error_Handler+0x8>
	...

08000b7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	607b      	str	r3, [r7, #4]
 8000b86:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <HAL_MspInit+0x5c>)
 8000b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8a:	4a13      	ldr	r2, [pc, #76]	; (8000bd8 <HAL_MspInit+0x5c>)
 8000b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b90:	6453      	str	r3, [r2, #68]	; 0x44
 8000b92:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <HAL_MspInit+0x5c>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	603b      	str	r3, [r7, #0]
 8000ba2:	4b0d      	ldr	r3, [pc, #52]	; (8000bd8 <HAL_MspInit+0x5c>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba6:	4a0c      	ldr	r2, [pc, #48]	; (8000bd8 <HAL_MspInit+0x5c>)
 8000ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bac:	6413      	str	r3, [r2, #64]	; 0x40
 8000bae:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <HAL_MspInit+0x5c>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb6:	603b      	str	r3, [r7, #0]
 8000bb8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bba:	2007      	movs	r0, #7
 8000bbc:	f000 fbdc 	bl	8001378 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	2005      	movs	r0, #5
 8000bc6:	f000 fbe2 	bl	800138e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000bca:	2005      	movs	r0, #5
 8000bcc:	f000 fbfb 	bl	80013c6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40023800 	.word	0x40023800

08000bdc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08a      	sub	sp, #40	; 0x28
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a56      	ldr	r2, [pc, #344]	; (8000d54 <HAL_SPI_MspInit+0x178>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	f040 80a5 	bne.w	8000d4a <HAL_SPI_MspInit+0x16e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c00:	2300      	movs	r3, #0
 8000c02:	613b      	str	r3, [r7, #16]
 8000c04:	4b54      	ldr	r3, [pc, #336]	; (8000d58 <HAL_SPI_MspInit+0x17c>)
 8000c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c08:	4a53      	ldr	r2, [pc, #332]	; (8000d58 <HAL_SPI_MspInit+0x17c>)
 8000c0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c10:	4b51      	ldr	r3, [pc, #324]	; (8000d58 <HAL_SPI_MspInit+0x17c>)
 8000c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	4b4d      	ldr	r3, [pc, #308]	; (8000d58 <HAL_SPI_MspInit+0x17c>)
 8000c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c24:	4a4c      	ldr	r2, [pc, #304]	; (8000d58 <HAL_SPI_MspInit+0x17c>)
 8000c26:	f043 0304 	orr.w	r3, r3, #4
 8000c2a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2c:	4b4a      	ldr	r3, [pc, #296]	; (8000d58 <HAL_SPI_MspInit+0x17c>)
 8000c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c30:	f003 0304 	and.w	r3, r3, #4
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60bb      	str	r3, [r7, #8]
 8000c3c:	4b46      	ldr	r3, [pc, #280]	; (8000d58 <HAL_SPI_MspInit+0x17c>)
 8000c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c40:	4a45      	ldr	r2, [pc, #276]	; (8000d58 <HAL_SPI_MspInit+0x17c>)
 8000c42:	f043 0302 	orr.w	r3, r3, #2
 8000c46:	6313      	str	r3, [r2, #48]	; 0x30
 8000c48:	4b43      	ldr	r3, [pc, #268]	; (8000d58 <HAL_SPI_MspInit+0x17c>)
 8000c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4c:	f003 0302 	and.w	r3, r3, #2
 8000c50:	60bb      	str	r3, [r7, #8]
 8000c52:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    PB9     ------> SPI2_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c54:	230c      	movs	r3, #12
 8000c56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c60:	2303      	movs	r3, #3
 8000c62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c64:	2305      	movs	r3, #5
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	483b      	ldr	r0, [pc, #236]	; (8000d5c <HAL_SPI_MspInit+0x180>)
 8000c70:	f000 ff4c 	bl	8001b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8000c74:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c82:	2303      	movs	r3, #3
 8000c84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c86:	2305      	movs	r3, #5
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8a:	f107 0314 	add.w	r3, r7, #20
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4833      	ldr	r0, [pc, #204]	; (8000d60 <HAL_SPI_MspInit+0x184>)
 8000c92:	f000 ff3b 	bl	8001b0c <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8000c96:	4b33      	ldr	r3, [pc, #204]	; (8000d64 <HAL_SPI_MspInit+0x188>)
 8000c98:	4a33      	ldr	r2, [pc, #204]	; (8000d68 <HAL_SPI_MspInit+0x18c>)
 8000c9a:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8000c9c:	4b31      	ldr	r3, [pc, #196]	; (8000d64 <HAL_SPI_MspInit+0x188>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ca2:	4b30      	ldr	r3, [pc, #192]	; (8000d64 <HAL_SPI_MspInit+0x188>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ca8:	4b2e      	ldr	r3, [pc, #184]	; (8000d64 <HAL_SPI_MspInit+0x188>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cae:	4b2d      	ldr	r3, [pc, #180]	; (8000d64 <HAL_SPI_MspInit+0x188>)
 8000cb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cb4:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cb6:	4b2b      	ldr	r3, [pc, #172]	; (8000d64 <HAL_SPI_MspInit+0x188>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cbc:	4b29      	ldr	r3, [pc, #164]	; (8000d64 <HAL_SPI_MspInit+0x188>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8000cc2:	4b28      	ldr	r3, [pc, #160]	; (8000d64 <HAL_SPI_MspInit+0x188>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000cc8:	4b26      	ldr	r3, [pc, #152]	; (8000d64 <HAL_SPI_MspInit+0x188>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cce:	4b25      	ldr	r3, [pc, #148]	; (8000d64 <HAL_SPI_MspInit+0x188>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000cd4:	4823      	ldr	r0, [pc, #140]	; (8000d64 <HAL_SPI_MspInit+0x188>)
 8000cd6:	f000 fb9d 	bl	8001414 <HAL_DMA_Init>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <HAL_SPI_MspInit+0x108>
    {
      Error_Handler();
 8000ce0:	f7ff ff46 	bl	8000b70 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4a1f      	ldr	r2, [pc, #124]	; (8000d64 <HAL_SPI_MspInit+0x188>)
 8000ce8:	64da      	str	r2, [r3, #76]	; 0x4c
 8000cea:	4a1e      	ldr	r2, [pc, #120]	; (8000d64 <HAL_SPI_MspInit+0x188>)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000cf0:	4b1e      	ldr	r3, [pc, #120]	; (8000d6c <HAL_SPI_MspInit+0x190>)
 8000cf2:	4a1f      	ldr	r2, [pc, #124]	; (8000d70 <HAL_SPI_MspInit+0x194>)
 8000cf4:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000cf6:	4b1d      	ldr	r3, [pc, #116]	; (8000d6c <HAL_SPI_MspInit+0x190>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cfc:	4b1b      	ldr	r3, [pc, #108]	; (8000d6c <HAL_SPI_MspInit+0x190>)
 8000cfe:	2240      	movs	r2, #64	; 0x40
 8000d00:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d02:	4b1a      	ldr	r3, [pc, #104]	; (8000d6c <HAL_SPI_MspInit+0x190>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d08:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <HAL_SPI_MspInit+0x190>)
 8000d0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d0e:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d10:	4b16      	ldr	r3, [pc, #88]	; (8000d6c <HAL_SPI_MspInit+0x190>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d16:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <HAL_SPI_MspInit+0x190>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000d1c:	4b13      	ldr	r3, [pc, #76]	; (8000d6c <HAL_SPI_MspInit+0x190>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d22:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <HAL_SPI_MspInit+0x190>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d28:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <HAL_SPI_MspInit+0x190>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000d2e:	480f      	ldr	r0, [pc, #60]	; (8000d6c <HAL_SPI_MspInit+0x190>)
 8000d30:	f000 fb70 	bl	8001414 <HAL_DMA_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <HAL_SPI_MspInit+0x162>
    {
      Error_Handler();
 8000d3a:	f7ff ff19 	bl	8000b70 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <HAL_SPI_MspInit+0x190>)
 8000d42:	649a      	str	r2, [r3, #72]	; 0x48
 8000d44:	4a09      	ldr	r2, [pc, #36]	; (8000d6c <HAL_SPI_MspInit+0x190>)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000d4a:	bf00      	nop
 8000d4c:	3728      	adds	r7, #40	; 0x28
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40003800 	.word	0x40003800
 8000d58:	40023800 	.word	0x40023800
 8000d5c:	40020800 	.word	0x40020800
 8000d60:	40020400 	.word	0x40020400
 8000d64:	20000120 	.word	0x20000120
 8000d68:	40026058 	.word	0x40026058
 8000d6c:	20000180 	.word	0x20000180
 8000d70:	40026070 	.word	0x40026070

08000d74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08c      	sub	sp, #48	; 0x30
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	f107 031c 	add.w	r3, r7, #28
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a32      	ldr	r2, [pc, #200]	; (8000e5c <HAL_UART_MspInit+0xe8>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d12d      	bne.n	8000df2 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	61bb      	str	r3, [r7, #24]
 8000d9a:	4b31      	ldr	r3, [pc, #196]	; (8000e60 <HAL_UART_MspInit+0xec>)
 8000d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9e:	4a30      	ldr	r2, [pc, #192]	; (8000e60 <HAL_UART_MspInit+0xec>)
 8000da0:	f043 0310 	orr.w	r3, r3, #16
 8000da4:	6453      	str	r3, [r2, #68]	; 0x44
 8000da6:	4b2e      	ldr	r3, [pc, #184]	; (8000e60 <HAL_UART_MspInit+0xec>)
 8000da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000daa:	f003 0310 	and.w	r3, r3, #16
 8000dae:	61bb      	str	r3, [r7, #24]
 8000db0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	617b      	str	r3, [r7, #20]
 8000db6:	4b2a      	ldr	r3, [pc, #168]	; (8000e60 <HAL_UART_MspInit+0xec>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	4a29      	ldr	r2, [pc, #164]	; (8000e60 <HAL_UART_MspInit+0xec>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc2:	4b27      	ldr	r3, [pc, #156]	; (8000e60 <HAL_UART_MspInit+0xec>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	617b      	str	r3, [r7, #20]
 8000dcc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000dce:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000de0:	2307      	movs	r3, #7
 8000de2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de4:	f107 031c 	add.w	r3, r7, #28
 8000de8:	4619      	mov	r1, r3
 8000dea:	481e      	ldr	r0, [pc, #120]	; (8000e64 <HAL_UART_MspInit+0xf0>)
 8000dec:	f000 fe8e 	bl	8001b0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000df0:	e030      	b.n	8000e54 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a1c      	ldr	r2, [pc, #112]	; (8000e68 <HAL_UART_MspInit+0xf4>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d12b      	bne.n	8000e54 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	613b      	str	r3, [r7, #16]
 8000e00:	4b17      	ldr	r3, [pc, #92]	; (8000e60 <HAL_UART_MspInit+0xec>)
 8000e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e04:	4a16      	ldr	r2, [pc, #88]	; (8000e60 <HAL_UART_MspInit+0xec>)
 8000e06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e0c:	4b14      	ldr	r3, [pc, #80]	; (8000e60 <HAL_UART_MspInit+0xec>)
 8000e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e14:	613b      	str	r3, [r7, #16]
 8000e16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	4b10      	ldr	r3, [pc, #64]	; (8000e60 <HAL_UART_MspInit+0xec>)
 8000e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e20:	4a0f      	ldr	r2, [pc, #60]	; (8000e60 <HAL_UART_MspInit+0xec>)
 8000e22:	f043 0301 	orr.w	r3, r3, #1
 8000e26:	6313      	str	r3, [r2, #48]	; 0x30
 8000e28:	4b0d      	ldr	r3, [pc, #52]	; (8000e60 <HAL_UART_MspInit+0xec>)
 8000e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2c:	f003 0301 	and.w	r3, r3, #1
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e34:	230c      	movs	r3, #12
 8000e36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e40:	2303      	movs	r3, #3
 8000e42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e44:	2307      	movs	r3, #7
 8000e46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e48:	f107 031c 	add.w	r3, r7, #28
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4805      	ldr	r0, [pc, #20]	; (8000e64 <HAL_UART_MspInit+0xf0>)
 8000e50:	f000 fe5c 	bl	8001b0c <HAL_GPIO_Init>
}
 8000e54:	bf00      	nop
 8000e56:	3730      	adds	r7, #48	; 0x30
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40011000 	.word	0x40011000
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40020000 	.word	0x40020000
 8000e68:	40004400 	.word	0x40004400

08000e6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <NMI_Handler+0x4>

08000e72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e76:	e7fe      	b.n	8000e76 <HardFault_Handler+0x4>

08000e78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <MemManage_Handler+0x4>

08000e7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e82:	e7fe      	b.n	8000e82 <BusFault_Handler+0x4>

08000e84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e88:	e7fe      	b.n	8000e88 <UsageFault_Handler+0x4>

08000e8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eb8:	f000 f94a 	bl	8001150 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8000ebc:	f000 fa9d 	bl	80013fa <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
	...

08000ed4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000ed8:	4802      	ldr	r0, [pc, #8]	; (8000ee4 <DMA1_Stream3_IRQHandler+0x10>)
 8000eda:	f000 fbdb 	bl	8001694 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000120 	.word	0x20000120

08000ee8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000eec:	4802      	ldr	r0, [pc, #8]	; (8000ef8 <DMA1_Stream4_IRQHandler+0x10>)
 8000eee:	f000 fbd1 	bl	8001694 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000180 	.word	0x20000180

08000efc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
    }
    __HAL_UART_CLEAR_PEFLAG(&huart1);
	#endif

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f00:	4802      	ldr	r0, [pc, #8]	; (8000f0c <USART1_IRQHandler+0x10>)
 8000f02:	f002 fac1 	bl	8003488 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	200001e0 	.word	0x200001e0

08000f10 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f14:	4802      	ldr	r0, [pc, #8]	; (8000f20 <USART2_IRQHandler+0x10>)
 8000f16:	f002 fab7 	bl	8003488 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000224 	.word	0x20000224

08000f24 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
 8000f34:	e00a      	b.n	8000f4c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f36:	f3af 8000 	nop.w
 8000f3a:	4601      	mov	r1, r0
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	1c5a      	adds	r2, r3, #1
 8000f40:	60ba      	str	r2, [r7, #8]
 8000f42:	b2ca      	uxtb	r2, r1
 8000f44:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	617b      	str	r3, [r7, #20]
 8000f4c:	697a      	ldr	r2, [r7, #20]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	dbf0      	blt.n	8000f36 <_read+0x12>
  }

  return len;
 8000f54:	687b      	ldr	r3, [r7, #4]
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3718      	adds	r7, #24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <_close>:
  }
  return len;
}

int _close(int file)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	b083      	sub	sp, #12
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f76:	b480      	push	{r7}
 8000f78:	b083      	sub	sp, #12
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
 8000f7e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f86:	605a      	str	r2, [r3, #4]
  return 0;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <_isatty>:

int _isatty(int file)
{
 8000f96:	b480      	push	{r7}
 8000f98:	b083      	sub	sp, #12
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f9e:	2301      	movs	r3, #1
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3714      	adds	r7, #20
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
	...

08000fc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fd0:	4a14      	ldr	r2, [pc, #80]	; (8001024 <_sbrk+0x5c>)
 8000fd2:	4b15      	ldr	r3, [pc, #84]	; (8001028 <_sbrk+0x60>)
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fdc:	4b13      	ldr	r3, [pc, #76]	; (800102c <_sbrk+0x64>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d102      	bne.n	8000fea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fe4:	4b11      	ldr	r3, [pc, #68]	; (800102c <_sbrk+0x64>)
 8000fe6:	4a12      	ldr	r2, [pc, #72]	; (8001030 <_sbrk+0x68>)
 8000fe8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fea:	4b10      	ldr	r3, [pc, #64]	; (800102c <_sbrk+0x64>)
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d207      	bcs.n	8001008 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ff8:	f004 f9d4 	bl	80053a4 <__errno>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	220c      	movs	r2, #12
 8001000:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001002:	f04f 33ff 	mov.w	r3, #4294967295
 8001006:	e009      	b.n	800101c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001008:	4b08      	ldr	r3, [pc, #32]	; (800102c <_sbrk+0x64>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800100e:	4b07      	ldr	r3, [pc, #28]	; (800102c <_sbrk+0x64>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4413      	add	r3, r2
 8001016:	4a05      	ldr	r2, [pc, #20]	; (800102c <_sbrk+0x64>)
 8001018:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800101a:	68fb      	ldr	r3, [r7, #12]
}
 800101c:	4618      	mov	r0, r3
 800101e:	3718      	adds	r7, #24
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20020000 	.word	0x20020000
 8001028:	00000400 	.word	0x00000400
 800102c:	20000268 	.word	0x20000268
 8001030:	200003c8 	.word	0x200003c8

08001034 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <SystemInit+0x20>)
 800103a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800103e:	4a05      	ldr	r2, [pc, #20]	; (8001054 <SystemInit+0x20>)
 8001040:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001044:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
    ldr   sp, =_estack    		 /* set stack pointer */
 8001058:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001090 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800105c:	480d      	ldr	r0, [pc, #52]	; (8001094 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800105e:	490e      	ldr	r1, [pc, #56]	; (8001098 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001060:	4a0e      	ldr	r2, [pc, #56]	; (800109c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001062:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001064:	e002      	b.n	800106c <LoopCopyDataInit>

08001066 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001066:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001068:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800106a:	3304      	adds	r3, #4

0800106c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800106c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800106e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001070:	d3f9      	bcc.n	8001066 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001072:	4a0b      	ldr	r2, [pc, #44]	; (80010a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001074:	4c0b      	ldr	r4, [pc, #44]	; (80010a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001076:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001078:	e001      	b.n	800107e <LoopFillZerobss>

0800107a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800107a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800107c:	3204      	adds	r2, #4

0800107e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800107e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001080:	d3fb      	bcc.n	800107a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001082:	f7ff ffd7 	bl	8001034 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001086:	f004 f993 	bl	80053b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800108a:	f7ff faf1 	bl	8000670 <main>
  bx  lr    
 800108e:	4770      	bx	lr
    ldr   sp, =_estack    		 /* set stack pointer */
 8001090:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001094:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001098:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 800109c:	08005fb8 	.word	0x08005fb8
  ldr r2, =_sbss
 80010a0:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 80010a4:	200003c4 	.word	0x200003c4

080010a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010a8:	e7fe      	b.n	80010a8 <ADC_IRQHandler>
	...

080010ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010b0:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <HAL_Init+0x40>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a0d      	ldr	r2, [pc, #52]	; (80010ec <HAL_Init+0x40>)
 80010b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010bc:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <HAL_Init+0x40>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a0a      	ldr	r2, [pc, #40]	; (80010ec <HAL_Init+0x40>)
 80010c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010c8:	4b08      	ldr	r3, [pc, #32]	; (80010ec <HAL_Init+0x40>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a07      	ldr	r2, [pc, #28]	; (80010ec <HAL_Init+0x40>)
 80010ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d4:	2003      	movs	r0, #3
 80010d6:	f000 f94f 	bl	8001378 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010da:	2000      	movs	r0, #0
 80010dc:	f000 f808 	bl	80010f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010e0:	f7ff fd4c 	bl	8000b7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40023c00 	.word	0x40023c00

080010f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <HAL_InitTick+0x54>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <HAL_InitTick+0x58>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	4619      	mov	r1, r3
 8001102:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001106:	fbb3 f3f1 	udiv	r3, r3, r1
 800110a:	fbb2 f3f3 	udiv	r3, r2, r3
 800110e:	4618      	mov	r0, r3
 8001110:	f000 f967 	bl	80013e2 <HAL_SYSTICK_Config>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e00e      	b.n	800113c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b0f      	cmp	r3, #15
 8001122:	d80a      	bhi.n	800113a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001124:	2200      	movs	r2, #0
 8001126:	6879      	ldr	r1, [r7, #4]
 8001128:	f04f 30ff 	mov.w	r0, #4294967295
 800112c:	f000 f92f 	bl	800138e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001130:	4a06      	ldr	r2, [pc, #24]	; (800114c <HAL_InitTick+0x5c>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001136:	2300      	movs	r3, #0
 8001138:	e000      	b.n	800113c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
}
 800113c:	4618      	mov	r0, r3
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20000018 	.word	0x20000018
 8001148:	20000020 	.word	0x20000020
 800114c:	2000001c 	.word	0x2000001c

08001150 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <HAL_IncTick+0x20>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	461a      	mov	r2, r3
 800115a:	4b06      	ldr	r3, [pc, #24]	; (8001174 <HAL_IncTick+0x24>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4413      	add	r3, r2
 8001160:	4a04      	ldr	r2, [pc, #16]	; (8001174 <HAL_IncTick+0x24>)
 8001162:	6013      	str	r3, [r2, #0]
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	20000020 	.word	0x20000020
 8001174:	2000026c 	.word	0x2000026c

08001178 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  return uwTick;
 800117c:	4b03      	ldr	r3, [pc, #12]	; (800118c <HAL_GetTick+0x14>)
 800117e:	681b      	ldr	r3, [r3, #0]
}
 8001180:	4618      	mov	r0, r3
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	2000026c 	.word	0x2000026c

08001190 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001198:	f7ff ffee 	bl	8001178 <HAL_GetTick>
 800119c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a8:	d005      	beq.n	80011b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011aa:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <HAL_Delay+0x44>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	461a      	mov	r2, r3
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	4413      	add	r3, r2
 80011b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011b6:	bf00      	nop
 80011b8:	f7ff ffde 	bl	8001178 <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	68fa      	ldr	r2, [r7, #12]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d8f7      	bhi.n	80011b8 <HAL_Delay+0x28>
  {
  }
}
 80011c8:	bf00      	nop
 80011ca:	bf00      	nop
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000020 	.word	0x20000020

080011d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011e8:	4b0c      	ldr	r3, [pc, #48]	; (800121c <__NVIC_SetPriorityGrouping+0x44>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ee:	68ba      	ldr	r2, [r7, #8]
 80011f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011f4:	4013      	ands	r3, r2
 80011f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001200:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001208:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800120a:	4a04      	ldr	r2, [pc, #16]	; (800121c <__NVIC_SetPriorityGrouping+0x44>)
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	60d3      	str	r3, [r2, #12]
}
 8001210:	bf00      	nop
 8001212:	3714      	adds	r7, #20
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	e000ed00 	.word	0xe000ed00

08001220 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001224:	4b04      	ldr	r3, [pc, #16]	; (8001238 <__NVIC_GetPriorityGrouping+0x18>)
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	0a1b      	lsrs	r3, r3, #8
 800122a:	f003 0307 	and.w	r3, r3, #7
}
 800122e:	4618      	mov	r0, r3
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124a:	2b00      	cmp	r3, #0
 800124c:	db0b      	blt.n	8001266 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	f003 021f 	and.w	r2, r3, #31
 8001254:	4907      	ldr	r1, [pc, #28]	; (8001274 <__NVIC_EnableIRQ+0x38>)
 8001256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125a:	095b      	lsrs	r3, r3, #5
 800125c:	2001      	movs	r0, #1
 800125e:	fa00 f202 	lsl.w	r2, r0, r2
 8001262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001266:	bf00      	nop
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	e000e100 	.word	0xe000e100

08001278 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	6039      	str	r1, [r7, #0]
 8001282:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001288:	2b00      	cmp	r3, #0
 800128a:	db0a      	blt.n	80012a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	b2da      	uxtb	r2, r3
 8001290:	490c      	ldr	r1, [pc, #48]	; (80012c4 <__NVIC_SetPriority+0x4c>)
 8001292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001296:	0112      	lsls	r2, r2, #4
 8001298:	b2d2      	uxtb	r2, r2
 800129a:	440b      	add	r3, r1
 800129c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012a0:	e00a      	b.n	80012b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	b2da      	uxtb	r2, r3
 80012a6:	4908      	ldr	r1, [pc, #32]	; (80012c8 <__NVIC_SetPriority+0x50>)
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	f003 030f 	and.w	r3, r3, #15
 80012ae:	3b04      	subs	r3, #4
 80012b0:	0112      	lsls	r2, r2, #4
 80012b2:	b2d2      	uxtb	r2, r2
 80012b4:	440b      	add	r3, r1
 80012b6:	761a      	strb	r2, [r3, #24]
}
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	e000e100 	.word	0xe000e100
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b089      	sub	sp, #36	; 0x24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	f1c3 0307 	rsb	r3, r3, #7
 80012e6:	2b04      	cmp	r3, #4
 80012e8:	bf28      	it	cs
 80012ea:	2304      	movcs	r3, #4
 80012ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	3304      	adds	r3, #4
 80012f2:	2b06      	cmp	r3, #6
 80012f4:	d902      	bls.n	80012fc <NVIC_EncodePriority+0x30>
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	3b03      	subs	r3, #3
 80012fa:	e000      	b.n	80012fe <NVIC_EncodePriority+0x32>
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001300:	f04f 32ff 	mov.w	r2, #4294967295
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43da      	mvns	r2, r3
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	401a      	ands	r2, r3
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001314:	f04f 31ff 	mov.w	r1, #4294967295
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	fa01 f303 	lsl.w	r3, r1, r3
 800131e:	43d9      	mvns	r1, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001324:	4313      	orrs	r3, r2
         );
}
 8001326:	4618      	mov	r0, r3
 8001328:	3724      	adds	r7, #36	; 0x24
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
	...

08001334 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3b01      	subs	r3, #1
 8001340:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001344:	d301      	bcc.n	800134a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001346:	2301      	movs	r3, #1
 8001348:	e00f      	b.n	800136a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800134a:	4a0a      	ldr	r2, [pc, #40]	; (8001374 <SysTick_Config+0x40>)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3b01      	subs	r3, #1
 8001350:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001352:	210f      	movs	r1, #15
 8001354:	f04f 30ff 	mov.w	r0, #4294967295
 8001358:	f7ff ff8e 	bl	8001278 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800135c:	4b05      	ldr	r3, [pc, #20]	; (8001374 <SysTick_Config+0x40>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001362:	4b04      	ldr	r3, [pc, #16]	; (8001374 <SysTick_Config+0x40>)
 8001364:	2207      	movs	r2, #7
 8001366:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	e000e010 	.word	0xe000e010

08001378 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff ff29 	bl	80011d8 <__NVIC_SetPriorityGrouping>
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800138e:	b580      	push	{r7, lr}
 8001390:	b086      	sub	sp, #24
 8001392:	af00      	add	r7, sp, #0
 8001394:	4603      	mov	r3, r0
 8001396:	60b9      	str	r1, [r7, #8]
 8001398:	607a      	str	r2, [r7, #4]
 800139a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013a0:	f7ff ff3e 	bl	8001220 <__NVIC_GetPriorityGrouping>
 80013a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	68b9      	ldr	r1, [r7, #8]
 80013aa:	6978      	ldr	r0, [r7, #20]
 80013ac:	f7ff ff8e 	bl	80012cc <NVIC_EncodePriority>
 80013b0:	4602      	mov	r2, r0
 80013b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013b6:	4611      	mov	r1, r2
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff ff5d 	bl	8001278 <__NVIC_SetPriority>
}
 80013be:	bf00      	nop
 80013c0:	3718      	adds	r7, #24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b082      	sub	sp, #8
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	4603      	mov	r3, r0
 80013ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff ff31 	bl	800123c <__NVIC_EnableIRQ>
}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b082      	sub	sp, #8
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f7ff ffa2 	bl	8001334 <SysTick_Config>
 80013f0:	4603      	mov	r3, r0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80013fe:	f000 f802 	bl	8001406 <HAL_SYSTICK_Callback>
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800140a:	bf00      	nop
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001420:	f7ff feaa 	bl	8001178 <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d101      	bne.n	8001430 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e099      	b.n	8001564 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2202      	movs	r2, #2
 8001434:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f022 0201 	bic.w	r2, r2, #1
 800144e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001450:	e00f      	b.n	8001472 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001452:	f7ff fe91 	bl	8001178 <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	2b05      	cmp	r3, #5
 800145e:	d908      	bls.n	8001472 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2220      	movs	r2, #32
 8001464:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2203      	movs	r2, #3
 800146a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e078      	b.n	8001564 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	2b00      	cmp	r3, #0
 800147e:	d1e8      	bne.n	8001452 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001488:	697a      	ldr	r2, [r7, #20]
 800148a:	4b38      	ldr	r3, [pc, #224]	; (800156c <HAL_DMA_Init+0x158>)
 800148c:	4013      	ands	r3, r2
 800148e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685a      	ldr	r2, [r3, #4]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800149e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	691b      	ldr	r3, [r3, #16]
 80014a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a1b      	ldr	r3, [r3, #32]
 80014bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014be:	697a      	ldr	r2, [r7, #20]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c8:	2b04      	cmp	r3, #4
 80014ca:	d107      	bne.n	80014dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d4:	4313      	orrs	r3, r2
 80014d6:	697a      	ldr	r2, [r7, #20]
 80014d8:	4313      	orrs	r3, r2
 80014da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	697a      	ldr	r2, [r7, #20]
 80014e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	695b      	ldr	r3, [r3, #20]
 80014ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	f023 0307 	bic.w	r3, r3, #7
 80014f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f8:	697a      	ldr	r2, [r7, #20]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001502:	2b04      	cmp	r3, #4
 8001504:	d117      	bne.n	8001536 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800150a:	697a      	ldr	r2, [r7, #20]
 800150c:	4313      	orrs	r3, r2
 800150e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001514:	2b00      	cmp	r3, #0
 8001516:	d00e      	beq.n	8001536 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f000 fa7b 	bl	8001a14 <DMA_CheckFifoParam>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d008      	beq.n	8001536 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2240      	movs	r2, #64	; 0x40
 8001528:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2201      	movs	r2, #1
 800152e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001532:	2301      	movs	r3, #1
 8001534:	e016      	b.n	8001564 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f000 fa32 	bl	80019a8 <DMA_CalcBaseAndBitshift>
 8001544:	4603      	mov	r3, r0
 8001546:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800154c:	223f      	movs	r2, #63	; 0x3f
 800154e:	409a      	lsls	r2, r3
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2201      	movs	r2, #1
 800155e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001562:	2300      	movs	r3, #0
}
 8001564:	4618      	mov	r0, r3
 8001566:	3718      	adds	r7, #24
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	f010803f 	.word	0xf010803f

08001570 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800157c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800157e:	f7ff fdfb 	bl	8001178 <HAL_GetTick>
 8001582:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800158a:	b2db      	uxtb	r3, r3
 800158c:	2b02      	cmp	r3, #2
 800158e:	d008      	beq.n	80015a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2280      	movs	r2, #128	; 0x80
 8001594:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e052      	b.n	8001648 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f022 0216 	bic.w	r2, r2, #22
 80015b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	695a      	ldr	r2, [r3, #20]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d103      	bne.n	80015d2 <HAL_DMA_Abort+0x62>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d007      	beq.n	80015e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f022 0208 	bic.w	r2, r2, #8
 80015e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f022 0201 	bic.w	r2, r2, #1
 80015f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015f2:	e013      	b.n	800161c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015f4:	f7ff fdc0 	bl	8001178 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b05      	cmp	r3, #5
 8001600:	d90c      	bls.n	800161c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2220      	movs	r2, #32
 8001606:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2203      	movs	r2, #3
 800160c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e015      	b.n	8001648 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1e4      	bne.n	80015f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800162e:	223f      	movs	r2, #63	; 0x3f
 8001630:	409a      	lsls	r2, r3
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2201      	movs	r2, #1
 800163a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001646:	2300      	movs	r3, #0
}
 8001648:	4618      	mov	r0, r3
 800164a:	3710      	adds	r7, #16
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d004      	beq.n	800166e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2280      	movs	r2, #128	; 0x80
 8001668:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e00c      	b.n	8001688 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2205      	movs	r2, #5
 8001672:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f022 0201 	bic.w	r2, r2, #1
 8001684:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001686:	2300      	movs	r3, #0
}
 8001688:	4618      	mov	r0, r3
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800169c:	2300      	movs	r3, #0
 800169e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80016a0:	4b8e      	ldr	r3, [pc, #568]	; (80018dc <HAL_DMA_IRQHandler+0x248>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a8e      	ldr	r2, [pc, #568]	; (80018e0 <HAL_DMA_IRQHandler+0x24c>)
 80016a6:	fba2 2303 	umull	r2, r3, r2, r3
 80016aa:	0a9b      	lsrs	r3, r3, #10
 80016ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016be:	2208      	movs	r2, #8
 80016c0:	409a      	lsls	r2, r3
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	4013      	ands	r3, r2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d01a      	beq.n	8001700 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0304 	and.w	r3, r3, #4
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d013      	beq.n	8001700 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f022 0204 	bic.w	r2, r2, #4
 80016e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ec:	2208      	movs	r2, #8
 80016ee:	409a      	lsls	r2, r3
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016f8:	f043 0201 	orr.w	r2, r3, #1
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001704:	2201      	movs	r2, #1
 8001706:	409a      	lsls	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4013      	ands	r3, r2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d012      	beq.n	8001736 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800171a:	2b00      	cmp	r3, #0
 800171c:	d00b      	beq.n	8001736 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001722:	2201      	movs	r2, #1
 8001724:	409a      	lsls	r2, r3
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800172e:	f043 0202 	orr.w	r2, r3, #2
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800173a:	2204      	movs	r2, #4
 800173c:	409a      	lsls	r2, r3
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	4013      	ands	r3, r2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d012      	beq.n	800176c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d00b      	beq.n	800176c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001758:	2204      	movs	r2, #4
 800175a:	409a      	lsls	r2, r3
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001764:	f043 0204 	orr.w	r2, r3, #4
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001770:	2210      	movs	r2, #16
 8001772:	409a      	lsls	r2, r3
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	4013      	ands	r3, r2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d043      	beq.n	8001804 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0308 	and.w	r3, r3, #8
 8001786:	2b00      	cmp	r3, #0
 8001788:	d03c      	beq.n	8001804 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800178e:	2210      	movs	r2, #16
 8001790:	409a      	lsls	r2, r3
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d018      	beq.n	80017d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d108      	bne.n	80017c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d024      	beq.n	8001804 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	4798      	blx	r3
 80017c2:	e01f      	b.n	8001804 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d01b      	beq.n	8001804 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	4798      	blx	r3
 80017d4:	e016      	b.n	8001804 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d107      	bne.n	80017f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f022 0208 	bic.w	r2, r2, #8
 80017f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d003      	beq.n	8001804 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001808:	2220      	movs	r2, #32
 800180a:	409a      	lsls	r2, r3
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	4013      	ands	r3, r2
 8001810:	2b00      	cmp	r3, #0
 8001812:	f000 808f 	beq.w	8001934 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0310 	and.w	r3, r3, #16
 8001820:	2b00      	cmp	r3, #0
 8001822:	f000 8087 	beq.w	8001934 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800182a:	2220      	movs	r2, #32
 800182c:	409a      	lsls	r2, r3
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b05      	cmp	r3, #5
 800183c:	d136      	bne.n	80018ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f022 0216 	bic.w	r2, r2, #22
 800184c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	695a      	ldr	r2, [r3, #20]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800185c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	2b00      	cmp	r3, #0
 8001864:	d103      	bne.n	800186e <HAL_DMA_IRQHandler+0x1da>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800186a:	2b00      	cmp	r3, #0
 800186c:	d007      	beq.n	800187e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f022 0208 	bic.w	r2, r2, #8
 800187c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001882:	223f      	movs	r2, #63	; 0x3f
 8001884:	409a      	lsls	r2, r3
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2201      	movs	r2, #1
 800188e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d07e      	beq.n	80019a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	4798      	blx	r3
        }
        return;
 80018aa:	e079      	b.n	80019a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d01d      	beq.n	80018f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d10d      	bne.n	80018e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d031      	beq.n	8001934 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	4798      	blx	r3
 80018d8:	e02c      	b.n	8001934 <HAL_DMA_IRQHandler+0x2a0>
 80018da:	bf00      	nop
 80018dc:	20000018 	.word	0x20000018
 80018e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d023      	beq.n	8001934 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	4798      	blx	r3
 80018f4:	e01e      	b.n	8001934 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001900:	2b00      	cmp	r3, #0
 8001902:	d10f      	bne.n	8001924 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f022 0210 	bic.w	r2, r2, #16
 8001912:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2201      	movs	r2, #1
 8001918:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001928:	2b00      	cmp	r3, #0
 800192a:	d003      	beq.n	8001934 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001938:	2b00      	cmp	r3, #0
 800193a:	d032      	beq.n	80019a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	2b00      	cmp	r3, #0
 8001946:	d022      	beq.n	800198e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2205      	movs	r2, #5
 800194c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f022 0201 	bic.w	r2, r2, #1
 800195e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	3301      	adds	r3, #1
 8001964:	60bb      	str	r3, [r7, #8]
 8001966:	697a      	ldr	r2, [r7, #20]
 8001968:	429a      	cmp	r2, r3
 800196a:	d307      	bcc.n	800197c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1f2      	bne.n	8001960 <HAL_DMA_IRQHandler+0x2cc>
 800197a:	e000      	b.n	800197e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800197c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2201      	movs	r2, #1
 8001982:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001992:	2b00      	cmp	r3, #0
 8001994:	d005      	beq.n	80019a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	4798      	blx	r3
 800199e:	e000      	b.n	80019a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80019a0:	bf00      	nop
    }
  }
}
 80019a2:	3718      	adds	r7, #24
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	3b10      	subs	r3, #16
 80019b8:	4a14      	ldr	r2, [pc, #80]	; (8001a0c <DMA_CalcBaseAndBitshift+0x64>)
 80019ba:	fba2 2303 	umull	r2, r3, r2, r3
 80019be:	091b      	lsrs	r3, r3, #4
 80019c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80019c2:	4a13      	ldr	r2, [pc, #76]	; (8001a10 <DMA_CalcBaseAndBitshift+0x68>)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	4413      	add	r3, r2
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	461a      	mov	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2b03      	cmp	r3, #3
 80019d4:	d909      	bls.n	80019ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80019de:	f023 0303 	bic.w	r3, r3, #3
 80019e2:	1d1a      	adds	r2, r3, #4
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	659a      	str	r2, [r3, #88]	; 0x58
 80019e8:	e007      	b.n	80019fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80019f2:	f023 0303 	bic.w	r3, r3, #3
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3714      	adds	r7, #20
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	aaaaaaab 	.word	0xaaaaaaab
 8001a10:	08005f6c 	.word	0x08005f6c

08001a14 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a24:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d11f      	bne.n	8001a6e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	2b03      	cmp	r3, #3
 8001a32:	d856      	bhi.n	8001ae2 <DMA_CheckFifoParam+0xce>
 8001a34:	a201      	add	r2, pc, #4	; (adr r2, 8001a3c <DMA_CheckFifoParam+0x28>)
 8001a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a3a:	bf00      	nop
 8001a3c:	08001a4d 	.word	0x08001a4d
 8001a40:	08001a5f 	.word	0x08001a5f
 8001a44:	08001a4d 	.word	0x08001a4d
 8001a48:	08001ae3 	.word	0x08001ae3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d046      	beq.n	8001ae6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a5c:	e043      	b.n	8001ae6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a62:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a66:	d140      	bne.n	8001aea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a6c:	e03d      	b.n	8001aea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a76:	d121      	bne.n	8001abc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	2b03      	cmp	r3, #3
 8001a7c:	d837      	bhi.n	8001aee <DMA_CheckFifoParam+0xda>
 8001a7e:	a201      	add	r2, pc, #4	; (adr r2, 8001a84 <DMA_CheckFifoParam+0x70>)
 8001a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a84:	08001a95 	.word	0x08001a95
 8001a88:	08001a9b 	.word	0x08001a9b
 8001a8c:	08001a95 	.word	0x08001a95
 8001a90:	08001aad 	.word	0x08001aad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	73fb      	strb	r3, [r7, #15]
      break;
 8001a98:	e030      	b.n	8001afc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d025      	beq.n	8001af2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001aaa:	e022      	b.n	8001af2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ab4:	d11f      	bne.n	8001af6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001aba:	e01c      	b.n	8001af6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d903      	bls.n	8001aca <DMA_CheckFifoParam+0xb6>
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	2b03      	cmp	r3, #3
 8001ac6:	d003      	beq.n	8001ad0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ac8:	e018      	b.n	8001afc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	73fb      	strb	r3, [r7, #15]
      break;
 8001ace:	e015      	b.n	8001afc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d00e      	beq.n	8001afa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	73fb      	strb	r3, [r7, #15]
      break;
 8001ae0:	e00b      	b.n	8001afa <DMA_CheckFifoParam+0xe6>
      break;
 8001ae2:	bf00      	nop
 8001ae4:	e00a      	b.n	8001afc <DMA_CheckFifoParam+0xe8>
      break;
 8001ae6:	bf00      	nop
 8001ae8:	e008      	b.n	8001afc <DMA_CheckFifoParam+0xe8>
      break;
 8001aea:	bf00      	nop
 8001aec:	e006      	b.n	8001afc <DMA_CheckFifoParam+0xe8>
      break;
 8001aee:	bf00      	nop
 8001af0:	e004      	b.n	8001afc <DMA_CheckFifoParam+0xe8>
      break;
 8001af2:	bf00      	nop
 8001af4:	e002      	b.n	8001afc <DMA_CheckFifoParam+0xe8>
      break;   
 8001af6:	bf00      	nop
 8001af8:	e000      	b.n	8001afc <DMA_CheckFifoParam+0xe8>
      break;
 8001afa:	bf00      	nop
    }
  } 
  
  return status; 
 8001afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3714      	adds	r7, #20
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop

08001b0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b089      	sub	sp, #36	; 0x24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b16:	2300      	movs	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b22:	2300      	movs	r3, #0
 8001b24:	61fb      	str	r3, [r7, #28]
 8001b26:	e159      	b.n	8001ddc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b28:	2201      	movs	r2, #1
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	f040 8148 	bne.w	8001dd6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f003 0303 	and.w	r3, r3, #3
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d005      	beq.n	8001b5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d130      	bne.n	8001bc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	2203      	movs	r2, #3
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4013      	ands	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	68da      	ldr	r2, [r3, #12]
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b94:	2201      	movs	r2, #1
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	091b      	lsrs	r3, r3, #4
 8001baa:	f003 0201 	and.w	r2, r3, #1
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f003 0303 	and.w	r3, r3, #3
 8001bc8:	2b03      	cmp	r3, #3
 8001bca:	d017      	beq.n	8001bfc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	2203      	movs	r2, #3
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4013      	ands	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	689a      	ldr	r2, [r3, #8]
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f003 0303 	and.w	r3, r3, #3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d123      	bne.n	8001c50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	08da      	lsrs	r2, r3, #3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3208      	adds	r2, #8
 8001c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	f003 0307 	and.w	r3, r3, #7
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	220f      	movs	r2, #15
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	43db      	mvns	r3, r3
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	691a      	ldr	r2, [r3, #16]
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	08da      	lsrs	r2, r3, #3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	3208      	adds	r2, #8
 8001c4a:	69b9      	ldr	r1, [r7, #24]
 8001c4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	2203      	movs	r2, #3
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	43db      	mvns	r3, r3
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	4013      	ands	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f003 0203 	and.w	r2, r3, #3
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	f000 80a2 	beq.w	8001dd6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	4b57      	ldr	r3, [pc, #348]	; (8001df4 <HAL_GPIO_Init+0x2e8>)
 8001c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9a:	4a56      	ldr	r2, [pc, #344]	; (8001df4 <HAL_GPIO_Init+0x2e8>)
 8001c9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ca2:	4b54      	ldr	r3, [pc, #336]	; (8001df4 <HAL_GPIO_Init+0x2e8>)
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cae:	4a52      	ldr	r2, [pc, #328]	; (8001df8 <HAL_GPIO_Init+0x2ec>)
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	089b      	lsrs	r3, r3, #2
 8001cb4:	3302      	adds	r3, #2
 8001cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	f003 0303 	and.w	r3, r3, #3
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	220f      	movs	r2, #15
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a49      	ldr	r2, [pc, #292]	; (8001dfc <HAL_GPIO_Init+0x2f0>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d019      	beq.n	8001d0e <HAL_GPIO_Init+0x202>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a48      	ldr	r2, [pc, #288]	; (8001e00 <HAL_GPIO_Init+0x2f4>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d013      	beq.n	8001d0a <HAL_GPIO_Init+0x1fe>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a47      	ldr	r2, [pc, #284]	; (8001e04 <HAL_GPIO_Init+0x2f8>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d00d      	beq.n	8001d06 <HAL_GPIO_Init+0x1fa>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a46      	ldr	r2, [pc, #280]	; (8001e08 <HAL_GPIO_Init+0x2fc>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d007      	beq.n	8001d02 <HAL_GPIO_Init+0x1f6>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a45      	ldr	r2, [pc, #276]	; (8001e0c <HAL_GPIO_Init+0x300>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d101      	bne.n	8001cfe <HAL_GPIO_Init+0x1f2>
 8001cfa:	2304      	movs	r3, #4
 8001cfc:	e008      	b.n	8001d10 <HAL_GPIO_Init+0x204>
 8001cfe:	2307      	movs	r3, #7
 8001d00:	e006      	b.n	8001d10 <HAL_GPIO_Init+0x204>
 8001d02:	2303      	movs	r3, #3
 8001d04:	e004      	b.n	8001d10 <HAL_GPIO_Init+0x204>
 8001d06:	2302      	movs	r3, #2
 8001d08:	e002      	b.n	8001d10 <HAL_GPIO_Init+0x204>
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e000      	b.n	8001d10 <HAL_GPIO_Init+0x204>
 8001d0e:	2300      	movs	r3, #0
 8001d10:	69fa      	ldr	r2, [r7, #28]
 8001d12:	f002 0203 	and.w	r2, r2, #3
 8001d16:	0092      	lsls	r2, r2, #2
 8001d18:	4093      	lsls	r3, r2
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d20:	4935      	ldr	r1, [pc, #212]	; (8001df8 <HAL_GPIO_Init+0x2ec>)
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	089b      	lsrs	r3, r3, #2
 8001d26:	3302      	adds	r3, #2
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d2e:	4b38      	ldr	r3, [pc, #224]	; (8001e10 <HAL_GPIO_Init+0x304>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	43db      	mvns	r3, r3
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d003      	beq.n	8001d52 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d52:	4a2f      	ldr	r2, [pc, #188]	; (8001e10 <HAL_GPIO_Init+0x304>)
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d58:	4b2d      	ldr	r3, [pc, #180]	; (8001e10 <HAL_GPIO_Init+0x304>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	43db      	mvns	r3, r3
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	4013      	ands	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d003      	beq.n	8001d7c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d7c:	4a24      	ldr	r2, [pc, #144]	; (8001e10 <HAL_GPIO_Init+0x304>)
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d82:	4b23      	ldr	r3, [pc, #140]	; (8001e10 <HAL_GPIO_Init+0x304>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001da6:	4a1a      	ldr	r2, [pc, #104]	; (8001e10 <HAL_GPIO_Init+0x304>)
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dac:	4b18      	ldr	r3, [pc, #96]	; (8001e10 <HAL_GPIO_Init+0x304>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	43db      	mvns	r3, r3
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	4013      	ands	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d003      	beq.n	8001dd0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dd0:	4a0f      	ldr	r2, [pc, #60]	; (8001e10 <HAL_GPIO_Init+0x304>)
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	61fb      	str	r3, [r7, #28]
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	2b0f      	cmp	r3, #15
 8001de0:	f67f aea2 	bls.w	8001b28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001de4:	bf00      	nop
 8001de6:	bf00      	nop
 8001de8:	3724      	adds	r7, #36	; 0x24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	40023800 	.word	0x40023800
 8001df8:	40013800 	.word	0x40013800
 8001dfc:	40020000 	.word	0x40020000
 8001e00:	40020400 	.word	0x40020400
 8001e04:	40020800 	.word	0x40020800
 8001e08:	40020c00 	.word	0x40020c00
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	40013c00 	.word	0x40013c00

08001e14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	807b      	strh	r3, [r7, #2]
 8001e20:	4613      	mov	r3, r2
 8001e22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e24:	787b      	ldrb	r3, [r7, #1]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d003      	beq.n	8001e32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e2a:	887a      	ldrh	r2, [r7, #2]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e30:	e003      	b.n	8001e3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e32:	887b      	ldrh	r3, [r7, #2]
 8001e34:	041a      	lsls	r2, r3, #16
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	619a      	str	r2, [r3, #24]
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
	...

08001e48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e267      	b.n	800232a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d075      	beq.n	8001f52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e66:	4b88      	ldr	r3, [pc, #544]	; (8002088 <HAL_RCC_OscConfig+0x240>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 030c 	and.w	r3, r3, #12
 8001e6e:	2b04      	cmp	r3, #4
 8001e70:	d00c      	beq.n	8001e8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e72:	4b85      	ldr	r3, [pc, #532]	; (8002088 <HAL_RCC_OscConfig+0x240>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e7a:	2b08      	cmp	r3, #8
 8001e7c:	d112      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e7e:	4b82      	ldr	r3, [pc, #520]	; (8002088 <HAL_RCC_OscConfig+0x240>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e8a:	d10b      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e8c:	4b7e      	ldr	r3, [pc, #504]	; (8002088 <HAL_RCC_OscConfig+0x240>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d05b      	beq.n	8001f50 <HAL_RCC_OscConfig+0x108>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d157      	bne.n	8001f50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e242      	b.n	800232a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eac:	d106      	bne.n	8001ebc <HAL_RCC_OscConfig+0x74>
 8001eae:	4b76      	ldr	r3, [pc, #472]	; (8002088 <HAL_RCC_OscConfig+0x240>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a75      	ldr	r2, [pc, #468]	; (8002088 <HAL_RCC_OscConfig+0x240>)
 8001eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb8:	6013      	str	r3, [r2, #0]
 8001eba:	e01d      	b.n	8001ef8 <HAL_RCC_OscConfig+0xb0>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ec4:	d10c      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x98>
 8001ec6:	4b70      	ldr	r3, [pc, #448]	; (8002088 <HAL_RCC_OscConfig+0x240>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a6f      	ldr	r2, [pc, #444]	; (8002088 <HAL_RCC_OscConfig+0x240>)
 8001ecc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ed0:	6013      	str	r3, [r2, #0]
 8001ed2:	4b6d      	ldr	r3, [pc, #436]	; (8002088 <HAL_RCC_OscConfig+0x240>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a6c      	ldr	r2, [pc, #432]	; (8002088 <HAL_RCC_OscConfig+0x240>)
 8001ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001edc:	6013      	str	r3, [r2, #0]
 8001ede:	e00b      	b.n	8001ef8 <HAL_RCC_OscConfig+0xb0>
 8001ee0:	4b69      	ldr	r3, [pc, #420]	; (8002088 <HAL_RCC_OscConfig+0x240>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a68      	ldr	r2, [pc, #416]	; (8002088 <HAL_RCC_OscConfig+0x240>)
 8001ee6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eea:	6013      	str	r3, [r2, #0]
 8001eec:	4b66      	ldr	r3, [pc, #408]	; (8002088 <HAL_RCC_OscConfig+0x240>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a65      	ldr	r2, [pc, #404]	; (8002088 <HAL_RCC_OscConfig+0x240>)
 8001ef2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ef6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d013      	beq.n	8001f28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f00:	f7ff f93a 	bl	8001178 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f08:	f7ff f936 	bl	8001178 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b64      	cmp	r3, #100	; 0x64
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e207      	b.n	800232a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f1a:	4b5b      	ldr	r3, [pc, #364]	; (8002088 <HAL_RCC_OscConfig+0x240>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d0f0      	beq.n	8001f08 <HAL_RCC_OscConfig+0xc0>
 8001f26:	e014      	b.n	8001f52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f28:	f7ff f926 	bl	8001178 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f30:	f7ff f922 	bl	8001178 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b64      	cmp	r3, #100	; 0x64
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e1f3      	b.n	800232a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f42:	4b51      	ldr	r3, [pc, #324]	; (8002088 <HAL_RCC_OscConfig+0x240>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1f0      	bne.n	8001f30 <HAL_RCC_OscConfig+0xe8>
 8001f4e:	e000      	b.n	8001f52 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d063      	beq.n	8002026 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f5e:	4b4a      	ldr	r3, [pc, #296]	; (8002088 <HAL_RCC_OscConfig+0x240>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 030c 	and.w	r3, r3, #12
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00b      	beq.n	8001f82 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f6a:	4b47      	ldr	r3, [pc, #284]	; (8002088 <HAL_RCC_OscConfig+0x240>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f72:	2b08      	cmp	r3, #8
 8001f74:	d11c      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f76:	4b44      	ldr	r3, [pc, #272]	; (8002088 <HAL_RCC_OscConfig+0x240>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d116      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f82:	4b41      	ldr	r3, [pc, #260]	; (8002088 <HAL_RCC_OscConfig+0x240>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d005      	beq.n	8001f9a <HAL_RCC_OscConfig+0x152>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d001      	beq.n	8001f9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e1c7      	b.n	800232a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f9a:	4b3b      	ldr	r3, [pc, #236]	; (8002088 <HAL_RCC_OscConfig+0x240>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	4937      	ldr	r1, [pc, #220]	; (8002088 <HAL_RCC_OscConfig+0x240>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fae:	e03a      	b.n	8002026 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d020      	beq.n	8001ffa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fb8:	4b34      	ldr	r3, [pc, #208]	; (800208c <HAL_RCC_OscConfig+0x244>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fbe:	f7ff f8db 	bl	8001178 <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fc6:	f7ff f8d7 	bl	8001178 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e1a8      	b.n	800232a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd8:	4b2b      	ldr	r3, [pc, #172]	; (8002088 <HAL_RCC_OscConfig+0x240>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d0f0      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe4:	4b28      	ldr	r3, [pc, #160]	; (8002088 <HAL_RCC_OscConfig+0x240>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	4925      	ldr	r1, [pc, #148]	; (8002088 <HAL_RCC_OscConfig+0x240>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	600b      	str	r3, [r1, #0]
 8001ff8:	e015      	b.n	8002026 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ffa:	4b24      	ldr	r3, [pc, #144]	; (800208c <HAL_RCC_OscConfig+0x244>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002000:	f7ff f8ba 	bl	8001178 <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002008:	f7ff f8b6 	bl	8001178 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e187      	b.n	800232a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800201a:	4b1b      	ldr	r3, [pc, #108]	; (8002088 <HAL_RCC_OscConfig+0x240>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1f0      	bne.n	8002008 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0308 	and.w	r3, r3, #8
 800202e:	2b00      	cmp	r3, #0
 8002030:	d036      	beq.n	80020a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d016      	beq.n	8002068 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800203a:	4b15      	ldr	r3, [pc, #84]	; (8002090 <HAL_RCC_OscConfig+0x248>)
 800203c:	2201      	movs	r2, #1
 800203e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002040:	f7ff f89a 	bl	8001178 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002048:	f7ff f896 	bl	8001178 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e167      	b.n	800232a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800205a:	4b0b      	ldr	r3, [pc, #44]	; (8002088 <HAL_RCC_OscConfig+0x240>)
 800205c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d0f0      	beq.n	8002048 <HAL_RCC_OscConfig+0x200>
 8002066:	e01b      	b.n	80020a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002068:	4b09      	ldr	r3, [pc, #36]	; (8002090 <HAL_RCC_OscConfig+0x248>)
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800206e:	f7ff f883 	bl	8001178 <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002074:	e00e      	b.n	8002094 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002076:	f7ff f87f 	bl	8001178 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d907      	bls.n	8002094 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e150      	b.n	800232a <HAL_RCC_OscConfig+0x4e2>
 8002088:	40023800 	.word	0x40023800
 800208c:	42470000 	.word	0x42470000
 8002090:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002094:	4b88      	ldr	r3, [pc, #544]	; (80022b8 <HAL_RCC_OscConfig+0x470>)
 8002096:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d1ea      	bne.n	8002076 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0304 	and.w	r3, r3, #4
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f000 8097 	beq.w	80021dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ae:	2300      	movs	r3, #0
 80020b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020b2:	4b81      	ldr	r3, [pc, #516]	; (80022b8 <HAL_RCC_OscConfig+0x470>)
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d10f      	bne.n	80020de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	60bb      	str	r3, [r7, #8]
 80020c2:	4b7d      	ldr	r3, [pc, #500]	; (80022b8 <HAL_RCC_OscConfig+0x470>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	4a7c      	ldr	r2, [pc, #496]	; (80022b8 <HAL_RCC_OscConfig+0x470>)
 80020c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020cc:	6413      	str	r3, [r2, #64]	; 0x40
 80020ce:	4b7a      	ldr	r3, [pc, #488]	; (80022b8 <HAL_RCC_OscConfig+0x470>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d6:	60bb      	str	r3, [r7, #8]
 80020d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020da:	2301      	movs	r3, #1
 80020dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020de:	4b77      	ldr	r3, [pc, #476]	; (80022bc <HAL_RCC_OscConfig+0x474>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d118      	bne.n	800211c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020ea:	4b74      	ldr	r3, [pc, #464]	; (80022bc <HAL_RCC_OscConfig+0x474>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a73      	ldr	r2, [pc, #460]	; (80022bc <HAL_RCC_OscConfig+0x474>)
 80020f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020f6:	f7ff f83f 	bl	8001178 <HAL_GetTick>
 80020fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020fc:	e008      	b.n	8002110 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020fe:	f7ff f83b 	bl	8001178 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e10c      	b.n	800232a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002110:	4b6a      	ldr	r3, [pc, #424]	; (80022bc <HAL_RCC_OscConfig+0x474>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002118:	2b00      	cmp	r3, #0
 800211a:	d0f0      	beq.n	80020fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d106      	bne.n	8002132 <HAL_RCC_OscConfig+0x2ea>
 8002124:	4b64      	ldr	r3, [pc, #400]	; (80022b8 <HAL_RCC_OscConfig+0x470>)
 8002126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002128:	4a63      	ldr	r2, [pc, #396]	; (80022b8 <HAL_RCC_OscConfig+0x470>)
 800212a:	f043 0301 	orr.w	r3, r3, #1
 800212e:	6713      	str	r3, [r2, #112]	; 0x70
 8002130:	e01c      	b.n	800216c <HAL_RCC_OscConfig+0x324>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	2b05      	cmp	r3, #5
 8002138:	d10c      	bne.n	8002154 <HAL_RCC_OscConfig+0x30c>
 800213a:	4b5f      	ldr	r3, [pc, #380]	; (80022b8 <HAL_RCC_OscConfig+0x470>)
 800213c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800213e:	4a5e      	ldr	r2, [pc, #376]	; (80022b8 <HAL_RCC_OscConfig+0x470>)
 8002140:	f043 0304 	orr.w	r3, r3, #4
 8002144:	6713      	str	r3, [r2, #112]	; 0x70
 8002146:	4b5c      	ldr	r3, [pc, #368]	; (80022b8 <HAL_RCC_OscConfig+0x470>)
 8002148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800214a:	4a5b      	ldr	r2, [pc, #364]	; (80022b8 <HAL_RCC_OscConfig+0x470>)
 800214c:	f043 0301 	orr.w	r3, r3, #1
 8002150:	6713      	str	r3, [r2, #112]	; 0x70
 8002152:	e00b      	b.n	800216c <HAL_RCC_OscConfig+0x324>
 8002154:	4b58      	ldr	r3, [pc, #352]	; (80022b8 <HAL_RCC_OscConfig+0x470>)
 8002156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002158:	4a57      	ldr	r2, [pc, #348]	; (80022b8 <HAL_RCC_OscConfig+0x470>)
 800215a:	f023 0301 	bic.w	r3, r3, #1
 800215e:	6713      	str	r3, [r2, #112]	; 0x70
 8002160:	4b55      	ldr	r3, [pc, #340]	; (80022b8 <HAL_RCC_OscConfig+0x470>)
 8002162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002164:	4a54      	ldr	r2, [pc, #336]	; (80022b8 <HAL_RCC_OscConfig+0x470>)
 8002166:	f023 0304 	bic.w	r3, r3, #4
 800216a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d015      	beq.n	80021a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002174:	f7ff f800 	bl	8001178 <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800217a:	e00a      	b.n	8002192 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800217c:	f7fe fffc 	bl	8001178 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	f241 3288 	movw	r2, #5000	; 0x1388
 800218a:	4293      	cmp	r3, r2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e0cb      	b.n	800232a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002192:	4b49      	ldr	r3, [pc, #292]	; (80022b8 <HAL_RCC_OscConfig+0x470>)
 8002194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d0ee      	beq.n	800217c <HAL_RCC_OscConfig+0x334>
 800219e:	e014      	b.n	80021ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a0:	f7fe ffea 	bl	8001178 <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021a6:	e00a      	b.n	80021be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021a8:	f7fe ffe6 	bl	8001178 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e0b5      	b.n	800232a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021be:	4b3e      	ldr	r3, [pc, #248]	; (80022b8 <HAL_RCC_OscConfig+0x470>)
 80021c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1ee      	bne.n	80021a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021ca:	7dfb      	ldrb	r3, [r7, #23]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d105      	bne.n	80021dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021d0:	4b39      	ldr	r3, [pc, #228]	; (80022b8 <HAL_RCC_OscConfig+0x470>)
 80021d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d4:	4a38      	ldr	r2, [pc, #224]	; (80022b8 <HAL_RCC_OscConfig+0x470>)
 80021d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f000 80a1 	beq.w	8002328 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021e6:	4b34      	ldr	r3, [pc, #208]	; (80022b8 <HAL_RCC_OscConfig+0x470>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 030c 	and.w	r3, r3, #12
 80021ee:	2b08      	cmp	r3, #8
 80021f0:	d05c      	beq.n	80022ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d141      	bne.n	800227e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021fa:	4b31      	ldr	r3, [pc, #196]	; (80022c0 <HAL_RCC_OscConfig+0x478>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002200:	f7fe ffba 	bl	8001178 <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002208:	f7fe ffb6 	bl	8001178 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e087      	b.n	800232a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800221a:	4b27      	ldr	r3, [pc, #156]	; (80022b8 <HAL_RCC_OscConfig+0x470>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1f0      	bne.n	8002208 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	69da      	ldr	r2, [r3, #28]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a1b      	ldr	r3, [r3, #32]
 800222e:	431a      	orrs	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002234:	019b      	lsls	r3, r3, #6
 8002236:	431a      	orrs	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223c:	085b      	lsrs	r3, r3, #1
 800223e:	3b01      	subs	r3, #1
 8002240:	041b      	lsls	r3, r3, #16
 8002242:	431a      	orrs	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002248:	061b      	lsls	r3, r3, #24
 800224a:	491b      	ldr	r1, [pc, #108]	; (80022b8 <HAL_RCC_OscConfig+0x470>)
 800224c:	4313      	orrs	r3, r2
 800224e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002250:	4b1b      	ldr	r3, [pc, #108]	; (80022c0 <HAL_RCC_OscConfig+0x478>)
 8002252:	2201      	movs	r2, #1
 8002254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002256:	f7fe ff8f 	bl	8001178 <HAL_GetTick>
 800225a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800225c:	e008      	b.n	8002270 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800225e:	f7fe ff8b 	bl	8001178 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e05c      	b.n	800232a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002270:	4b11      	ldr	r3, [pc, #68]	; (80022b8 <HAL_RCC_OscConfig+0x470>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d0f0      	beq.n	800225e <HAL_RCC_OscConfig+0x416>
 800227c:	e054      	b.n	8002328 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800227e:	4b10      	ldr	r3, [pc, #64]	; (80022c0 <HAL_RCC_OscConfig+0x478>)
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002284:	f7fe ff78 	bl	8001178 <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800228c:	f7fe ff74 	bl	8001178 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e045      	b.n	800232a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800229e:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <HAL_RCC_OscConfig+0x470>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1f0      	bne.n	800228c <HAL_RCC_OscConfig+0x444>
 80022aa:	e03d      	b.n	8002328 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d107      	bne.n	80022c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e038      	b.n	800232a <HAL_RCC_OscConfig+0x4e2>
 80022b8:	40023800 	.word	0x40023800
 80022bc:	40007000 	.word	0x40007000
 80022c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022c4:	4b1b      	ldr	r3, [pc, #108]	; (8002334 <HAL_RCC_OscConfig+0x4ec>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d028      	beq.n	8002324 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022dc:	429a      	cmp	r2, r3
 80022de:	d121      	bne.n	8002324 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d11a      	bne.n	8002324 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022f4:	4013      	ands	r3, r2
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d111      	bne.n	8002324 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800230a:	085b      	lsrs	r3, r3, #1
 800230c:	3b01      	subs	r3, #1
 800230e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002310:	429a      	cmp	r2, r3
 8002312:	d107      	bne.n	8002324 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002320:	429a      	cmp	r2, r3
 8002322:	d001      	beq.n	8002328 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e000      	b.n	800232a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3718      	adds	r7, #24
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40023800 	.word	0x40023800

08002338 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d101      	bne.n	800234c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e0cc      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800234c:	4b68      	ldr	r3, [pc, #416]	; (80024f0 <HAL_RCC_ClockConfig+0x1b8>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0307 	and.w	r3, r3, #7
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	429a      	cmp	r2, r3
 8002358:	d90c      	bls.n	8002374 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235a:	4b65      	ldr	r3, [pc, #404]	; (80024f0 <HAL_RCC_ClockConfig+0x1b8>)
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	b2d2      	uxtb	r2, r2
 8002360:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002362:	4b63      	ldr	r3, [pc, #396]	; (80024f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	429a      	cmp	r2, r3
 800236e:	d001      	beq.n	8002374 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e0b8      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d020      	beq.n	80023c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0304 	and.w	r3, r3, #4
 8002388:	2b00      	cmp	r3, #0
 800238a:	d005      	beq.n	8002398 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800238c:	4b59      	ldr	r3, [pc, #356]	; (80024f4 <HAL_RCC_ClockConfig+0x1bc>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	4a58      	ldr	r2, [pc, #352]	; (80024f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002392:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002396:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0308 	and.w	r3, r3, #8
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d005      	beq.n	80023b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023a4:	4b53      	ldr	r3, [pc, #332]	; (80024f4 <HAL_RCC_ClockConfig+0x1bc>)
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	4a52      	ldr	r2, [pc, #328]	; (80024f4 <HAL_RCC_ClockConfig+0x1bc>)
 80023aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023b0:	4b50      	ldr	r3, [pc, #320]	; (80024f4 <HAL_RCC_ClockConfig+0x1bc>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	494d      	ldr	r1, [pc, #308]	; (80024f4 <HAL_RCC_ClockConfig+0x1bc>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d044      	beq.n	8002458 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d107      	bne.n	80023e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023d6:	4b47      	ldr	r3, [pc, #284]	; (80024f4 <HAL_RCC_ClockConfig+0x1bc>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d119      	bne.n	8002416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e07f      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d003      	beq.n	80023f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023f2:	2b03      	cmp	r3, #3
 80023f4:	d107      	bne.n	8002406 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023f6:	4b3f      	ldr	r3, [pc, #252]	; (80024f4 <HAL_RCC_ClockConfig+0x1bc>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d109      	bne.n	8002416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e06f      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002406:	4b3b      	ldr	r3, [pc, #236]	; (80024f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e067      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002416:	4b37      	ldr	r3, [pc, #220]	; (80024f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f023 0203 	bic.w	r2, r3, #3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	4934      	ldr	r1, [pc, #208]	; (80024f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002424:	4313      	orrs	r3, r2
 8002426:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002428:	f7fe fea6 	bl	8001178 <HAL_GetTick>
 800242c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800242e:	e00a      	b.n	8002446 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002430:	f7fe fea2 	bl	8001178 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	f241 3288 	movw	r2, #5000	; 0x1388
 800243e:	4293      	cmp	r3, r2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e04f      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002446:	4b2b      	ldr	r3, [pc, #172]	; (80024f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 020c 	and.w	r2, r3, #12
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	429a      	cmp	r2, r3
 8002456:	d1eb      	bne.n	8002430 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002458:	4b25      	ldr	r3, [pc, #148]	; (80024f0 <HAL_RCC_ClockConfig+0x1b8>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0307 	and.w	r3, r3, #7
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	429a      	cmp	r2, r3
 8002464:	d20c      	bcs.n	8002480 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002466:	4b22      	ldr	r3, [pc, #136]	; (80024f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	b2d2      	uxtb	r2, r2
 800246c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800246e:	4b20      	ldr	r3, [pc, #128]	; (80024f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	429a      	cmp	r2, r3
 800247a:	d001      	beq.n	8002480 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e032      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0304 	and.w	r3, r3, #4
 8002488:	2b00      	cmp	r3, #0
 800248a:	d008      	beq.n	800249e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800248c:	4b19      	ldr	r3, [pc, #100]	; (80024f4 <HAL_RCC_ClockConfig+0x1bc>)
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	4916      	ldr	r1, [pc, #88]	; (80024f4 <HAL_RCC_ClockConfig+0x1bc>)
 800249a:	4313      	orrs	r3, r2
 800249c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0308 	and.w	r3, r3, #8
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d009      	beq.n	80024be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024aa:	4b12      	ldr	r3, [pc, #72]	; (80024f4 <HAL_RCC_ClockConfig+0x1bc>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	490e      	ldr	r1, [pc, #56]	; (80024f4 <HAL_RCC_ClockConfig+0x1bc>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024be:	f000 f821 	bl	8002504 <HAL_RCC_GetSysClockFreq>
 80024c2:	4602      	mov	r2, r0
 80024c4:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <HAL_RCC_ClockConfig+0x1bc>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	091b      	lsrs	r3, r3, #4
 80024ca:	f003 030f 	and.w	r3, r3, #15
 80024ce:	490a      	ldr	r1, [pc, #40]	; (80024f8 <HAL_RCC_ClockConfig+0x1c0>)
 80024d0:	5ccb      	ldrb	r3, [r1, r3]
 80024d2:	fa22 f303 	lsr.w	r3, r2, r3
 80024d6:	4a09      	ldr	r2, [pc, #36]	; (80024fc <HAL_RCC_ClockConfig+0x1c4>)
 80024d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024da:	4b09      	ldr	r3, [pc, #36]	; (8002500 <HAL_RCC_ClockConfig+0x1c8>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f7fe fe06 	bl	80010f0 <HAL_InitTick>

  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40023c00 	.word	0x40023c00
 80024f4:	40023800 	.word	0x40023800
 80024f8:	08005f54 	.word	0x08005f54
 80024fc:	20000018 	.word	0x20000018
 8002500:	2000001c 	.word	0x2000001c

08002504 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002504:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002508:	b094      	sub	sp, #80	; 0x50
 800250a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800250c:	2300      	movs	r3, #0
 800250e:	647b      	str	r3, [r7, #68]	; 0x44
 8002510:	2300      	movs	r3, #0
 8002512:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002514:	2300      	movs	r3, #0
 8002516:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002518:	2300      	movs	r3, #0
 800251a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800251c:	4b79      	ldr	r3, [pc, #484]	; (8002704 <HAL_RCC_GetSysClockFreq+0x200>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f003 030c 	and.w	r3, r3, #12
 8002524:	2b08      	cmp	r3, #8
 8002526:	d00d      	beq.n	8002544 <HAL_RCC_GetSysClockFreq+0x40>
 8002528:	2b08      	cmp	r3, #8
 800252a:	f200 80e1 	bhi.w	80026f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800252e:	2b00      	cmp	r3, #0
 8002530:	d002      	beq.n	8002538 <HAL_RCC_GetSysClockFreq+0x34>
 8002532:	2b04      	cmp	r3, #4
 8002534:	d003      	beq.n	800253e <HAL_RCC_GetSysClockFreq+0x3a>
 8002536:	e0db      	b.n	80026f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002538:	4b73      	ldr	r3, [pc, #460]	; (8002708 <HAL_RCC_GetSysClockFreq+0x204>)
 800253a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800253c:	e0db      	b.n	80026f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800253e:	4b73      	ldr	r3, [pc, #460]	; (800270c <HAL_RCC_GetSysClockFreq+0x208>)
 8002540:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002542:	e0d8      	b.n	80026f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002544:	4b6f      	ldr	r3, [pc, #444]	; (8002704 <HAL_RCC_GetSysClockFreq+0x200>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800254c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800254e:	4b6d      	ldr	r3, [pc, #436]	; (8002704 <HAL_RCC_GetSysClockFreq+0x200>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d063      	beq.n	8002622 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800255a:	4b6a      	ldr	r3, [pc, #424]	; (8002704 <HAL_RCC_GetSysClockFreq+0x200>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	099b      	lsrs	r3, r3, #6
 8002560:	2200      	movs	r2, #0
 8002562:	63bb      	str	r3, [r7, #56]	; 0x38
 8002564:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800256c:	633b      	str	r3, [r7, #48]	; 0x30
 800256e:	2300      	movs	r3, #0
 8002570:	637b      	str	r3, [r7, #52]	; 0x34
 8002572:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002576:	4622      	mov	r2, r4
 8002578:	462b      	mov	r3, r5
 800257a:	f04f 0000 	mov.w	r0, #0
 800257e:	f04f 0100 	mov.w	r1, #0
 8002582:	0159      	lsls	r1, r3, #5
 8002584:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002588:	0150      	lsls	r0, r2, #5
 800258a:	4602      	mov	r2, r0
 800258c:	460b      	mov	r3, r1
 800258e:	4621      	mov	r1, r4
 8002590:	1a51      	subs	r1, r2, r1
 8002592:	6139      	str	r1, [r7, #16]
 8002594:	4629      	mov	r1, r5
 8002596:	eb63 0301 	sbc.w	r3, r3, r1
 800259a:	617b      	str	r3, [r7, #20]
 800259c:	f04f 0200 	mov.w	r2, #0
 80025a0:	f04f 0300 	mov.w	r3, #0
 80025a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025a8:	4659      	mov	r1, fp
 80025aa:	018b      	lsls	r3, r1, #6
 80025ac:	4651      	mov	r1, sl
 80025ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025b2:	4651      	mov	r1, sl
 80025b4:	018a      	lsls	r2, r1, #6
 80025b6:	4651      	mov	r1, sl
 80025b8:	ebb2 0801 	subs.w	r8, r2, r1
 80025bc:	4659      	mov	r1, fp
 80025be:	eb63 0901 	sbc.w	r9, r3, r1
 80025c2:	f04f 0200 	mov.w	r2, #0
 80025c6:	f04f 0300 	mov.w	r3, #0
 80025ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025d6:	4690      	mov	r8, r2
 80025d8:	4699      	mov	r9, r3
 80025da:	4623      	mov	r3, r4
 80025dc:	eb18 0303 	adds.w	r3, r8, r3
 80025e0:	60bb      	str	r3, [r7, #8]
 80025e2:	462b      	mov	r3, r5
 80025e4:	eb49 0303 	adc.w	r3, r9, r3
 80025e8:	60fb      	str	r3, [r7, #12]
 80025ea:	f04f 0200 	mov.w	r2, #0
 80025ee:	f04f 0300 	mov.w	r3, #0
 80025f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80025f6:	4629      	mov	r1, r5
 80025f8:	024b      	lsls	r3, r1, #9
 80025fa:	4621      	mov	r1, r4
 80025fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002600:	4621      	mov	r1, r4
 8002602:	024a      	lsls	r2, r1, #9
 8002604:	4610      	mov	r0, r2
 8002606:	4619      	mov	r1, r3
 8002608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800260a:	2200      	movs	r2, #0
 800260c:	62bb      	str	r3, [r7, #40]	; 0x28
 800260e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002610:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002614:	f7fd fe34 	bl	8000280 <__aeabi_uldivmod>
 8002618:	4602      	mov	r2, r0
 800261a:	460b      	mov	r3, r1
 800261c:	4613      	mov	r3, r2
 800261e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002620:	e058      	b.n	80026d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002622:	4b38      	ldr	r3, [pc, #224]	; (8002704 <HAL_RCC_GetSysClockFreq+0x200>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	099b      	lsrs	r3, r3, #6
 8002628:	2200      	movs	r2, #0
 800262a:	4618      	mov	r0, r3
 800262c:	4611      	mov	r1, r2
 800262e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002632:	623b      	str	r3, [r7, #32]
 8002634:	2300      	movs	r3, #0
 8002636:	627b      	str	r3, [r7, #36]	; 0x24
 8002638:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800263c:	4642      	mov	r2, r8
 800263e:	464b      	mov	r3, r9
 8002640:	f04f 0000 	mov.w	r0, #0
 8002644:	f04f 0100 	mov.w	r1, #0
 8002648:	0159      	lsls	r1, r3, #5
 800264a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800264e:	0150      	lsls	r0, r2, #5
 8002650:	4602      	mov	r2, r0
 8002652:	460b      	mov	r3, r1
 8002654:	4641      	mov	r1, r8
 8002656:	ebb2 0a01 	subs.w	sl, r2, r1
 800265a:	4649      	mov	r1, r9
 800265c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002660:	f04f 0200 	mov.w	r2, #0
 8002664:	f04f 0300 	mov.w	r3, #0
 8002668:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800266c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002670:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002674:	ebb2 040a 	subs.w	r4, r2, sl
 8002678:	eb63 050b 	sbc.w	r5, r3, fp
 800267c:	f04f 0200 	mov.w	r2, #0
 8002680:	f04f 0300 	mov.w	r3, #0
 8002684:	00eb      	lsls	r3, r5, #3
 8002686:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800268a:	00e2      	lsls	r2, r4, #3
 800268c:	4614      	mov	r4, r2
 800268e:	461d      	mov	r5, r3
 8002690:	4643      	mov	r3, r8
 8002692:	18e3      	adds	r3, r4, r3
 8002694:	603b      	str	r3, [r7, #0]
 8002696:	464b      	mov	r3, r9
 8002698:	eb45 0303 	adc.w	r3, r5, r3
 800269c:	607b      	str	r3, [r7, #4]
 800269e:	f04f 0200 	mov.w	r2, #0
 80026a2:	f04f 0300 	mov.w	r3, #0
 80026a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026aa:	4629      	mov	r1, r5
 80026ac:	028b      	lsls	r3, r1, #10
 80026ae:	4621      	mov	r1, r4
 80026b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026b4:	4621      	mov	r1, r4
 80026b6:	028a      	lsls	r2, r1, #10
 80026b8:	4610      	mov	r0, r2
 80026ba:	4619      	mov	r1, r3
 80026bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026be:	2200      	movs	r2, #0
 80026c0:	61bb      	str	r3, [r7, #24]
 80026c2:	61fa      	str	r2, [r7, #28]
 80026c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026c8:	f7fd fdda 	bl	8000280 <__aeabi_uldivmod>
 80026cc:	4602      	mov	r2, r0
 80026ce:	460b      	mov	r3, r1
 80026d0:	4613      	mov	r3, r2
 80026d2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026d4:	4b0b      	ldr	r3, [pc, #44]	; (8002704 <HAL_RCC_GetSysClockFreq+0x200>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	0c1b      	lsrs	r3, r3, #16
 80026da:	f003 0303 	and.w	r3, r3, #3
 80026de:	3301      	adds	r3, #1
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80026e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80026e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026ee:	e002      	b.n	80026f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026f0:	4b05      	ldr	r3, [pc, #20]	; (8002708 <HAL_RCC_GetSysClockFreq+0x204>)
 80026f2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3750      	adds	r7, #80	; 0x50
 80026fc:	46bd      	mov	sp, r7
 80026fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002702:	bf00      	nop
 8002704:	40023800 	.word	0x40023800
 8002708:	00f42400 	.word	0x00f42400
 800270c:	007a1200 	.word	0x007a1200

08002710 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002714:	4b03      	ldr	r3, [pc, #12]	; (8002724 <HAL_RCC_GetHCLKFreq+0x14>)
 8002716:	681b      	ldr	r3, [r3, #0]
}
 8002718:	4618      	mov	r0, r3
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	20000018 	.word	0x20000018

08002728 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800272c:	f7ff fff0 	bl	8002710 <HAL_RCC_GetHCLKFreq>
 8002730:	4602      	mov	r2, r0
 8002732:	4b05      	ldr	r3, [pc, #20]	; (8002748 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	0a9b      	lsrs	r3, r3, #10
 8002738:	f003 0307 	and.w	r3, r3, #7
 800273c:	4903      	ldr	r1, [pc, #12]	; (800274c <HAL_RCC_GetPCLK1Freq+0x24>)
 800273e:	5ccb      	ldrb	r3, [r1, r3]
 8002740:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002744:	4618      	mov	r0, r3
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40023800 	.word	0x40023800
 800274c:	08005f64 	.word	0x08005f64

08002750 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002754:	f7ff ffdc 	bl	8002710 <HAL_RCC_GetHCLKFreq>
 8002758:	4602      	mov	r2, r0
 800275a:	4b05      	ldr	r3, [pc, #20]	; (8002770 <HAL_RCC_GetPCLK2Freq+0x20>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	0b5b      	lsrs	r3, r3, #13
 8002760:	f003 0307 	and.w	r3, r3, #7
 8002764:	4903      	ldr	r1, [pc, #12]	; (8002774 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002766:	5ccb      	ldrb	r3, [r1, r3]
 8002768:	fa22 f303 	lsr.w	r3, r2, r3
}
 800276c:	4618      	mov	r0, r3
 800276e:	bd80      	pop	{r7, pc}
 8002770:	40023800 	.word	0x40023800
 8002774:	08005f64 	.word	0x08005f64

08002778 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e07b      	b.n	8002882 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278e:	2b00      	cmp	r3, #0
 8002790:	d108      	bne.n	80027a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800279a:	d009      	beq.n	80027b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	61da      	str	r2, [r3, #28]
 80027a2:	e005      	b.n	80027b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d106      	bne.n	80027d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f7fe fa06 	bl	8000bdc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2202      	movs	r2, #2
 80027d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80027f8:	431a      	orrs	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002802:	431a      	orrs	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	431a      	orrs	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	431a      	orrs	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002820:	431a      	orrs	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800282a:	431a      	orrs	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002834:	ea42 0103 	orr.w	r1, r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	430a      	orrs	r2, r1
 8002846:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	0c1b      	lsrs	r3, r3, #16
 800284e:	f003 0104 	and.w	r1, r3, #4
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002856:	f003 0210 	and.w	r2, r3, #16
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	430a      	orrs	r2, r1
 8002860:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	69da      	ldr	r2, [r3, #28]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002870:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b088      	sub	sp, #32
 800288e:	af00      	add	r7, sp, #0
 8002890:	60f8      	str	r0, [r7, #12]
 8002892:	60b9      	str	r1, [r7, #8]
 8002894:	603b      	str	r3, [r7, #0]
 8002896:	4613      	mov	r3, r2
 8002898:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800289a:	2300      	movs	r3, #0
 800289c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d101      	bne.n	80028ac <HAL_SPI_Transmit+0x22>
 80028a8:	2302      	movs	r3, #2
 80028aa:	e126      	b.n	8002afa <HAL_SPI_Transmit+0x270>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028b4:	f7fe fc60 	bl	8001178 <HAL_GetTick>
 80028b8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80028ba:	88fb      	ldrh	r3, [r7, #6]
 80028bc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d002      	beq.n	80028d0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80028ca:	2302      	movs	r3, #2
 80028cc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80028ce:	e10b      	b.n	8002ae8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d002      	beq.n	80028dc <HAL_SPI_Transmit+0x52>
 80028d6:	88fb      	ldrh	r3, [r7, #6]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d102      	bne.n	80028e2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	77fb      	strb	r3, [r7, #31]
    goto error;
 80028e0:	e102      	b.n	8002ae8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2203      	movs	r2, #3
 80028e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	68ba      	ldr	r2, [r7, #8]
 80028f4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	88fa      	ldrh	r2, [r7, #6]
 80028fa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	88fa      	ldrh	r2, [r7, #6]
 8002900:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2200      	movs	r2, #0
 8002912:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2200      	movs	r2, #0
 8002918:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002928:	d10f      	bne.n	800294a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002938:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002948:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002954:	2b40      	cmp	r3, #64	; 0x40
 8002956:	d007      	beq.n	8002968 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002966:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002970:	d14b      	bne.n	8002a0a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d002      	beq.n	8002980 <HAL_SPI_Transmit+0xf6>
 800297a:	8afb      	ldrh	r3, [r7, #22]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d13e      	bne.n	80029fe <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002984:	881a      	ldrh	r2, [r3, #0]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002990:	1c9a      	adds	r2, r3, #2
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800299a:	b29b      	uxth	r3, r3
 800299c:	3b01      	subs	r3, #1
 800299e:	b29a      	uxth	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80029a4:	e02b      	b.n	80029fe <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d112      	bne.n	80029da <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b8:	881a      	ldrh	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c4:	1c9a      	adds	r2, r3, #2
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	3b01      	subs	r3, #1
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	86da      	strh	r2, [r3, #54]	; 0x36
 80029d8:	e011      	b.n	80029fe <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029da:	f7fe fbcd 	bl	8001178 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d803      	bhi.n	80029f2 <HAL_SPI_Transmit+0x168>
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f0:	d102      	bne.n	80029f8 <HAL_SPI_Transmit+0x16e>
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d102      	bne.n	80029fe <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80029fc:	e074      	b.n	8002ae8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1ce      	bne.n	80029a6 <HAL_SPI_Transmit+0x11c>
 8002a08:	e04c      	b.n	8002aa4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d002      	beq.n	8002a18 <HAL_SPI_Transmit+0x18e>
 8002a12:	8afb      	ldrh	r3, [r7, #22]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d140      	bne.n	8002a9a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	330c      	adds	r3, #12
 8002a22:	7812      	ldrb	r2, [r2, #0]
 8002a24:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2a:	1c5a      	adds	r2, r3, #1
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	3b01      	subs	r3, #1
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002a3e:	e02c      	b.n	8002a9a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d113      	bne.n	8002a76 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	330c      	adds	r3, #12
 8002a58:	7812      	ldrb	r2, [r2, #0]
 8002a5a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a60:	1c5a      	adds	r2, r3, #1
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	86da      	strh	r2, [r3, #54]	; 0x36
 8002a74:	e011      	b.n	8002a9a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a76:	f7fe fb7f 	bl	8001178 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	683a      	ldr	r2, [r7, #0]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d803      	bhi.n	8002a8e <HAL_SPI_Transmit+0x204>
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a8c:	d102      	bne.n	8002a94 <HAL_SPI_Transmit+0x20a>
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d102      	bne.n	8002a9a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002a98:	e026      	b.n	8002ae8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1cd      	bne.n	8002a40 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	6839      	ldr	r1, [r7, #0]
 8002aa8:	68f8      	ldr	r0, [r7, #12]
 8002aaa:	f000 fbcb 	bl	8003244 <SPI_EndRxTxTransaction>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d002      	beq.n	8002aba <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2220      	movs	r2, #32
 8002ab8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d10a      	bne.n	8002ad8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	613b      	str	r3, [r7, #16]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	613b      	str	r3, [r7, #16]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	613b      	str	r3, [r7, #16]
 8002ad6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d002      	beq.n	8002ae6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	77fb      	strb	r3, [r7, #31]
 8002ae4:	e000      	b.n	8002ae8 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002ae6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002af8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3720      	adds	r7, #32
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b088      	sub	sp, #32
 8002b06:	af02      	add	r7, sp, #8
 8002b08:	60f8      	str	r0, [r7, #12]
 8002b0a:	60b9      	str	r1, [r7, #8]
 8002b0c:	603b      	str	r3, [r7, #0]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b12:	2300      	movs	r3, #0
 8002b14:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b1e:	d112      	bne.n	8002b46 <HAL_SPI_Receive+0x44>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d10e      	bne.n	8002b46 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2204      	movs	r2, #4
 8002b2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002b30:	88fa      	ldrh	r2, [r7, #6]
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	9300      	str	r3, [sp, #0]
 8002b36:	4613      	mov	r3, r2
 8002b38:	68ba      	ldr	r2, [r7, #8]
 8002b3a:	68b9      	ldr	r1, [r7, #8]
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f000 f8f1 	bl	8002d24 <HAL_SPI_TransmitReceive>
 8002b42:	4603      	mov	r3, r0
 8002b44:	e0ea      	b.n	8002d1c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d101      	bne.n	8002b54 <HAL_SPI_Receive+0x52>
 8002b50:	2302      	movs	r3, #2
 8002b52:	e0e3      	b.n	8002d1c <HAL_SPI_Receive+0x21a>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b5c:	f7fe fb0c 	bl	8001178 <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d002      	beq.n	8002b74 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002b6e:	2302      	movs	r3, #2
 8002b70:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b72:	e0ca      	b.n	8002d0a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d002      	beq.n	8002b80 <HAL_SPI_Receive+0x7e>
 8002b7a:	88fb      	ldrh	r3, [r7, #6]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d102      	bne.n	8002b86 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b84:	e0c1      	b.n	8002d0a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2204      	movs	r2, #4
 8002b8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	68ba      	ldr	r2, [r7, #8]
 8002b98:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	88fa      	ldrh	r2, [r7, #6]
 8002b9e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	88fa      	ldrh	r2, [r7, #6]
 8002ba4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bcc:	d10f      	bne.n	8002bee <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bdc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002bec:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf8:	2b40      	cmp	r3, #64	; 0x40
 8002bfa:	d007      	beq.n	8002c0c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c0a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d162      	bne.n	8002cda <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002c14:	e02e      	b.n	8002c74 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d115      	bne.n	8002c50 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f103 020c 	add.w	r2, r3, #12
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c30:	7812      	ldrb	r2, [r2, #0]
 8002c32:	b2d2      	uxtb	r2, r2
 8002c34:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3a:	1c5a      	adds	r2, r3, #1
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	3b01      	subs	r3, #1
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c4e:	e011      	b.n	8002c74 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c50:	f7fe fa92 	bl	8001178 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d803      	bhi.n	8002c68 <HAL_SPI_Receive+0x166>
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c66:	d102      	bne.n	8002c6e <HAL_SPI_Receive+0x16c>
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d102      	bne.n	8002c74 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002c72:	e04a      	b.n	8002d0a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1cb      	bne.n	8002c16 <HAL_SPI_Receive+0x114>
 8002c7e:	e031      	b.n	8002ce4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d113      	bne.n	8002cb6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68da      	ldr	r2, [r3, #12]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c98:	b292      	uxth	r2, r2
 8002c9a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca0:	1c9a      	adds	r2, r3, #2
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	3b01      	subs	r3, #1
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002cb4:	e011      	b.n	8002cda <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cb6:	f7fe fa5f 	bl	8001178 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d803      	bhi.n	8002cce <HAL_SPI_Receive+0x1cc>
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ccc:	d102      	bne.n	8002cd4 <HAL_SPI_Receive+0x1d2>
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d102      	bne.n	8002cda <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002cd8:	e017      	b.n	8002d0a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1cd      	bne.n	8002c80 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ce4:	693a      	ldr	r2, [r7, #16]
 8002ce6:	6839      	ldr	r1, [r7, #0]
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f000 fa45 	bl	8003178 <SPI_EndRxTransaction>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d002      	beq.n	8002cfa <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d002      	beq.n	8002d08 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	75fb      	strb	r3, [r7, #23]
 8002d06:	e000      	b.n	8002d0a <HAL_SPI_Receive+0x208>
  }

error :
 8002d08:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002d1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3718      	adds	r7, #24
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b08c      	sub	sp, #48	; 0x30
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
 8002d30:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002d32:	2301      	movs	r3, #1
 8002d34:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002d36:	2300      	movs	r3, #0
 8002d38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d101      	bne.n	8002d4a <HAL_SPI_TransmitReceive+0x26>
 8002d46:	2302      	movs	r3, #2
 8002d48:	e18a      	b.n	8003060 <HAL_SPI_TransmitReceive+0x33c>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d52:	f7fe fa11 	bl	8001178 <HAL_GetTick>
 8002d56:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002d68:	887b      	ldrh	r3, [r7, #2]
 8002d6a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002d6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d00f      	beq.n	8002d94 <HAL_SPI_TransmitReceive+0x70>
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d7a:	d107      	bne.n	8002d8c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d103      	bne.n	8002d8c <HAL_SPI_TransmitReceive+0x68>
 8002d84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d88:	2b04      	cmp	r3, #4
 8002d8a:	d003      	beq.n	8002d94 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002d92:	e15b      	b.n	800304c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d005      	beq.n	8002da6 <HAL_SPI_TransmitReceive+0x82>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d002      	beq.n	8002da6 <HAL_SPI_TransmitReceive+0x82>
 8002da0:	887b      	ldrh	r3, [r7, #2]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d103      	bne.n	8002dae <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002dac:	e14e      	b.n	800304c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	d003      	beq.n	8002dc2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2205      	movs	r2, #5
 8002dbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	887a      	ldrh	r2, [r7, #2]
 8002dd2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	887a      	ldrh	r2, [r7, #2]
 8002dd8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	68ba      	ldr	r2, [r7, #8]
 8002dde:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	887a      	ldrh	r2, [r7, #2]
 8002de4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	887a      	ldrh	r2, [r7, #2]
 8002dea:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e02:	2b40      	cmp	r3, #64	; 0x40
 8002e04:	d007      	beq.n	8002e16 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e14:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e1e:	d178      	bne.n	8002f12 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d002      	beq.n	8002e2e <HAL_SPI_TransmitReceive+0x10a>
 8002e28:	8b7b      	ldrh	r3, [r7, #26]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d166      	bne.n	8002efc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e32:	881a      	ldrh	r2, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3e:	1c9a      	adds	r2, r3, #2
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	b29a      	uxth	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e52:	e053      	b.n	8002efc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d11b      	bne.n	8002e9a <HAL_SPI_TransmitReceive+0x176>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d016      	beq.n	8002e9a <HAL_SPI_TransmitReceive+0x176>
 8002e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d113      	bne.n	8002e9a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	881a      	ldrh	r2, [r3, #0]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e82:	1c9a      	adds	r2, r3, #2
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e96:	2300      	movs	r3, #0
 8002e98:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d119      	bne.n	8002edc <HAL_SPI_TransmitReceive+0x1b8>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d014      	beq.n	8002edc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68da      	ldr	r2, [r3, #12]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ebc:	b292      	uxth	r2, r2
 8002ebe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec4:	1c9a      	adds	r2, r3, #2
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002edc:	f7fe f94c 	bl	8001178 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d807      	bhi.n	8002efc <HAL_SPI_TransmitReceive+0x1d8>
 8002eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef2:	d003      	beq.n	8002efc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002efa:	e0a7      	b.n	800304c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1a6      	bne.n	8002e54 <HAL_SPI_TransmitReceive+0x130>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1a1      	bne.n	8002e54 <HAL_SPI_TransmitReceive+0x130>
 8002f10:	e07c      	b.n	800300c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d002      	beq.n	8002f20 <HAL_SPI_TransmitReceive+0x1fc>
 8002f1a:	8b7b      	ldrh	r3, [r7, #26]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d16b      	bne.n	8002ff8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	330c      	adds	r3, #12
 8002f2a:	7812      	ldrb	r2, [r2, #0]
 8002f2c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f32:	1c5a      	adds	r2, r3, #1
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f46:	e057      	b.n	8002ff8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d11c      	bne.n	8002f90 <HAL_SPI_TransmitReceive+0x26c>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d017      	beq.n	8002f90 <HAL_SPI_TransmitReceive+0x26c>
 8002f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d114      	bne.n	8002f90 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	330c      	adds	r3, #12
 8002f70:	7812      	ldrb	r2, [r2, #0]
 8002f72:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f78:	1c5a      	adds	r2, r3, #1
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	3b01      	subs	r3, #1
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d119      	bne.n	8002fd2 <HAL_SPI_TransmitReceive+0x2ae>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d014      	beq.n	8002fd2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68da      	ldr	r2, [r3, #12]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb2:	b2d2      	uxtb	r2, r2
 8002fb4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fba:	1c5a      	adds	r2, r3, #1
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002fd2:	f7fe f8d1 	bl	8001178 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d803      	bhi.n	8002fea <HAL_SPI_TransmitReceive+0x2c6>
 8002fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe8:	d102      	bne.n	8002ff0 <HAL_SPI_TransmitReceive+0x2cc>
 8002fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d103      	bne.n	8002ff8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002ff6:	e029      	b.n	800304c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1a2      	bne.n	8002f48 <HAL_SPI_TransmitReceive+0x224>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003006:	b29b      	uxth	r3, r3
 8003008:	2b00      	cmp	r3, #0
 800300a:	d19d      	bne.n	8002f48 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800300c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800300e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003010:	68f8      	ldr	r0, [r7, #12]
 8003012:	f000 f917 	bl	8003244 <SPI_EndRxTxTransaction>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d006      	beq.n	800302a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2220      	movs	r2, #32
 8003026:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003028:	e010      	b.n	800304c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10b      	bne.n	800304a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003032:	2300      	movs	r3, #0
 8003034:	617b      	str	r3, [r7, #20]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	617b      	str	r3, [r7, #20]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	617b      	str	r3, [r7, #20]
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	e000      	b.n	800304c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800304a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800305c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003060:	4618      	mov	r0, r3
 8003062:	3730      	adds	r7, #48	; 0x30
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b088      	sub	sp, #32
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	603b      	str	r3, [r7, #0]
 8003074:	4613      	mov	r3, r2
 8003076:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003078:	f7fe f87e 	bl	8001178 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003080:	1a9b      	subs	r3, r3, r2
 8003082:	683a      	ldr	r2, [r7, #0]
 8003084:	4413      	add	r3, r2
 8003086:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003088:	f7fe f876 	bl	8001178 <HAL_GetTick>
 800308c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800308e:	4b39      	ldr	r3, [pc, #228]	; (8003174 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	015b      	lsls	r3, r3, #5
 8003094:	0d1b      	lsrs	r3, r3, #20
 8003096:	69fa      	ldr	r2, [r7, #28]
 8003098:	fb02 f303 	mul.w	r3, r2, r3
 800309c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800309e:	e054      	b.n	800314a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a6:	d050      	beq.n	800314a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80030a8:	f7fe f866 	bl	8001178 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	69fa      	ldr	r2, [r7, #28]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d902      	bls.n	80030be <SPI_WaitFlagStateUntilTimeout+0x56>
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d13d      	bne.n	800313a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	685a      	ldr	r2, [r3, #4]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80030cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030d6:	d111      	bne.n	80030fc <SPI_WaitFlagStateUntilTimeout+0x94>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030e0:	d004      	beq.n	80030ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ea:	d107      	bne.n	80030fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003100:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003104:	d10f      	bne.n	8003126 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003114:	601a      	str	r2, [r3, #0]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003124:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e017      	b.n	800316a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d101      	bne.n	8003144 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003140:	2300      	movs	r3, #0
 8003142:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	3b01      	subs	r3, #1
 8003148:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	4013      	ands	r3, r2
 8003154:	68ba      	ldr	r2, [r7, #8]
 8003156:	429a      	cmp	r2, r3
 8003158:	bf0c      	ite	eq
 800315a:	2301      	moveq	r3, #1
 800315c:	2300      	movne	r3, #0
 800315e:	b2db      	uxtb	r3, r3
 8003160:	461a      	mov	r2, r3
 8003162:	79fb      	ldrb	r3, [r7, #7]
 8003164:	429a      	cmp	r2, r3
 8003166:	d19b      	bne.n	80030a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3720      	adds	r7, #32
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	20000018 	.word	0x20000018

08003178 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af02      	add	r7, sp, #8
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800318c:	d111      	bne.n	80031b2 <SPI_EndRxTransaction+0x3a>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003196:	d004      	beq.n	80031a2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031a0:	d107      	bne.n	80031b2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031b0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031ba:	d12a      	bne.n	8003212 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031c4:	d012      	beq.n	80031ec <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	9300      	str	r3, [sp, #0]
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	2200      	movs	r2, #0
 80031ce:	2180      	movs	r1, #128	; 0x80
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f7ff ff49 	bl	8003068 <SPI_WaitFlagStateUntilTimeout>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d02d      	beq.n	8003238 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e0:	f043 0220 	orr.w	r2, r3, #32
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e026      	b.n	800323a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	9300      	str	r3, [sp, #0]
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	2200      	movs	r2, #0
 80031f4:	2101      	movs	r1, #1
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f7ff ff36 	bl	8003068 <SPI_WaitFlagStateUntilTimeout>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d01a      	beq.n	8003238 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003206:	f043 0220 	orr.w	r2, r3, #32
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e013      	b.n	800323a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	9300      	str	r3, [sp, #0]
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	2200      	movs	r2, #0
 800321a:	2101      	movs	r1, #1
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	f7ff ff23 	bl	8003068 <SPI_WaitFlagStateUntilTimeout>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d007      	beq.n	8003238 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800322c:	f043 0220 	orr.w	r2, r3, #32
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e000      	b.n	800323a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
	...

08003244 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b088      	sub	sp, #32
 8003248:	af02      	add	r7, sp, #8
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003250:	4b1b      	ldr	r3, [pc, #108]	; (80032c0 <SPI_EndRxTxTransaction+0x7c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a1b      	ldr	r2, [pc, #108]	; (80032c4 <SPI_EndRxTxTransaction+0x80>)
 8003256:	fba2 2303 	umull	r2, r3, r2, r3
 800325a:	0d5b      	lsrs	r3, r3, #21
 800325c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003260:	fb02 f303 	mul.w	r3, r2, r3
 8003264:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800326e:	d112      	bne.n	8003296 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	9300      	str	r3, [sp, #0]
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	2200      	movs	r2, #0
 8003278:	2180      	movs	r1, #128	; 0x80
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f7ff fef4 	bl	8003068 <SPI_WaitFlagStateUntilTimeout>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d016      	beq.n	80032b4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800328a:	f043 0220 	orr.w	r2, r3, #32
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e00f      	b.n	80032b6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00a      	beq.n	80032b2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	3b01      	subs	r3, #1
 80032a0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ac:	2b80      	cmp	r3, #128	; 0x80
 80032ae:	d0f2      	beq.n	8003296 <SPI_EndRxTxTransaction+0x52>
 80032b0:	e000      	b.n	80032b4 <SPI_EndRxTxTransaction+0x70>
        break;
 80032b2:	bf00      	nop
  }

  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3718      	adds	r7, #24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	20000018 	.word	0x20000018
 80032c4:	165e9f81 	.word	0x165e9f81

080032c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e03f      	b.n	800335a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d106      	bne.n	80032f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f7fd fd40 	bl	8000d74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2224      	movs	r2, #36	; 0x24
 80032f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68da      	ldr	r2, [r3, #12]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800330a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 fd7b 	bl	8003e08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	691a      	ldr	r2, [r3, #16]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003320:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	695a      	ldr	r2, [r3, #20]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003330:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68da      	ldr	r2, [r3, #12]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003340:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2220      	movs	r2, #32
 800334c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2220      	movs	r2, #32
 8003354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b08a      	sub	sp, #40	; 0x28
 8003366:	af02      	add	r7, sp, #8
 8003368:	60f8      	str	r0, [r7, #12]
 800336a:	60b9      	str	r1, [r7, #8]
 800336c:	603b      	str	r3, [r7, #0]
 800336e:	4613      	mov	r3, r2
 8003370:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003372:	2300      	movs	r3, #0
 8003374:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b20      	cmp	r3, #32
 8003380:	d17c      	bne.n	800347c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d002      	beq.n	800338e <HAL_UART_Transmit+0x2c>
 8003388:	88fb      	ldrh	r3, [r7, #6]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e075      	b.n	800347e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003398:	2b01      	cmp	r3, #1
 800339a:	d101      	bne.n	80033a0 <HAL_UART_Transmit+0x3e>
 800339c:	2302      	movs	r3, #2
 800339e:	e06e      	b.n	800347e <HAL_UART_Transmit+0x11c>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2221      	movs	r2, #33	; 0x21
 80033b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033b6:	f7fd fedf 	bl	8001178 <HAL_GetTick>
 80033ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	88fa      	ldrh	r2, [r7, #6]
 80033c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	88fa      	ldrh	r2, [r7, #6]
 80033c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033d0:	d108      	bne.n	80033e4 <HAL_UART_Transmit+0x82>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d104      	bne.n	80033e4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80033da:	2300      	movs	r3, #0
 80033dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	61bb      	str	r3, [r7, #24]
 80033e2:	e003      	b.n	80033ec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033e8:	2300      	movs	r3, #0
 80033ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80033f4:	e02a      	b.n	800344c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	9300      	str	r3, [sp, #0]
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	2200      	movs	r2, #0
 80033fe:	2180      	movs	r1, #128	; 0x80
 8003400:	68f8      	ldr	r0, [r7, #12]
 8003402:	f000 faf9 	bl	80039f8 <UART_WaitOnFlagUntilTimeout>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e036      	b.n	800347e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10b      	bne.n	800342e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	881b      	ldrh	r3, [r3, #0]
 800341a:	461a      	mov	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003424:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	3302      	adds	r3, #2
 800342a:	61bb      	str	r3, [r7, #24]
 800342c:	e007      	b.n	800343e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	781a      	ldrb	r2, [r3, #0]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	3301      	adds	r3, #1
 800343c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003442:	b29b      	uxth	r3, r3
 8003444:	3b01      	subs	r3, #1
 8003446:	b29a      	uxth	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003450:	b29b      	uxth	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1cf      	bne.n	80033f6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	9300      	str	r3, [sp, #0]
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	2200      	movs	r2, #0
 800345e:	2140      	movs	r1, #64	; 0x40
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	f000 fac9 	bl	80039f8 <UART_WaitOnFlagUntilTimeout>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e006      	b.n	800347e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2220      	movs	r2, #32
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003478:	2300      	movs	r3, #0
 800347a:	e000      	b.n	800347e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800347c:	2302      	movs	r3, #2
  }
}
 800347e:	4618      	mov	r0, r3
 8003480:	3720      	adds	r7, #32
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
	...

08003488 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b0ba      	sub	sp, #232	; 0xe8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80034ae:	2300      	movs	r3, #0
 80034b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80034b4:	2300      	movs	r3, #0
 80034b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80034ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034be:	f003 030f 	and.w	r3, r3, #15
 80034c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80034c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10f      	bne.n	80034ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034d2:	f003 0320 	and.w	r3, r3, #32
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d009      	beq.n	80034ee <HAL_UART_IRQHandler+0x66>
 80034da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034de:	f003 0320 	and.w	r3, r3, #32
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 fbd3 	bl	8003c92 <UART_Receive_IT>
      return;
 80034ec:	e256      	b.n	800399c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80034ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f000 80de 	beq.w	80036b4 <HAL_UART_IRQHandler+0x22c>
 80034f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	2b00      	cmp	r3, #0
 8003502:	d106      	bne.n	8003512 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003508:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800350c:	2b00      	cmp	r3, #0
 800350e:	f000 80d1 	beq.w	80036b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00b      	beq.n	8003536 <HAL_UART_IRQHandler+0xae>
 800351e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003526:	2b00      	cmp	r3, #0
 8003528:	d005      	beq.n	8003536 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352e:	f043 0201 	orr.w	r2, r3, #1
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800353a:	f003 0304 	and.w	r3, r3, #4
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00b      	beq.n	800355a <HAL_UART_IRQHandler+0xd2>
 8003542:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	d005      	beq.n	800355a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	f043 0202 	orr.w	r2, r3, #2
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800355a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00b      	beq.n	800357e <HAL_UART_IRQHandler+0xf6>
 8003566:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b00      	cmp	r3, #0
 8003570:	d005      	beq.n	800357e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	f043 0204 	orr.w	r2, r3, #4
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800357e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003582:	f003 0308 	and.w	r3, r3, #8
 8003586:	2b00      	cmp	r3, #0
 8003588:	d011      	beq.n	80035ae <HAL_UART_IRQHandler+0x126>
 800358a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800358e:	f003 0320 	and.w	r3, r3, #32
 8003592:	2b00      	cmp	r3, #0
 8003594:	d105      	bne.n	80035a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003596:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d005      	beq.n	80035ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	f043 0208 	orr.w	r2, r3, #8
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f000 81ed 	beq.w	8003992 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035bc:	f003 0320 	and.w	r3, r3, #32
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d008      	beq.n	80035d6 <HAL_UART_IRQHandler+0x14e>
 80035c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035c8:	f003 0320 	and.w	r3, r3, #32
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d002      	beq.n	80035d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 fb5e 	bl	8003c92 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e0:	2b40      	cmp	r3, #64	; 0x40
 80035e2:	bf0c      	ite	eq
 80035e4:	2301      	moveq	r3, #1
 80035e6:	2300      	movne	r3, #0
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f2:	f003 0308 	and.w	r3, r3, #8
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d103      	bne.n	8003602 <HAL_UART_IRQHandler+0x17a>
 80035fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d04f      	beq.n	80036a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 fa66 	bl	8003ad4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003612:	2b40      	cmp	r3, #64	; 0x40
 8003614:	d141      	bne.n	800369a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	3314      	adds	r3, #20
 800361c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003620:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003624:	e853 3f00 	ldrex	r3, [r3]
 8003628:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800362c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003630:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003634:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	3314      	adds	r3, #20
 800363e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003642:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003646:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800364a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800364e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003652:	e841 2300 	strex	r3, r2, [r1]
 8003656:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800365a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1d9      	bne.n	8003616 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003666:	2b00      	cmp	r3, #0
 8003668:	d013      	beq.n	8003692 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366e:	4a7d      	ldr	r2, [pc, #500]	; (8003864 <HAL_UART_IRQHandler+0x3dc>)
 8003670:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003676:	4618      	mov	r0, r3
 8003678:	f7fd ffea 	bl	8001650 <HAL_DMA_Abort_IT>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d016      	beq.n	80036b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800368c:	4610      	mov	r0, r2
 800368e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003690:	e00e      	b.n	80036b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f99a 	bl	80039cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003698:	e00a      	b.n	80036b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f996 	bl	80039cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036a0:	e006      	b.n	80036b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 f992 	bl	80039cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80036ae:	e170      	b.n	8003992 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036b0:	bf00      	nop
    return;
 80036b2:	e16e      	b.n	8003992 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	f040 814a 	bne.w	8003952 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80036be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036c2:	f003 0310 	and.w	r3, r3, #16
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f000 8143 	beq.w	8003952 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80036cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036d0:	f003 0310 	and.w	r3, r3, #16
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f000 813c 	beq.w	8003952 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80036da:	2300      	movs	r3, #0
 80036dc:	60bb      	str	r3, [r7, #8]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	60bb      	str	r3, [r7, #8]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	60bb      	str	r3, [r7, #8]
 80036ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036fa:	2b40      	cmp	r3, #64	; 0x40
 80036fc:	f040 80b4 	bne.w	8003868 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800370c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003710:	2b00      	cmp	r3, #0
 8003712:	f000 8140 	beq.w	8003996 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800371a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800371e:	429a      	cmp	r2, r3
 8003720:	f080 8139 	bcs.w	8003996 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800372a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003730:	69db      	ldr	r3, [r3, #28]
 8003732:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003736:	f000 8088 	beq.w	800384a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	330c      	adds	r3, #12
 8003740:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003744:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003748:	e853 3f00 	ldrex	r3, [r3]
 800374c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003750:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003754:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003758:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	330c      	adds	r3, #12
 8003762:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003766:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800376a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800376e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003772:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003776:	e841 2300 	strex	r3, r2, [r1]
 800377a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800377e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1d9      	bne.n	800373a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	3314      	adds	r3, #20
 800378c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003790:	e853 3f00 	ldrex	r3, [r3]
 8003794:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003796:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003798:	f023 0301 	bic.w	r3, r3, #1
 800379c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	3314      	adds	r3, #20
 80037a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80037aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80037ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80037b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80037b6:	e841 2300 	strex	r3, r2, [r1]
 80037ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80037bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1e1      	bne.n	8003786 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	3314      	adds	r3, #20
 80037c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037cc:	e853 3f00 	ldrex	r3, [r3]
 80037d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80037d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	3314      	adds	r3, #20
 80037e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80037e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80037e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80037ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80037ee:	e841 2300 	strex	r3, r2, [r1]
 80037f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80037f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1e3      	bne.n	80037c2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2220      	movs	r2, #32
 80037fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	330c      	adds	r3, #12
 800380e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003810:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003812:	e853 3f00 	ldrex	r3, [r3]
 8003816:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003818:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800381a:	f023 0310 	bic.w	r3, r3, #16
 800381e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	330c      	adds	r3, #12
 8003828:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800382c:	65ba      	str	r2, [r7, #88]	; 0x58
 800382e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003830:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003832:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003834:	e841 2300 	strex	r3, r2, [r1]
 8003838:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800383a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1e3      	bne.n	8003808 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003844:	4618      	mov	r0, r3
 8003846:	f7fd fe93 	bl	8001570 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003852:	b29b      	uxth	r3, r3
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	b29b      	uxth	r3, r3
 8003858:	4619      	mov	r1, r3
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f8c0 	bl	80039e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003860:	e099      	b.n	8003996 <HAL_UART_IRQHandler+0x50e>
 8003862:	bf00      	nop
 8003864:	08003b9b 	.word	0x08003b9b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003870:	b29b      	uxth	r3, r3
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800387c:	b29b      	uxth	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	f000 808b 	beq.w	800399a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003884:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003888:	2b00      	cmp	r3, #0
 800388a:	f000 8086 	beq.w	800399a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	330c      	adds	r3, #12
 8003894:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003898:	e853 3f00 	ldrex	r3, [r3]
 800389c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800389e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	330c      	adds	r3, #12
 80038ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80038b2:	647a      	str	r2, [r7, #68]	; 0x44
 80038b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80038b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80038ba:	e841 2300 	strex	r3, r2, [r1]
 80038be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80038c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1e3      	bne.n	800388e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	3314      	adds	r3, #20
 80038cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d0:	e853 3f00 	ldrex	r3, [r3]
 80038d4:	623b      	str	r3, [r7, #32]
   return(result);
 80038d6:	6a3b      	ldr	r3, [r7, #32]
 80038d8:	f023 0301 	bic.w	r3, r3, #1
 80038dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	3314      	adds	r3, #20
 80038e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80038ea:	633a      	str	r2, [r7, #48]	; 0x30
 80038ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038f2:	e841 2300 	strex	r3, r2, [r1]
 80038f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80038f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1e3      	bne.n	80038c6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2220      	movs	r2, #32
 8003902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	330c      	adds	r3, #12
 8003912:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	e853 3f00 	ldrex	r3, [r3]
 800391a:	60fb      	str	r3, [r7, #12]
   return(result);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f023 0310 	bic.w	r3, r3, #16
 8003922:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	330c      	adds	r3, #12
 800392c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003930:	61fa      	str	r2, [r7, #28]
 8003932:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003934:	69b9      	ldr	r1, [r7, #24]
 8003936:	69fa      	ldr	r2, [r7, #28]
 8003938:	e841 2300 	strex	r3, r2, [r1]
 800393c:	617b      	str	r3, [r7, #20]
   return(result);
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d1e3      	bne.n	800390c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003944:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003948:	4619      	mov	r1, r3
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 f848 	bl	80039e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003950:	e023      	b.n	800399a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800395a:	2b00      	cmp	r3, #0
 800395c:	d009      	beq.n	8003972 <HAL_UART_IRQHandler+0x4ea>
 800395e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003966:	2b00      	cmp	r3, #0
 8003968:	d003      	beq.n	8003972 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f929 	bl	8003bc2 <UART_Transmit_IT>
    return;
 8003970:	e014      	b.n	800399c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00e      	beq.n	800399c <HAL_UART_IRQHandler+0x514>
 800397e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003986:	2b00      	cmp	r3, #0
 8003988:	d008      	beq.n	800399c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 f969 	bl	8003c62 <UART_EndTransmit_IT>
    return;
 8003990:	e004      	b.n	800399c <HAL_UART_IRQHandler+0x514>
    return;
 8003992:	bf00      	nop
 8003994:	e002      	b.n	800399c <HAL_UART_IRQHandler+0x514>
      return;
 8003996:	bf00      	nop
 8003998:	e000      	b.n	800399c <HAL_UART_IRQHandler+0x514>
      return;
 800399a:	bf00      	nop
  }
}
 800399c:	37e8      	adds	r7, #232	; 0xe8
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop

080039a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	460b      	mov	r3, r1
 80039ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b090      	sub	sp, #64	; 0x40
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	603b      	str	r3, [r7, #0]
 8003a04:	4613      	mov	r3, r2
 8003a06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a08:	e050      	b.n	8003aac <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a10:	d04c      	beq.n	8003aac <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d007      	beq.n	8003a28 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a18:	f7fd fbae 	bl	8001178 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d241      	bcs.n	8003aac <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	330c      	adds	r3, #12
 8003a2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a32:	e853 3f00 	ldrex	r3, [r3]
 8003a36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	330c      	adds	r3, #12
 8003a46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a48:	637a      	str	r2, [r7, #52]	; 0x34
 8003a4a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a50:	e841 2300 	strex	r3, r2, [r1]
 8003a54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1e5      	bne.n	8003a28 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	3314      	adds	r3, #20
 8003a62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	e853 3f00 	ldrex	r3, [r3]
 8003a6a:	613b      	str	r3, [r7, #16]
   return(result);
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	f023 0301 	bic.w	r3, r3, #1
 8003a72:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	3314      	adds	r3, #20
 8003a7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a7c:	623a      	str	r2, [r7, #32]
 8003a7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a80:	69f9      	ldr	r1, [r7, #28]
 8003a82:	6a3a      	ldr	r2, [r7, #32]
 8003a84:	e841 2300 	strex	r3, r2, [r1]
 8003a88:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1e5      	bne.n	8003a5c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2220      	movs	r2, #32
 8003a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e00f      	b.n	8003acc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	68ba      	ldr	r2, [r7, #8]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	bf0c      	ite	eq
 8003abc:	2301      	moveq	r3, #1
 8003abe:	2300      	movne	r3, #0
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	79fb      	ldrb	r3, [r7, #7]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d09f      	beq.n	8003a0a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3740      	adds	r7, #64	; 0x40
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b095      	sub	sp, #84	; 0x54
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	330c      	adds	r3, #12
 8003ae2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ae6:	e853 3f00 	ldrex	r3, [r3]
 8003aea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003af2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	330c      	adds	r3, #12
 8003afa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003afc:	643a      	str	r2, [r7, #64]	; 0x40
 8003afe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003b02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b04:	e841 2300 	strex	r3, r2, [r1]
 8003b08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1e5      	bne.n	8003adc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	3314      	adds	r3, #20
 8003b16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b18:	6a3b      	ldr	r3, [r7, #32]
 8003b1a:	e853 3f00 	ldrex	r3, [r3]
 8003b1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	f023 0301 	bic.w	r3, r3, #1
 8003b26:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	3314      	adds	r3, #20
 8003b2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b30:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b38:	e841 2300 	strex	r3, r2, [r1]
 8003b3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1e5      	bne.n	8003b10 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d119      	bne.n	8003b80 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	330c      	adds	r3, #12
 8003b52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	e853 3f00 	ldrex	r3, [r3]
 8003b5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	f023 0310 	bic.w	r3, r3, #16
 8003b62:	647b      	str	r3, [r7, #68]	; 0x44
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	330c      	adds	r3, #12
 8003b6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b6c:	61ba      	str	r2, [r7, #24]
 8003b6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b70:	6979      	ldr	r1, [r7, #20]
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	e841 2300 	strex	r3, r2, [r1]
 8003b78:	613b      	str	r3, [r7, #16]
   return(result);
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1e5      	bne.n	8003b4c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2220      	movs	r2, #32
 8003b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003b8e:	bf00      	nop
 8003b90:	3754      	adds	r7, #84	; 0x54
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr

08003b9a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b084      	sub	sp, #16
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	f7ff ff09 	bl	80039cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bba:	bf00      	nop
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	b085      	sub	sp, #20
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b21      	cmp	r3, #33	; 0x21
 8003bd4:	d13e      	bne.n	8003c54 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bde:	d114      	bne.n	8003c0a <UART_Transmit_IT+0x48>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d110      	bne.n	8003c0a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a1b      	ldr	r3, [r3, #32]
 8003bec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	881b      	ldrh	r3, [r3, #0]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bfc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	1c9a      	adds	r2, r3, #2
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	621a      	str	r2, [r3, #32]
 8003c08:	e008      	b.n	8003c1c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	1c59      	adds	r1, r3, #1
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	6211      	str	r1, [r2, #32]
 8003c14:	781a      	ldrb	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	3b01      	subs	r3, #1
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	4619      	mov	r1, r3
 8003c2a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d10f      	bne.n	8003c50 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68da      	ldr	r2, [r3, #12]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c3e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68da      	ldr	r2, [r3, #12]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c4e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c50:	2300      	movs	r3, #0
 8003c52:	e000      	b.n	8003c56 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003c54:	2302      	movs	r3, #2
  }
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3714      	adds	r7, #20
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr

08003c62 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b082      	sub	sp, #8
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68da      	ldr	r2, [r3, #12]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c78:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2220      	movs	r2, #32
 8003c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7ff fe8e 	bl	80039a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b08c      	sub	sp, #48	; 0x30
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b22      	cmp	r3, #34	; 0x22
 8003ca4:	f040 80ab 	bne.w	8003dfe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cb0:	d117      	bne.n	8003ce2 <UART_Receive_IT+0x50>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d113      	bne.n	8003ce2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cd0:	b29a      	uxth	r2, r3
 8003cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cda:	1c9a      	adds	r2, r3, #2
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	629a      	str	r2, [r3, #40]	; 0x28
 8003ce0:	e026      	b.n	8003d30 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cf4:	d007      	beq.n	8003d06 <UART_Receive_IT+0x74>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10a      	bne.n	8003d14 <UART_Receive_IT+0x82>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d106      	bne.n	8003d14 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	b2da      	uxtb	r2, r3
 8003d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d10:	701a      	strb	r2, [r3, #0]
 8003d12:	e008      	b.n	8003d26 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d20:	b2da      	uxtb	r2, r3
 8003d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d24:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2a:	1c5a      	adds	r2, r3, #1
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	3b01      	subs	r3, #1
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d15a      	bne.n	8003dfa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68da      	ldr	r2, [r3, #12]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 0220 	bic.w	r2, r2, #32
 8003d52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68da      	ldr	r2, [r3, #12]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	695a      	ldr	r2, [r3, #20]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f022 0201 	bic.w	r2, r2, #1
 8003d72:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2220      	movs	r2, #32
 8003d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d135      	bne.n	8003df0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	330c      	adds	r3, #12
 8003d90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	e853 3f00 	ldrex	r3, [r3]
 8003d98:	613b      	str	r3, [r7, #16]
   return(result);
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	f023 0310 	bic.w	r3, r3, #16
 8003da0:	627b      	str	r3, [r7, #36]	; 0x24
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	330c      	adds	r3, #12
 8003da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003daa:	623a      	str	r2, [r7, #32]
 8003dac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dae:	69f9      	ldr	r1, [r7, #28]
 8003db0:	6a3a      	ldr	r2, [r7, #32]
 8003db2:	e841 2300 	strex	r3, r2, [r1]
 8003db6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1e5      	bne.n	8003d8a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0310 	and.w	r3, r3, #16
 8003dc8:	2b10      	cmp	r3, #16
 8003dca:	d10a      	bne.n	8003de2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003dcc:	2300      	movs	r3, #0
 8003dce:	60fb      	str	r3, [r7, #12]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	60fb      	str	r3, [r7, #12]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	60fb      	str	r3, [r7, #12]
 8003de0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003de6:	4619      	mov	r1, r3
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f7ff fdf9 	bl	80039e0 <HAL_UARTEx_RxEventCallback>
 8003dee:	e002      	b.n	8003df6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f7ff fde1 	bl	80039b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003df6:	2300      	movs	r3, #0
 8003df8:	e002      	b.n	8003e00 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	e000      	b.n	8003e00 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003dfe:	2302      	movs	r3, #2
  }
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3730      	adds	r7, #48	; 0x30
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e0c:	b0c0      	sub	sp, #256	; 0x100
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e24:	68d9      	ldr	r1, [r3, #12]
 8003e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	ea40 0301 	orr.w	r3, r0, r1
 8003e30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e36:	689a      	ldr	r2, [r3, #8]
 8003e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	431a      	orrs	r2, r3
 8003e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e4c:	69db      	ldr	r3, [r3, #28]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003e60:	f021 010c 	bic.w	r1, r1, #12
 8003e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003e6e:	430b      	orrs	r3, r1
 8003e70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e82:	6999      	ldr	r1, [r3, #24]
 8003e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	ea40 0301 	orr.w	r3, r0, r1
 8003e8e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	4b8f      	ldr	r3, [pc, #572]	; (80040d4 <UART_SetConfig+0x2cc>)
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d005      	beq.n	8003ea8 <UART_SetConfig+0xa0>
 8003e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	4b8d      	ldr	r3, [pc, #564]	; (80040d8 <UART_SetConfig+0x2d0>)
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d104      	bne.n	8003eb2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ea8:	f7fe fc52 	bl	8002750 <HAL_RCC_GetPCLK2Freq>
 8003eac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003eb0:	e003      	b.n	8003eba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003eb2:	f7fe fc39 	bl	8002728 <HAL_RCC_GetPCLK1Freq>
 8003eb6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ebe:	69db      	ldr	r3, [r3, #28]
 8003ec0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ec4:	f040 810c 	bne.w	80040e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ec8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003ed2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003ed6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003eda:	4622      	mov	r2, r4
 8003edc:	462b      	mov	r3, r5
 8003ede:	1891      	adds	r1, r2, r2
 8003ee0:	65b9      	str	r1, [r7, #88]	; 0x58
 8003ee2:	415b      	adcs	r3, r3
 8003ee4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ee6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003eea:	4621      	mov	r1, r4
 8003eec:	eb12 0801 	adds.w	r8, r2, r1
 8003ef0:	4629      	mov	r1, r5
 8003ef2:	eb43 0901 	adc.w	r9, r3, r1
 8003ef6:	f04f 0200 	mov.w	r2, #0
 8003efa:	f04f 0300 	mov.w	r3, #0
 8003efe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f0a:	4690      	mov	r8, r2
 8003f0c:	4699      	mov	r9, r3
 8003f0e:	4623      	mov	r3, r4
 8003f10:	eb18 0303 	adds.w	r3, r8, r3
 8003f14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003f18:	462b      	mov	r3, r5
 8003f1a:	eb49 0303 	adc.w	r3, r9, r3
 8003f1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003f2e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003f32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003f36:	460b      	mov	r3, r1
 8003f38:	18db      	adds	r3, r3, r3
 8003f3a:	653b      	str	r3, [r7, #80]	; 0x50
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	eb42 0303 	adc.w	r3, r2, r3
 8003f42:	657b      	str	r3, [r7, #84]	; 0x54
 8003f44:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003f48:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003f4c:	f7fc f998 	bl	8000280 <__aeabi_uldivmod>
 8003f50:	4602      	mov	r2, r0
 8003f52:	460b      	mov	r3, r1
 8003f54:	4b61      	ldr	r3, [pc, #388]	; (80040dc <UART_SetConfig+0x2d4>)
 8003f56:	fba3 2302 	umull	r2, r3, r3, r2
 8003f5a:	095b      	lsrs	r3, r3, #5
 8003f5c:	011c      	lsls	r4, r3, #4
 8003f5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f62:	2200      	movs	r2, #0
 8003f64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f68:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003f6c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003f70:	4642      	mov	r2, r8
 8003f72:	464b      	mov	r3, r9
 8003f74:	1891      	adds	r1, r2, r2
 8003f76:	64b9      	str	r1, [r7, #72]	; 0x48
 8003f78:	415b      	adcs	r3, r3
 8003f7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f7c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003f80:	4641      	mov	r1, r8
 8003f82:	eb12 0a01 	adds.w	sl, r2, r1
 8003f86:	4649      	mov	r1, r9
 8003f88:	eb43 0b01 	adc.w	fp, r3, r1
 8003f8c:	f04f 0200 	mov.w	r2, #0
 8003f90:	f04f 0300 	mov.w	r3, #0
 8003f94:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f98:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fa0:	4692      	mov	sl, r2
 8003fa2:	469b      	mov	fp, r3
 8003fa4:	4643      	mov	r3, r8
 8003fa6:	eb1a 0303 	adds.w	r3, sl, r3
 8003faa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003fae:	464b      	mov	r3, r9
 8003fb0:	eb4b 0303 	adc.w	r3, fp, r3
 8003fb4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003fc4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003fc8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003fcc:	460b      	mov	r3, r1
 8003fce:	18db      	adds	r3, r3, r3
 8003fd0:	643b      	str	r3, [r7, #64]	; 0x40
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	eb42 0303 	adc.w	r3, r2, r3
 8003fd8:	647b      	str	r3, [r7, #68]	; 0x44
 8003fda:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003fde:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003fe2:	f7fc f94d 	bl	8000280 <__aeabi_uldivmod>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	460b      	mov	r3, r1
 8003fea:	4611      	mov	r1, r2
 8003fec:	4b3b      	ldr	r3, [pc, #236]	; (80040dc <UART_SetConfig+0x2d4>)
 8003fee:	fba3 2301 	umull	r2, r3, r3, r1
 8003ff2:	095b      	lsrs	r3, r3, #5
 8003ff4:	2264      	movs	r2, #100	; 0x64
 8003ff6:	fb02 f303 	mul.w	r3, r2, r3
 8003ffa:	1acb      	subs	r3, r1, r3
 8003ffc:	00db      	lsls	r3, r3, #3
 8003ffe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004002:	4b36      	ldr	r3, [pc, #216]	; (80040dc <UART_SetConfig+0x2d4>)
 8004004:	fba3 2302 	umull	r2, r3, r3, r2
 8004008:	095b      	lsrs	r3, r3, #5
 800400a:	005b      	lsls	r3, r3, #1
 800400c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004010:	441c      	add	r4, r3
 8004012:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004016:	2200      	movs	r2, #0
 8004018:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800401c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004020:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004024:	4642      	mov	r2, r8
 8004026:	464b      	mov	r3, r9
 8004028:	1891      	adds	r1, r2, r2
 800402a:	63b9      	str	r1, [r7, #56]	; 0x38
 800402c:	415b      	adcs	r3, r3
 800402e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004030:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004034:	4641      	mov	r1, r8
 8004036:	1851      	adds	r1, r2, r1
 8004038:	6339      	str	r1, [r7, #48]	; 0x30
 800403a:	4649      	mov	r1, r9
 800403c:	414b      	adcs	r3, r1
 800403e:	637b      	str	r3, [r7, #52]	; 0x34
 8004040:	f04f 0200 	mov.w	r2, #0
 8004044:	f04f 0300 	mov.w	r3, #0
 8004048:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800404c:	4659      	mov	r1, fp
 800404e:	00cb      	lsls	r3, r1, #3
 8004050:	4651      	mov	r1, sl
 8004052:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004056:	4651      	mov	r1, sl
 8004058:	00ca      	lsls	r2, r1, #3
 800405a:	4610      	mov	r0, r2
 800405c:	4619      	mov	r1, r3
 800405e:	4603      	mov	r3, r0
 8004060:	4642      	mov	r2, r8
 8004062:	189b      	adds	r3, r3, r2
 8004064:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004068:	464b      	mov	r3, r9
 800406a:	460a      	mov	r2, r1
 800406c:	eb42 0303 	adc.w	r3, r2, r3
 8004070:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004080:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004084:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004088:	460b      	mov	r3, r1
 800408a:	18db      	adds	r3, r3, r3
 800408c:	62bb      	str	r3, [r7, #40]	; 0x28
 800408e:	4613      	mov	r3, r2
 8004090:	eb42 0303 	adc.w	r3, r2, r3
 8004094:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004096:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800409a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800409e:	f7fc f8ef 	bl	8000280 <__aeabi_uldivmod>
 80040a2:	4602      	mov	r2, r0
 80040a4:	460b      	mov	r3, r1
 80040a6:	4b0d      	ldr	r3, [pc, #52]	; (80040dc <UART_SetConfig+0x2d4>)
 80040a8:	fba3 1302 	umull	r1, r3, r3, r2
 80040ac:	095b      	lsrs	r3, r3, #5
 80040ae:	2164      	movs	r1, #100	; 0x64
 80040b0:	fb01 f303 	mul.w	r3, r1, r3
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	3332      	adds	r3, #50	; 0x32
 80040ba:	4a08      	ldr	r2, [pc, #32]	; (80040dc <UART_SetConfig+0x2d4>)
 80040bc:	fba2 2303 	umull	r2, r3, r2, r3
 80040c0:	095b      	lsrs	r3, r3, #5
 80040c2:	f003 0207 	and.w	r2, r3, #7
 80040c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4422      	add	r2, r4
 80040ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80040d0:	e106      	b.n	80042e0 <UART_SetConfig+0x4d8>
 80040d2:	bf00      	nop
 80040d4:	40011000 	.word	0x40011000
 80040d8:	40011400 	.word	0x40011400
 80040dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040e4:	2200      	movs	r2, #0
 80040e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80040ea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80040ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80040f2:	4642      	mov	r2, r8
 80040f4:	464b      	mov	r3, r9
 80040f6:	1891      	adds	r1, r2, r2
 80040f8:	6239      	str	r1, [r7, #32]
 80040fa:	415b      	adcs	r3, r3
 80040fc:	627b      	str	r3, [r7, #36]	; 0x24
 80040fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004102:	4641      	mov	r1, r8
 8004104:	1854      	adds	r4, r2, r1
 8004106:	4649      	mov	r1, r9
 8004108:	eb43 0501 	adc.w	r5, r3, r1
 800410c:	f04f 0200 	mov.w	r2, #0
 8004110:	f04f 0300 	mov.w	r3, #0
 8004114:	00eb      	lsls	r3, r5, #3
 8004116:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800411a:	00e2      	lsls	r2, r4, #3
 800411c:	4614      	mov	r4, r2
 800411e:	461d      	mov	r5, r3
 8004120:	4643      	mov	r3, r8
 8004122:	18e3      	adds	r3, r4, r3
 8004124:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004128:	464b      	mov	r3, r9
 800412a:	eb45 0303 	adc.w	r3, r5, r3
 800412e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800413e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004142:	f04f 0200 	mov.w	r2, #0
 8004146:	f04f 0300 	mov.w	r3, #0
 800414a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800414e:	4629      	mov	r1, r5
 8004150:	008b      	lsls	r3, r1, #2
 8004152:	4621      	mov	r1, r4
 8004154:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004158:	4621      	mov	r1, r4
 800415a:	008a      	lsls	r2, r1, #2
 800415c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004160:	f7fc f88e 	bl	8000280 <__aeabi_uldivmod>
 8004164:	4602      	mov	r2, r0
 8004166:	460b      	mov	r3, r1
 8004168:	4b60      	ldr	r3, [pc, #384]	; (80042ec <UART_SetConfig+0x4e4>)
 800416a:	fba3 2302 	umull	r2, r3, r3, r2
 800416e:	095b      	lsrs	r3, r3, #5
 8004170:	011c      	lsls	r4, r3, #4
 8004172:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004176:	2200      	movs	r2, #0
 8004178:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800417c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004180:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004184:	4642      	mov	r2, r8
 8004186:	464b      	mov	r3, r9
 8004188:	1891      	adds	r1, r2, r2
 800418a:	61b9      	str	r1, [r7, #24]
 800418c:	415b      	adcs	r3, r3
 800418e:	61fb      	str	r3, [r7, #28]
 8004190:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004194:	4641      	mov	r1, r8
 8004196:	1851      	adds	r1, r2, r1
 8004198:	6139      	str	r1, [r7, #16]
 800419a:	4649      	mov	r1, r9
 800419c:	414b      	adcs	r3, r1
 800419e:	617b      	str	r3, [r7, #20]
 80041a0:	f04f 0200 	mov.w	r2, #0
 80041a4:	f04f 0300 	mov.w	r3, #0
 80041a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041ac:	4659      	mov	r1, fp
 80041ae:	00cb      	lsls	r3, r1, #3
 80041b0:	4651      	mov	r1, sl
 80041b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041b6:	4651      	mov	r1, sl
 80041b8:	00ca      	lsls	r2, r1, #3
 80041ba:	4610      	mov	r0, r2
 80041bc:	4619      	mov	r1, r3
 80041be:	4603      	mov	r3, r0
 80041c0:	4642      	mov	r2, r8
 80041c2:	189b      	adds	r3, r3, r2
 80041c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80041c8:	464b      	mov	r3, r9
 80041ca:	460a      	mov	r2, r1
 80041cc:	eb42 0303 	adc.w	r3, r2, r3
 80041d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80041d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80041de:	67fa      	str	r2, [r7, #124]	; 0x7c
 80041e0:	f04f 0200 	mov.w	r2, #0
 80041e4:	f04f 0300 	mov.w	r3, #0
 80041e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80041ec:	4649      	mov	r1, r9
 80041ee:	008b      	lsls	r3, r1, #2
 80041f0:	4641      	mov	r1, r8
 80041f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041f6:	4641      	mov	r1, r8
 80041f8:	008a      	lsls	r2, r1, #2
 80041fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80041fe:	f7fc f83f 	bl	8000280 <__aeabi_uldivmod>
 8004202:	4602      	mov	r2, r0
 8004204:	460b      	mov	r3, r1
 8004206:	4611      	mov	r1, r2
 8004208:	4b38      	ldr	r3, [pc, #224]	; (80042ec <UART_SetConfig+0x4e4>)
 800420a:	fba3 2301 	umull	r2, r3, r3, r1
 800420e:	095b      	lsrs	r3, r3, #5
 8004210:	2264      	movs	r2, #100	; 0x64
 8004212:	fb02 f303 	mul.w	r3, r2, r3
 8004216:	1acb      	subs	r3, r1, r3
 8004218:	011b      	lsls	r3, r3, #4
 800421a:	3332      	adds	r3, #50	; 0x32
 800421c:	4a33      	ldr	r2, [pc, #204]	; (80042ec <UART_SetConfig+0x4e4>)
 800421e:	fba2 2303 	umull	r2, r3, r2, r3
 8004222:	095b      	lsrs	r3, r3, #5
 8004224:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004228:	441c      	add	r4, r3
 800422a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800422e:	2200      	movs	r2, #0
 8004230:	673b      	str	r3, [r7, #112]	; 0x70
 8004232:	677a      	str	r2, [r7, #116]	; 0x74
 8004234:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004238:	4642      	mov	r2, r8
 800423a:	464b      	mov	r3, r9
 800423c:	1891      	adds	r1, r2, r2
 800423e:	60b9      	str	r1, [r7, #8]
 8004240:	415b      	adcs	r3, r3
 8004242:	60fb      	str	r3, [r7, #12]
 8004244:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004248:	4641      	mov	r1, r8
 800424a:	1851      	adds	r1, r2, r1
 800424c:	6039      	str	r1, [r7, #0]
 800424e:	4649      	mov	r1, r9
 8004250:	414b      	adcs	r3, r1
 8004252:	607b      	str	r3, [r7, #4]
 8004254:	f04f 0200 	mov.w	r2, #0
 8004258:	f04f 0300 	mov.w	r3, #0
 800425c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004260:	4659      	mov	r1, fp
 8004262:	00cb      	lsls	r3, r1, #3
 8004264:	4651      	mov	r1, sl
 8004266:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800426a:	4651      	mov	r1, sl
 800426c:	00ca      	lsls	r2, r1, #3
 800426e:	4610      	mov	r0, r2
 8004270:	4619      	mov	r1, r3
 8004272:	4603      	mov	r3, r0
 8004274:	4642      	mov	r2, r8
 8004276:	189b      	adds	r3, r3, r2
 8004278:	66bb      	str	r3, [r7, #104]	; 0x68
 800427a:	464b      	mov	r3, r9
 800427c:	460a      	mov	r2, r1
 800427e:	eb42 0303 	adc.w	r3, r2, r3
 8004282:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	663b      	str	r3, [r7, #96]	; 0x60
 800428e:	667a      	str	r2, [r7, #100]	; 0x64
 8004290:	f04f 0200 	mov.w	r2, #0
 8004294:	f04f 0300 	mov.w	r3, #0
 8004298:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800429c:	4649      	mov	r1, r9
 800429e:	008b      	lsls	r3, r1, #2
 80042a0:	4641      	mov	r1, r8
 80042a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042a6:	4641      	mov	r1, r8
 80042a8:	008a      	lsls	r2, r1, #2
 80042aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80042ae:	f7fb ffe7 	bl	8000280 <__aeabi_uldivmod>
 80042b2:	4602      	mov	r2, r0
 80042b4:	460b      	mov	r3, r1
 80042b6:	4b0d      	ldr	r3, [pc, #52]	; (80042ec <UART_SetConfig+0x4e4>)
 80042b8:	fba3 1302 	umull	r1, r3, r3, r2
 80042bc:	095b      	lsrs	r3, r3, #5
 80042be:	2164      	movs	r1, #100	; 0x64
 80042c0:	fb01 f303 	mul.w	r3, r1, r3
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	011b      	lsls	r3, r3, #4
 80042c8:	3332      	adds	r3, #50	; 0x32
 80042ca:	4a08      	ldr	r2, [pc, #32]	; (80042ec <UART_SetConfig+0x4e4>)
 80042cc:	fba2 2303 	umull	r2, r3, r2, r3
 80042d0:	095b      	lsrs	r3, r3, #5
 80042d2:	f003 020f 	and.w	r2, r3, #15
 80042d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4422      	add	r2, r4
 80042de:	609a      	str	r2, [r3, #8]
}
 80042e0:	bf00      	nop
 80042e2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80042e6:	46bd      	mov	sp, r7
 80042e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042ec:	51eb851f 	.word	0x51eb851f

080042f0 <WIZCHIP_WRITE>:
#if   (_WIZCHIP_ == W5100S)
/**
@brief  This function writes the data into W5100S registers.
*/
void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	460b      	mov	r3, r1
 80042fa:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 80042fc:	4b1e      	ldr	r3, [pc, #120]	; (8004378 <WIZCHIP_WRITE+0x88>)
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004302:	4b1d      	ldr	r3, [pc, #116]	; (8004378 <WIZCHIP_WRITE+0x88>)
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_))
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004308:	4b1b      	ldr	r3, [pc, #108]	; (8004378 <WIZCHIP_WRITE+0x88>)
 800430a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430c:	2b00      	cmp	r3, #0
 800430e:	d116      	bne.n	800433e <WIZCHIP_WRITE+0x4e>
   {
      WIZCHIP.IF.SPI._write_byte(0xF0);
 8004310:	4b19      	ldr	r3, [pc, #100]	; (8004378 <WIZCHIP_WRITE+0x88>)
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	20f0      	movs	r0, #240	; 0xf0
 8004316:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0xFF00) >>  8);
 8004318:	4b17      	ldr	r3, [pc, #92]	; (8004378 <WIZCHIP_WRITE+0x88>)
 800431a:	6a1b      	ldr	r3, [r3, #32]
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	0a12      	lsrs	r2, r2, #8
 8004320:	b2d2      	uxtb	r2, r2
 8004322:	4610      	mov	r0, r2
 8004324:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF) >>  0);
 8004326:	4b14      	ldr	r3, [pc, #80]	; (8004378 <WIZCHIP_WRITE+0x88>)
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	b2d2      	uxtb	r2, r2
 800432e:	4610      	mov	r0, r2
 8004330:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte(wb);    // Data write (write 1byte data)
 8004332:	4b11      	ldr	r3, [pc, #68]	; (8004378 <WIZCHIP_WRITE+0x88>)
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	78fa      	ldrb	r2, [r7, #3]
 8004338:	4610      	mov	r0, r2
 800433a:	4798      	blx	r3
 800433c:	e011      	b.n	8004362 <WIZCHIP_WRITE+0x72>
   }
   else     // burst operation
   {
      spi_data[0] = 0xF0;
 800433e:	23f0      	movs	r3, #240	; 0xf0
 8004340:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0xFF00) >>  8;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	0a1b      	lsrs	r3, r3, #8
 8004346:	b2db      	uxtb	r3, r3
 8004348:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x00FF) >>  0;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	b2db      	uxtb	r3, r3
 800434e:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8004350:	78fb      	ldrb	r3, [r7, #3]
 8004352:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8004354:	4b08      	ldr	r3, [pc, #32]	; (8004378 <WIZCHIP_WRITE+0x88>)
 8004356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004358:	f107 020c 	add.w	r2, r7, #12
 800435c:	2104      	movs	r1, #4
 800435e:	4610      	mov	r0, r2
 8004360:	4798      	blx	r3
   WIZCHIP.IF.BUS._write_data(IDM_DR,wb);
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100. !!!"
#endif

   WIZCHIP.CS._deselect();
 8004362:	4b05      	ldr	r3, [pc, #20]	; (8004378 <WIZCHIP_WRITE+0x88>)
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8004368:	4b03      	ldr	r3, [pc, #12]	; (8004378 <WIZCHIP_WRITE+0x88>)
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	4798      	blx	r3
}
 800436e:	bf00      	nop
 8004370:	3710      	adds	r7, #16
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	20000024 	.word	0x20000024

0800437c <WIZCHIP_READ>:
/**
@brief  This function reads the value from W5100S registers.
*/
uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];
   WIZCHIP_CRITICAL_ENTER();
 8004384:	4b1f      	ldr	r3, [pc, #124]	; (8004404 <WIZCHIP_READ+0x88>)
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	4798      	blx	r3
   WIZCHIP.CS._select();
 800438a:	4b1e      	ldr	r3, [pc, #120]	; (8004404 <WIZCHIP_READ+0x88>)
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ ==  _WIZCHIP_IO_MODE_SPI_))
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004390:	4b1c      	ldr	r3, [pc, #112]	; (8004404 <WIZCHIP_READ+0x88>)
 8004392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004394:	2b00      	cmp	r3, #0
 8004396:	d003      	beq.n	80043a0 <WIZCHIP_READ+0x24>
 8004398:	4b1a      	ldr	r3, [pc, #104]	; (8004404 <WIZCHIP_READ+0x88>)
 800439a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800439c:	2b00      	cmp	r3, #0
 800439e:	d111      	bne.n	80043c4 <WIZCHIP_READ+0x48>
   {
        WIZCHIP.IF.SPI._write_byte(0x0F);
 80043a0:	4b18      	ldr	r3, [pc, #96]	; (8004404 <WIZCHIP_READ+0x88>)
 80043a2:	6a1b      	ldr	r3, [r3, #32]
 80043a4:	200f      	movs	r0, #15
 80043a6:	4798      	blx	r3
        WIZCHIP.IF.SPI._write_byte((AddrSel & 0xFF00) >>  8);
 80043a8:	4b16      	ldr	r3, [pc, #88]	; (8004404 <WIZCHIP_READ+0x88>)
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	0a12      	lsrs	r2, r2, #8
 80043b0:	b2d2      	uxtb	r2, r2
 80043b2:	4610      	mov	r0, r2
 80043b4:	4798      	blx	r3
        WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF) >>  0);
 80043b6:	4b13      	ldr	r3, [pc, #76]	; (8004404 <WIZCHIP_READ+0x88>)
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	b2d2      	uxtb	r2, r2
 80043be:	4610      	mov	r0, r2
 80043c0:	4798      	blx	r3
 80043c2:	e00f      	b.n	80043e4 <WIZCHIP_READ+0x68>
   }
   else
   {
        spi_data[0] = 0x0F;
 80043c4:	230f      	movs	r3, #15
 80043c6:	733b      	strb	r3, [r7, #12]
        spi_data[1] = (AddrSel & 0xFF00) >>  8;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	0a1b      	lsrs	r3, r3, #8
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	737b      	strb	r3, [r7, #13]
        spi_data[2] = (AddrSel & 0x00FF) >>  0;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	73bb      	strb	r3, [r7, #14]
        WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80043d6:	4b0b      	ldr	r3, [pc, #44]	; (8004404 <WIZCHIP_READ+0x88>)
 80043d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043da:	f107 020c 	add.w	r2, r7, #12
 80043de:	2103      	movs	r1, #3
 80043e0:	4610      	mov	r0, r2
 80043e2:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte(); 
 80043e4:	4b07      	ldr	r3, [pc, #28]	; (8004404 <WIZCHIP_READ+0x88>)
 80043e6:	69db      	ldr	r3, [r3, #28]
 80043e8:	4798      	blx	r3
 80043ea:	4603      	mov	r3, r0
 80043ec:	73fb      	strb	r3, [r7, #15]

#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100S. !!!"   
#endif

   WIZCHIP.CS._deselect();
 80043ee:	4b05      	ldr	r3, [pc, #20]	; (8004404 <WIZCHIP_READ+0x88>)
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80043f4:	4b03      	ldr	r3, [pc, #12]	; (8004404 <WIZCHIP_READ+0x88>)
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	4798      	blx	r3
   return ret;
 80043fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	20000024 	.word	0x20000024

08004408 <WIZCHIP_WRITE_BUF>:

/**
@brief  This function writes into W5100S memory(Buffer)
*/ 
void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b086      	sub	sp, #24
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	4613      	mov	r3, r2
 8004414:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i = 0;
 8004416:	2300      	movs	r3, #0
 8004418:	82fb      	strh	r3, [r7, #22]

   WIZCHIP_CRITICAL_ENTER();
 800441a:	4b30      	ldr	r3, [pc, #192]	; (80044dc <WIZCHIP_WRITE_BUF+0xd4>)
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	4798      	blx	r3
   WIZCHIP.CS._select();   //M20150601 : Moved here.
 8004420:	4b2e      	ldr	r3, [pc, #184]	; (80044dc <WIZCHIP_WRITE_BUF+0xd4>)
 8004422:	695b      	ldr	r3, [r3, #20]
 8004424:	4798      	blx	r3

#if((_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_))

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004426:	4b2d      	ldr	r3, [pc, #180]	; (80044dc <WIZCHIP_WRITE_BUF+0xd4>)
 8004428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442a:	2b00      	cmp	r3, #0
 800442c:	d12c      	bne.n	8004488 <WIZCHIP_WRITE_BUF+0x80>
   {
      WIZCHIP.IF.SPI._write_byte(0xF0);
 800442e:	4b2b      	ldr	r3, [pc, #172]	; (80044dc <WIZCHIP_WRITE_BUF+0xd4>)
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	20f0      	movs	r0, #240	; 0xf0
 8004434:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((((uint16_t)(AddrSel+i)) & 0xFF00) >>  8);
 8004436:	4b29      	ldr	r3, [pc, #164]	; (80044dc <WIZCHIP_WRITE_BUF+0xd4>)
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	b291      	uxth	r1, r2
 800443e:	8afa      	ldrh	r2, [r7, #22]
 8004440:	440a      	add	r2, r1
 8004442:	b292      	uxth	r2, r2
 8004444:	0a12      	lsrs	r2, r2, #8
 8004446:	b292      	uxth	r2, r2
 8004448:	b2d2      	uxtb	r2, r2
 800444a:	4610      	mov	r0, r2
 800444c:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((((uint16_t)(AddrSel+i)) & 0x00FF) >>  0);
 800444e:	4b23      	ldr	r3, [pc, #140]	; (80044dc <WIZCHIP_WRITE_BUF+0xd4>)
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	b2d1      	uxtb	r1, r2
 8004456:	8afa      	ldrh	r2, [r7, #22]
 8004458:	b2d2      	uxtb	r2, r2
 800445a:	440a      	add	r2, r1
 800445c:	b2d2      	uxtb	r2, r2
 800445e:	4610      	mov	r0, r2
 8004460:	4798      	blx	r3

      for(i = 0; i < len; i++)
 8004462:	2300      	movs	r3, #0
 8004464:	82fb      	strh	r3, [r7, #22]
 8004466:	e00a      	b.n	800447e <WIZCHIP_WRITE_BUF+0x76>
      {
         WIZCHIP.IF.SPI._write_byte(pBuf[i]);    // Data write (write 1byte data)
 8004468:	4b1c      	ldr	r3, [pc, #112]	; (80044dc <WIZCHIP_WRITE_BUF+0xd4>)
 800446a:	6a1b      	ldr	r3, [r3, #32]
 800446c:	8afa      	ldrh	r2, [r7, #22]
 800446e:	68b9      	ldr	r1, [r7, #8]
 8004470:	440a      	add	r2, r1
 8004472:	7812      	ldrb	r2, [r2, #0]
 8004474:	4610      	mov	r0, r2
 8004476:	4798      	blx	r3
      for(i = 0; i < len; i++)
 8004478:	8afb      	ldrh	r3, [r7, #22]
 800447a:	3301      	adds	r3, #1
 800447c:	82fb      	strh	r3, [r7, #22]
 800447e:	8afa      	ldrh	r2, [r7, #22]
 8004480:	88fb      	ldrh	r3, [r7, #6]
 8004482:	429a      	cmp	r2, r3
 8004484:	d3f0      	bcc.n	8004468 <WIZCHIP_WRITE_BUF+0x60>
 8004486:	e01e      	b.n	80044c6 <WIZCHIP_WRITE_BUF+0xbe>
      }
   }
   else     // burst operation
   {
		spi_data[0] = 0xF0;
 8004488:	23f0      	movs	r3, #240	; 0xf0
 800448a:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (((uint16_t)(AddrSel+i)) & 0xFF00) >>  8;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	b29a      	uxth	r2, r3
 8004490:	8afb      	ldrh	r3, [r7, #22]
 8004492:	4413      	add	r3, r2
 8004494:	b29b      	uxth	r3, r3
 8004496:	0a1b      	lsrs	r3, r3, #8
 8004498:	b29b      	uxth	r3, r3
 800449a:	b2db      	uxtb	r3, r3
 800449c:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (((uint16_t)(AddrSel+i)) & 0x00FF) >>  0;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	b2da      	uxtb	r2, r3
 80044a2:	8afb      	ldrh	r3, [r7, #22]
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	4413      	add	r3, r2
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80044ac:	4b0b      	ldr	r3, [pc, #44]	; (80044dc <WIZCHIP_WRITE_BUF+0xd4>)
 80044ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b0:	f107 0210 	add.w	r2, r7, #16
 80044b4:	2103      	movs	r1, #3
 80044b6:	4610      	mov	r0, r2
 80044b8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 80044ba:	4b08      	ldr	r3, [pc, #32]	; (80044dc <WIZCHIP_WRITE_BUF+0xd4>)
 80044bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044be:	88fa      	ldrh	r2, [r7, #6]
 80044c0:	4611      	mov	r1, r2
 80044c2:	68b8      	ldr	r0, [r7, #8]
 80044c4:	4798      	blx	r3

#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100S. !!!!"
#endif
   
   WIZCHIP.CS._deselect();  //M20150601 : Moved here.
 80044c6:	4b05      	ldr	r3, [pc, #20]	; (80044dc <WIZCHIP_WRITE_BUF+0xd4>)
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80044cc:	4b03      	ldr	r3, [pc, #12]	; (80044dc <WIZCHIP_WRITE_BUF+0xd4>)
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	4798      	blx	r3
}
 80044d2:	bf00      	nop
 80044d4:	3718      	adds	r7, #24
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	20000024 	.word	0x20000024

080044e0 <WIZCHIP_READ_BUF>:
/**
@brief  This function reads into W5100S memory(Buffer)
*/ 

void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80044e0:	b590      	push	{r4, r7, lr}
 80044e2:	b087      	sub	sp, #28
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	4613      	mov	r3, r2
 80044ec:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i = 0;
 80044ee:	2300      	movs	r3, #0
 80044f0:	82fb      	strh	r3, [r7, #22]
   WIZCHIP_CRITICAL_ENTER();
 80044f2:	4b32      	ldr	r3, [pc, #200]	; (80045bc <WIZCHIP_READ_BUF+0xdc>)
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	4798      	blx	r3
   WIZCHIP.CS._select();   //M20150601 : Moved here.
 80044f8:	4b30      	ldr	r3, [pc, #192]	; (80045bc <WIZCHIP_READ_BUF+0xdc>)
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	4798      	blx	r3
   
#if( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_) )
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80044fe:	4b2f      	ldr	r3, [pc, #188]	; (80045bc <WIZCHIP_READ_BUF+0xdc>)
 8004500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004502:	2b00      	cmp	r3, #0
 8004504:	d003      	beq.n	800450e <WIZCHIP_READ_BUF+0x2e>
 8004506:	4b2d      	ldr	r3, [pc, #180]	; (80045bc <WIZCHIP_READ_BUF+0xdc>)
 8004508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450a:	2b00      	cmp	r3, #0
 800450c:	d12c      	bne.n	8004568 <WIZCHIP_READ_BUF+0x88>
   {
      WIZCHIP.IF.SPI._write_byte(0x0F);
 800450e:	4b2b      	ldr	r3, [pc, #172]	; (80045bc <WIZCHIP_READ_BUF+0xdc>)
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	200f      	movs	r0, #15
 8004514:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((uint16_t)((AddrSel+i) & 0xFF00) >>  8);
 8004516:	4b29      	ldr	r3, [pc, #164]	; (80045bc <WIZCHIP_READ_BUF+0xdc>)
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	b291      	uxth	r1, r2
 800451e:	8afa      	ldrh	r2, [r7, #22]
 8004520:	440a      	add	r2, r1
 8004522:	b292      	uxth	r2, r2
 8004524:	0a12      	lsrs	r2, r2, #8
 8004526:	b292      	uxth	r2, r2
 8004528:	b2d2      	uxtb	r2, r2
 800452a:	4610      	mov	r0, r2
 800452c:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((uint16_t)((AddrSel+i) & 0x00FF) >>  0);
 800452e:	4b23      	ldr	r3, [pc, #140]	; (80045bc <WIZCHIP_READ_BUF+0xdc>)
 8004530:	6a1b      	ldr	r3, [r3, #32]
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	b2d1      	uxtb	r1, r2
 8004536:	8afa      	ldrh	r2, [r7, #22]
 8004538:	b2d2      	uxtb	r2, r2
 800453a:	440a      	add	r2, r1
 800453c:	b2d2      	uxtb	r2, r2
 800453e:	4610      	mov	r0, r2
 8004540:	4798      	blx	r3

      for(i = 0; i < len; i++)
 8004542:	2300      	movs	r3, #0
 8004544:	82fb      	strh	r3, [r7, #22]
 8004546:	e00a      	b.n	800455e <WIZCHIP_READ_BUF+0x7e>
      {
         pBuf[i] = WIZCHIP.IF.SPI._read_byte(); 
 8004548:	4b1c      	ldr	r3, [pc, #112]	; (80045bc <WIZCHIP_READ_BUF+0xdc>)
 800454a:	69db      	ldr	r3, [r3, #28]
 800454c:	8afa      	ldrh	r2, [r7, #22]
 800454e:	68b9      	ldr	r1, [r7, #8]
 8004550:	188c      	adds	r4, r1, r2
 8004552:	4798      	blx	r3
 8004554:	4603      	mov	r3, r0
 8004556:	7023      	strb	r3, [r4, #0]
      for(i = 0; i < len; i++)
 8004558:	8afb      	ldrh	r3, [r7, #22]
 800455a:	3301      	adds	r3, #1
 800455c:	82fb      	strh	r3, [r7, #22]
 800455e:	8afa      	ldrh	r2, [r7, #22]
 8004560:	88fb      	ldrh	r3, [r7, #6]
 8004562:	429a      	cmp	r2, r3
 8004564:	d3f0      	bcc.n	8004548 <WIZCHIP_READ_BUF+0x68>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004566:	e01e      	b.n	80045a6 <WIZCHIP_READ_BUF+0xc6>
      }
   }           
   else																// burst operation
   {
		spi_data[0] = 0x0F;
 8004568:	230f      	movs	r3, #15
 800456a:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (uint16_t)((AddrSel+i) & 0xFF00) >>  8;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	b29a      	uxth	r2, r3
 8004570:	8afb      	ldrh	r3, [r7, #22]
 8004572:	4413      	add	r3, r2
 8004574:	b29b      	uxth	r3, r3
 8004576:	0a1b      	lsrs	r3, r3, #8
 8004578:	b29b      	uxth	r3, r3
 800457a:	b2db      	uxtb	r3, r3
 800457c:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (uint16_t)((AddrSel+i) & 0x00FF) >>  0;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	b2da      	uxtb	r2, r3
 8004582:	8afb      	ldrh	r3, [r7, #22]
 8004584:	b2db      	uxtb	r3, r3
 8004586:	4413      	add	r3, r2
 8004588:	b2db      	uxtb	r3, r3
 800458a:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800458c:	4b0b      	ldr	r3, [pc, #44]	; (80045bc <WIZCHIP_READ_BUF+0xdc>)
 800458e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004590:	f107 0210 	add.w	r2, r7, #16
 8004594:	2103      	movs	r1, #3
 8004596:	4610      	mov	r0, r2
 8004598:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 800459a:	4b08      	ldr	r3, [pc, #32]	; (80045bc <WIZCHIP_READ_BUF+0xdc>)
 800459c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459e:	88fa      	ldrh	r2, [r7, #6]
 80045a0:	4611      	mov	r1, r2
 80045a2:	68b8      	ldr	r0, [r7, #8]
 80045a4:	4798      	blx	r3
   
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100S. !!!!"
#endif

   WIZCHIP.CS._deselect();    //M20150601 : Moved Here.
 80045a6:	4b05      	ldr	r3, [pc, #20]	; (80045bc <WIZCHIP_READ_BUF+0xdc>)
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80045ac:	4b03      	ldr	r3, [pc, #12]	; (80045bc <WIZCHIP_READ_BUF+0xdc>)
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	4798      	blx	r3
}
 80045b2:	bf00      	nop
 80045b4:	371c      	adds	r7, #28
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd90      	pop	{r4, r7, pc}
 80045ba:	bf00      	nop
 80045bc:	20000024 	.word	0x20000024

080045c0 <wiz_mdio_write>:
  ptr += len;
  setSn_RX_RD(sn,ptr);
}

void wiz_mdio_write(uint8_t PHYMDIO_regadr, uint16_t var)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	4603      	mov	r3, r0
 80045c8:	460a      	mov	r2, r1
 80045ca:	71fb      	strb	r3, [r7, #7]
 80045cc:	4613      	mov	r3, r2
 80045ce:	80bb      	strh	r3, [r7, #4]
    WIZCHIP_WRITE(PHYRAR,PHYMDIO_regadr);
 80045d0:	79fb      	ldrb	r3, [r7, #7]
 80045d2:	4619      	mov	r1, r3
 80045d4:	203f      	movs	r0, #63	; 0x3f
 80045d6:	f7ff fe8b 	bl	80042f0 <WIZCHIP_WRITE>
    WIZCHIP_WRITE(PHYDIR, (uint8_t)(var >> 8));
 80045da:	88bb      	ldrh	r3, [r7, #4]
 80045dc:	0a1b      	lsrs	r3, r3, #8
 80045de:	b29b      	uxth	r3, r3
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	4619      	mov	r1, r3
 80045e4:	2040      	movs	r0, #64	; 0x40
 80045e6:	f7ff fe83 	bl	80042f0 <WIZCHIP_WRITE>
    WIZCHIP_WRITE(PHYDIR+1, (uint8_t)(var));
 80045ea:	88bb      	ldrh	r3, [r7, #4]
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	4619      	mov	r1, r3
 80045f0:	2041      	movs	r0, #65	; 0x41
 80045f2:	f7ff fe7d 	bl	80042f0 <WIZCHIP_WRITE>
    WIZCHIP_WRITE(PHYACR, PHYACR_WRITE);
 80045f6:	2101      	movs	r1, #1
 80045f8:	2044      	movs	r0, #68	; 0x44
 80045fa:	f7ff fe79 	bl	80042f0 <WIZCHIP_WRITE>
    while(WIZCHIP_READ(PHYACR));  //wait for command complete
 80045fe:	bf00      	nop
 8004600:	2044      	movs	r0, #68	; 0x44
 8004602:	f7ff febb 	bl	800437c <WIZCHIP_READ>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d1f9      	bne.n	8004600 <wiz_mdio_write+0x40>
}
 800460c:	bf00      	nop
 800460e:	bf00      	nop
 8004610:	3708      	adds	r7, #8
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <wiz_mdio_read>:

uint16_t wiz_mdio_read(uint8_t PHYMDIO_regadr)
{
 8004616:	b590      	push	{r4, r7, lr}
 8004618:	b083      	sub	sp, #12
 800461a:	af00      	add	r7, sp, #0
 800461c:	4603      	mov	r3, r0
 800461e:	71fb      	strb	r3, [r7, #7]
    WIZCHIP_WRITE(PHYRAR,PHYMDIO_regadr);
 8004620:	79fb      	ldrb	r3, [r7, #7]
 8004622:	4619      	mov	r1, r3
 8004624:	203f      	movs	r0, #63	; 0x3f
 8004626:	f7ff fe63 	bl	80042f0 <WIZCHIP_WRITE>
    WIZCHIP_WRITE(PHYACR, PHYACR_READ);
 800462a:	2102      	movs	r1, #2
 800462c:	2044      	movs	r0, #68	; 0x44
 800462e:	f7ff fe5f 	bl	80042f0 <WIZCHIP_WRITE>
    while(WIZCHIP_READ(PHYACR));  //wait for command complete
 8004632:	bf00      	nop
 8004634:	2044      	movs	r0, #68	; 0x44
 8004636:	f7ff fea1 	bl	800437c <WIZCHIP_READ>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1f9      	bne.n	8004634 <wiz_mdio_read+0x1e>
    return ((uint16_t)WIZCHIP_READ(PHYDOR) << 8) | WIZCHIP_READ(PHYDOR+1);
 8004640:	2042      	movs	r0, #66	; 0x42
 8004642:	f7ff fe9b 	bl	800437c <WIZCHIP_READ>
 8004646:	4603      	mov	r3, r0
 8004648:	021b      	lsls	r3, r3, #8
 800464a:	b21c      	sxth	r4, r3
 800464c:	2043      	movs	r0, #67	; 0x43
 800464e:	f7ff fe95 	bl	800437c <WIZCHIP_READ>
 8004652:	4603      	mov	r3, r0
 8004654:	b21b      	sxth	r3, r3
 8004656:	4323      	orrs	r3, r4
 8004658:	b21b      	sxth	r3, r3
 800465a:	b29b      	uxth	r3, r3
}
 800465c:	4618      	mov	r0, r3
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	bd90      	pop	{r4, r7, pc}

08004664 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8004664:	b480      	push	{r7}
 8004666:	af00      	add	r7, sp, #0
 8004668:	bf00      	nop
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr

08004672 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8004672:	b480      	push	{r7}
 8004674:	af00      	add	r7, sp, #0
 8004676:	bf00      	nop
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8004680:	b480      	push	{r7}
 8004682:	af00      	add	r7, sp, #0
 8004684:	bf00      	nop
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr

0800468e <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 800468e:	b480      	push	{r7}
 8004690:	af00      	add	r7, sp, #0
 8004692:	bf00      	nop
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	4618      	mov	r0, r3
 80046ac:	370c      	adds	r7, #12
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr

080046b6 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 80046b6:	b480      	push	{r7}
 80046b8:	b083      	sub	sp, #12
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
 80046be:	460b      	mov	r3, r1
 80046c0:	70fb      	strb	r3, [r7, #3]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	78fa      	ldrb	r2, [r7, #3]
 80046c6:	701a      	strb	r2, [r3, #0]
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 80046d4:	b480      	push	{r7}
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	2300      	movs	r3, #0
 80046da:	4618      	mov	r0, r3
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	4603      	mov	r3, r0
 80046ec:	71fb      	strb	r3, [r7, #7]
 80046ee:	bf00      	nop
 80046f0:	370c      	adds	r7, #12
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
	...

080046fc <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8004706:	bf00      	nop
 8004708:	4b0f      	ldr	r3, [pc, #60]	; (8004748 <reg_wizchip_spi_cbfunc+0x4c>)
 800470a:	881b      	ldrh	r3, [r3, #0]
 800470c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004710:	2b00      	cmp	r3, #0
 8004712:	d0f9      	beq.n	8004708 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d002      	beq.n	8004720 <reg_wizchip_spi_cbfunc+0x24>
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d106      	bne.n	800472e <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8004720:	4b09      	ldr	r3, [pc, #36]	; (8004748 <reg_wizchip_spi_cbfunc+0x4c>)
 8004722:	4a0a      	ldr	r2, [pc, #40]	; (800474c <reg_wizchip_spi_cbfunc+0x50>)
 8004724:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8004726:	4b08      	ldr	r3, [pc, #32]	; (8004748 <reg_wizchip_spi_cbfunc+0x4c>)
 8004728:	4a09      	ldr	r2, [pc, #36]	; (8004750 <reg_wizchip_spi_cbfunc+0x54>)
 800472a:	621a      	str	r2, [r3, #32]
 800472c:	e006      	b.n	800473c <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 800472e:	4a06      	ldr	r2, [pc, #24]	; (8004748 <reg_wizchip_spi_cbfunc+0x4c>)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8004734:	4a04      	ldr	r2, [pc, #16]	; (8004748 <reg_wizchip_spi_cbfunc+0x4c>)
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	6213      	str	r3, [r2, #32]
   }
}
 800473a:	bf00      	nop
 800473c:	bf00      	nop
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr
 8004748:	20000024 	.word	0x20000024
 800474c:	080046d5 	.word	0x080046d5
 8004750:	080046e5 	.word	0x080046e5

08004754 <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b086      	sub	sp, #24
 8004758:	af00      	add	r7, sp, #0
 800475a:	4603      	mov	r3, r0
 800475c:	6039      	str	r1, [r7, #0]
 800475e:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8004760:	2300      	movs	r3, #0
 8004762:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8004764:	2300      	movs	r3, #0
 8004766:	60fb      	str	r3, [r7, #12]
 8004768:	2300      	movs	r3, #0
 800476a:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 800476c:	79fb      	ldrb	r3, [r7, #7]
 800476e:	2b0f      	cmp	r3, #15
 8004770:	f200 80a1 	bhi.w	80048b6 <ctlwizchip+0x162>
 8004774:	a201      	add	r2, pc, #4	; (adr r2, 800477c <ctlwizchip+0x28>)
 8004776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800477a:	bf00      	nop
 800477c:	080047bd 	.word	0x080047bd
 8004780:	080047c3 	.word	0x080047c3
 8004784:	080047ef 	.word	0x080047ef
 8004788:	080047e3 	.word	0x080047e3
 800478c:	080047fd 	.word	0x080047fd
 8004790:	08004809 	.word	0x08004809
 8004794:	080048b7 	.word	0x080048b7
 8004798:	080048b7 	.word	0x080048b7
 800479c:	08004817 	.word	0x08004817
 80047a0:	0800485b 	.word	0x0800485b
 80047a4:	08004861 	.word	0x08004861
 80047a8:	08004869 	.word	0x08004869
 80047ac:	080048bd 	.word	0x080048bd
 80047b0:	08004871 	.word	0x08004871
 80047b4:	0800487f 	.word	0x0800487f
 80047b8:	0800489b 	.word	0x0800489b
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 80047bc:	f000 f886 	bl	80048cc <wizchip_sw_reset>
         break;
 80047c0:	e07d      	b.n	80048be <ctlwizchip+0x16a>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d004      	beq.n	80047d2 <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	3304      	adds	r3, #4
 80047d0:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	4611      	mov	r1, r2
 80047d8:	4618      	mov	r0, r3
 80047da:	f000 f8bb 	bl	8004954 <wizchip_init>
 80047de:	4603      	mov	r3, r0
 80047e0:	e06e      	b.n	80048c0 <ctlwizchip+0x16c>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	881b      	ldrh	r3, [r3, #0]
 80047e6:	4618      	mov	r0, r3
 80047e8:	f000 f996 	bl	8004b18 <wizchip_clrinterrupt>
         break;
 80047ec:	e067      	b.n	80048be <ctlwizchip+0x16a>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 80047ee:	f000 f9b6 	bl	8004b5e <wizchip_getinterrupt>
 80047f2:	4603      	mov	r3, r0
 80047f4:	461a      	mov	r2, r3
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	801a      	strh	r2, [r3, #0]
         break;
 80047fa:	e060      	b.n	80048be <ctlwizchip+0x16a>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	881b      	ldrh	r3, [r3, #0]
 8004800:	4618      	mov	r0, r3
 8004802:	f000 f9d0 	bl	8004ba6 <wizchip_setinterruptmask>
         break;         
 8004806:	e05a      	b.n	80048be <ctlwizchip+0x16a>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8004808:	f000 f9ed 	bl	8004be6 <wizchip_getinterruptmask>
 800480c:	4603      	mov	r3, r0
 800480e:	461a      	mov	r2, r3
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	801a      	strh	r2, [r3, #0]
         break;
 8004814:	e053      	b.n	80048be <ctlwizchip+0x16a>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
         break;
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8004816:	4b2c      	ldr	r3, [pc, #176]	; (80048c8 <ctlwizchip+0x174>)
 8004818:	789a      	ldrb	r2, [r3, #2]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	3301      	adds	r3, #1
 8004822:	4a29      	ldr	r2, [pc, #164]	; (80048c8 <ctlwizchip+0x174>)
 8004824:	78d2      	ldrb	r2, [r2, #3]
 8004826:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	3302      	adds	r3, #2
 800482c:	4a26      	ldr	r2, [pc, #152]	; (80048c8 <ctlwizchip+0x174>)
 800482e:	7912      	ldrb	r2, [r2, #4]
 8004830:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	3303      	adds	r3, #3
 8004836:	4a24      	ldr	r2, [pc, #144]	; (80048c8 <ctlwizchip+0x174>)
 8004838:	7952      	ldrb	r2, [r2, #5]
 800483a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	3304      	adds	r3, #4
 8004840:	4a21      	ldr	r2, [pc, #132]	; (80048c8 <ctlwizchip+0x174>)
 8004842:	7992      	ldrb	r2, [r2, #6]
 8004844:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	3305      	adds	r3, #5
 800484a:	4a1f      	ldr	r2, [pc, #124]	; (80048c8 <ctlwizchip+0x174>)
 800484c:	79d2      	ldrb	r2, [r2, #7]
 800484e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	3306      	adds	r3, #6
 8004854:	2200      	movs	r2, #0
 8004856:	701a      	strb	r2, [r3, #0]
         break;
 8004858:	e031      	b.n	80048be <ctlwizchip+0x16a>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 800485a:	f000 fa0c 	bl	8004c76 <wizphy_reset>
         break;
 800485e:	e02e      	b.n	80048be <ctlwizchip+0x16a>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8004860:	6838      	ldr	r0, [r7, #0]
 8004862:	f000 fa28 	bl	8004cb6 <wizphy_setphyconf>
         break;
 8004866:	e02a      	b.n	80048be <ctlwizchip+0x16a>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8004868:	6838      	ldr	r0, [r7, #0]
 800486a:	f000 fa5d 	bl	8004d28 <wizphy_getphyconf>
         break;
 800486e:	e026      	b.n	80048be <ctlwizchip+0x16a>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	4618      	mov	r0, r3
 8004876:	f000 fa8d 	bl	8004d94 <wizphy_setphypmode>
 800487a:	4603      	mov	r3, r0
 800487c:	e020      	b.n	80048c0 <ctlwizchip+0x16c>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 800487e:	f000 f9eb 	bl	8004c58 <wizphy_getphypmode>
 8004882:	4603      	mov	r3, r0
 8004884:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8004886:	7dfb      	ldrb	r3, [r7, #23]
 8004888:	2bff      	cmp	r3, #255	; 0xff
 800488a:	d102      	bne.n	8004892 <ctlwizchip+0x13e>
 800488c:	f04f 33ff 	mov.w	r3, #4294967295
 8004890:	e016      	b.n	80048c0 <ctlwizchip+0x16c>
         *(uint8_t*)arg = tmp;
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	7dfa      	ldrb	r2, [r7, #23]
 8004896:	701a      	strb	r2, [r3, #0]
         break;
 8004898:	e011      	b.n	80048be <ctlwizchip+0x16a>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 800489a:	f000 f9c8 	bl	8004c2e <wizphy_getphylink>
 800489e:	4603      	mov	r3, r0
 80048a0:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 80048a2:	7dfb      	ldrb	r3, [r7, #23]
 80048a4:	2bff      	cmp	r3, #255	; 0xff
 80048a6:	d102      	bne.n	80048ae <ctlwizchip+0x15a>
 80048a8:	f04f 33ff 	mov.w	r3, #4294967295
 80048ac:	e008      	b.n	80048c0 <ctlwizchip+0x16c>
         *(uint8_t*)arg = tmp;
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	7dfa      	ldrb	r2, [r7, #23]
 80048b2:	701a      	strb	r2, [r3, #0]
         break;
 80048b4:	e003      	b.n	80048be <ctlwizchip+0x16a>
   #endif      
      default:
         return -1;
 80048b6:	f04f 33ff 	mov.w	r3, #4294967295
 80048ba:	e001      	b.n	80048c0 <ctlwizchip+0x16c>
         break;
 80048bc:	bf00      	nop
   }
   return 0;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3718      	adds	r7, #24
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	20000024 	.word	0x20000024

080048cc <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b086      	sub	sp, #24
 80048d0:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 80048d2:	1d3b      	adds	r3, r7, #4
 80048d4:	2206      	movs	r2, #6
 80048d6:	4619      	mov	r1, r3
 80048d8:	2009      	movs	r0, #9
 80048da:	f7ff fe01 	bl	80044e0 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 80048de:	f107 0314 	add.w	r3, r7, #20
 80048e2:	2204      	movs	r2, #4
 80048e4:	4619      	mov	r1, r3
 80048e6:	2001      	movs	r0, #1
 80048e8:	f7ff fdfa 	bl	80044e0 <WIZCHIP_READ_BUF>
 80048ec:	f107 0310 	add.w	r3, r7, #16
 80048f0:	2204      	movs	r2, #4
 80048f2:	4619      	mov	r1, r3
 80048f4:	2005      	movs	r0, #5
 80048f6:	f7ff fdf3 	bl	80044e0 <WIZCHIP_READ_BUF>
 80048fa:	f107 030c 	add.w	r3, r7, #12
 80048fe:	2204      	movs	r2, #4
 8004900:	4619      	mov	r1, r3
 8004902:	200f      	movs	r0, #15
 8004904:	f7ff fdec 	bl	80044e0 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8004908:	2180      	movs	r1, #128	; 0x80
 800490a:	2000      	movs	r0, #0
 800490c:	f7ff fcf0 	bl	80042f0 <WIZCHIP_WRITE>
   getMR(); // for delay
 8004910:	2000      	movs	r0, #0
 8004912:	f7ff fd33 	bl	800437c <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8004916:	1d3b      	adds	r3, r7, #4
 8004918:	2206      	movs	r2, #6
 800491a:	4619      	mov	r1, r3
 800491c:	2009      	movs	r0, #9
 800491e:	f7ff fd73 	bl	8004408 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8004922:	f107 0314 	add.w	r3, r7, #20
 8004926:	2204      	movs	r2, #4
 8004928:	4619      	mov	r1, r3
 800492a:	2001      	movs	r0, #1
 800492c:	f7ff fd6c 	bl	8004408 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8004930:	f107 0310 	add.w	r3, r7, #16
 8004934:	2204      	movs	r2, #4
 8004936:	4619      	mov	r1, r3
 8004938:	2005      	movs	r0, #5
 800493a:	f7ff fd65 	bl	8004408 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 800493e:	f107 030c 	add.w	r3, r7, #12
 8004942:	2204      	movs	r2, #4
 8004944:	4619      	mov	r1, r3
 8004946:	200f      	movs	r0, #15
 8004948:	f7ff fd5e 	bl	8004408 <WIZCHIP_WRITE_BUF>
}
 800494c:	bf00      	nop
 800494e:	3718      	adds	r7, #24
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 800495e:	2300      	movs	r3, #0
 8004960:	737b      	strb	r3, [r7, #13]
   wizchip_sw_reset();
 8004962:	f7ff ffb3 	bl	80048cc <wizchip_sw_reset>
   if(txsize)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d066      	beq.n	8004a3a <wizchip_init+0xe6>
   {
      tmp = 0;
 800496c:	2300      	movs	r3, #0
 800496e:	737b      	strb	r3, [r7, #13]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004970:	2300      	movs	r3, #0
 8004972:	73fb      	strb	r3, [r7, #15]
 8004974:	e015      	b.n	80049a2 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8004976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	4413      	add	r3, r2
 800497e:	781a      	ldrb	r2, [r3, #0]
 8004980:	7b7b      	ldrb	r3, [r7, #13]
 8004982:	4413      	add	r3, r2
 8004984:	b2db      	uxtb	r3, r3
 8004986:	737b      	strb	r3, [r7, #13]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
 8004988:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800498c:	2b08      	cmp	r3, #8
 800498e:	dd02      	ble.n	8004996 <wizchip_init+0x42>
 8004990:	f04f 33ff 	mov.w	r3, #4294967295
 8004994:	e0bc      	b.n	8004b10 <wizchip_init+0x1bc>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004996:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800499a:	b2db      	uxtb	r3, r3
 800499c:	3301      	adds	r3, #1
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	73fb      	strb	r3, [r7, #15]
 80049a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049a6:	2b03      	cmp	r3, #3
 80049a8:	dde5      	ble.n	8004976 <wizchip_init+0x22>
#else
			if(tmp > 16) return -1;
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80049aa:	2300      	movs	r3, #0
 80049ac:	73fb      	strb	r3, [r7, #15]
 80049ae:	e040      	b.n	8004a32 <wizchip_init+0xde>
		{
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
 80049b0:	2300      	movs	r3, #0
 80049b2:	73bb      	strb	r3, [r7, #14]
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
 80049b4:	e005      	b.n	80049c2 <wizchip_init+0x6e>
 80049b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	3301      	adds	r3, #1
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	73bb      	strb	r3, [r7, #14]
 80049c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	4413      	add	r3, r2
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	461a      	mov	r2, r3
 80049ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80049d2:	fa42 f303 	asr.w	r3, r2, r3
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d006      	beq.n	80049e8 <wizchip_init+0x94>
 80049da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	4413      	add	r3, r2
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1e6      	bne.n	80049b6 <wizchip_init+0x62>
			setSn_TXBUF_SIZE(i, j);
 80049e8:	201b      	movs	r0, #27
 80049ea:	f7ff fcc7 	bl	800437c <WIZCHIP_READ>
 80049ee:	4603      	mov	r3, r0
 80049f0:	b25a      	sxtb	r2, r3
 80049f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049f6:	005b      	lsls	r3, r3, #1
 80049f8:	2103      	movs	r1, #3
 80049fa:	fa01 f303 	lsl.w	r3, r1, r3
 80049fe:	b25b      	sxtb	r3, r3
 8004a00:	43db      	mvns	r3, r3
 8004a02:	b25b      	sxtb	r3, r3
 8004a04:	4013      	ands	r3, r2
 8004a06:	b25a      	sxtb	r2, r3
 8004a08:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8004a0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a10:	005b      	lsls	r3, r3, #1
 8004a12:	fa01 f303 	lsl.w	r3, r1, r3
 8004a16:	b25b      	sxtb	r3, r3
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	b25b      	sxtb	r3, r3
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	4619      	mov	r1, r3
 8004a20:	201b      	movs	r0, #27
 8004a22:	f7ff fc65 	bl	80042f0 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	73fb      	strb	r3, [r7, #15]
 8004a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a36:	2b03      	cmp	r3, #3
 8004a38:	ddba      	ble.n	80049b0 <wizchip_init+0x5c>
			setSn_TXBUF_SIZE(i, txsize[i]);
#endif
		}	
   }

   if(rxsize)
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d066      	beq.n	8004b0e <wizchip_init+0x1ba>
   {
      tmp = 0;
 8004a40:	2300      	movs	r3, #0
 8004a42:	737b      	strb	r3, [r7, #13]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004a44:	2300      	movs	r3, #0
 8004a46:	73fb      	strb	r3, [r7, #15]
 8004a48:	e015      	b.n	8004a76 <wizchip_init+0x122>
		{
			tmp += rxsize[i];
 8004a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a4e:	683a      	ldr	r2, [r7, #0]
 8004a50:	4413      	add	r3, r2
 8004a52:	781a      	ldrb	r2, [r3, #0]
 8004a54:	7b7b      	ldrb	r3, [r7, #13]
 8004a56:	4413      	add	r3, r2
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	737b      	strb	r3, [r7, #13]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
 8004a5c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004a60:	2b08      	cmp	r3, #8
 8004a62:	dd02      	ble.n	8004a6a <wizchip_init+0x116>
 8004a64:	f04f 33ff 	mov.w	r3, #4294967295
 8004a68:	e052      	b.n	8004b10 <wizchip_init+0x1bc>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	3301      	adds	r3, #1
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	73fb      	strb	r3, [r7, #15]
 8004a76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a7a:	2b03      	cmp	r3, #3
 8004a7c:	dde5      	ble.n	8004a4a <wizchip_init+0xf6>
#else
			if(tmp > 16) return -1;
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004a7e:	2300      	movs	r3, #0
 8004a80:	73fb      	strb	r3, [r7, #15]
 8004a82:	e040      	b.n	8004b06 <wizchip_init+0x1b2>
		{
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
 8004a84:	2300      	movs	r3, #0
 8004a86:	73bb      	strb	r3, [r7, #14]
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
 8004a88:	e005      	b.n	8004a96 <wizchip_init+0x142>
 8004a8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	3301      	adds	r3, #1
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	73bb      	strb	r3, [r7, #14]
 8004a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a9a:	683a      	ldr	r2, [r7, #0]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004aa6:	fa42 f303 	asr.w	r3, r2, r3
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d006      	beq.n	8004abc <wizchip_init+0x168>
 8004aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1e6      	bne.n	8004a8a <wizchip_init+0x136>
			setSn_RXBUF_SIZE(i, j);
 8004abc:	201a      	movs	r0, #26
 8004abe:	f7ff fc5d 	bl	800437c <WIZCHIP_READ>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	b25a      	sxtb	r2, r3
 8004ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004aca:	005b      	lsls	r3, r3, #1
 8004acc:	2103      	movs	r1, #3
 8004ace:	fa01 f303 	lsl.w	r3, r1, r3
 8004ad2:	b25b      	sxtb	r3, r3
 8004ad4:	43db      	mvns	r3, r3
 8004ad6:	b25b      	sxtb	r3, r3
 8004ad8:	4013      	ands	r3, r2
 8004ada:	b25a      	sxtb	r2, r3
 8004adc:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8004ae0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ae4:	005b      	lsls	r3, r3, #1
 8004ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8004aea:	b25b      	sxtb	r3, r3
 8004aec:	4313      	orrs	r3, r2
 8004aee:	b25b      	sxtb	r3, r3
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	4619      	mov	r1, r3
 8004af4:	201a      	movs	r0, #26
 8004af6:	f7ff fbfb 	bl	80042f0 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	3301      	adds	r3, #1
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	73fb      	strb	r3, [r7, #15]
 8004b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b0a:	2b03      	cmp	r3, #3
 8004b0c:	ddba      	ble.n	8004a84 <wizchip_init+0x130>
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
#endif
		}
   }
   return 0;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	4603      	mov	r3, r0
 8004b20:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8004b22:	88fb      	ldrh	r3, [r7, #6]
 8004b24:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8004b26:	88fb      	ldrh	r3, [r7, #6]
 8004b28:	0a1b      	lsrs	r3, r3, #8
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5500
   ir |= (1<<4); // IK_WOL
 8004b2e:	7bfb      	ldrb	r3, [r7, #15]
 8004b30:	f043 0310 	orr.w	r3, r3, #16
 8004b34:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ == W5200
   ir |= (1 << 6);
#endif
   
#if _WIZCHIP_ < W5200
   sir &= 0x0F;
 8004b36:	7bbb      	ldrb	r3, [r7, #14]
 8004b38:	f003 030f 	and.w	r3, r3, #15
 8004b3c:	73bb      	strb	r3, [r7, #14]
#endif

#if _WIZCHIP_ <= W5100S
   ir |= sir;
 8004b3e:	7bfa      	ldrb	r2, [r7, #15]
 8004b40:	7bbb      	ldrb	r3, [r7, #14]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	73fb      	strb	r3, [r7, #15]
   setIR(ir);
 8004b46:	7bfb      	ldrb	r3, [r7, #15]
 8004b48:	f023 031f 	bic.w	r3, r3, #31
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	4619      	mov	r1, r3
 8004b50:	2015      	movs	r0, #21
 8004b52:	f7ff fbcd 	bl	80042f0 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
   }

#endif   
}
 8004b56:	bf00      	nop
 8004b58:	3710      	adds	r7, #16
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}

08004b5e <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b082      	sub	sp, #8
 8004b62:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8004b64:	2300      	movs	r3, #0
 8004b66:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ <= W5100S
   ir = getIR();
 8004b70:	2015      	movs	r0, #21
 8004b72:	f7ff fc03 	bl	800437c <WIZCHIP_READ>
 8004b76:	4603      	mov	r3, r0
 8004b78:	71fb      	strb	r3, [r7, #7]
   sir = ir & 0x0F;
 8004b7a:	79fb      	ldrb	r3, [r7, #7]
 8004b7c:	f003 030f 	and.w	r3, r3, #15
 8004b80:	71bb      	strb	r3, [r7, #6]
#endif         

//M20150601 : For Integrating with W5300
//#if _WIZCHIP_ < W5500
#if _WIZCHIP_ < W5200
   ir &= ~(1<<4); // IK_WOL
 8004b82:	79fb      	ldrb	r3, [r7, #7]
 8004b84:	f023 0310 	bic.w	r3, r3, #16
 8004b88:	71fb      	strb	r3, [r7, #7]
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8004b8a:	79bb      	ldrb	r3, [r7, #6]
 8004b8c:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8004b8e:	88bb      	ldrh	r3, [r7, #4]
 8004b90:	021b      	lsls	r3, r3, #8
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	79fb      	ldrb	r3, [r7, #7]
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	4413      	add	r3, r2
 8004b9a:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8004b9c:	88bb      	ldrh	r3, [r7, #4]
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3708      	adds	r7, #8
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b084      	sub	sp, #16
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	4603      	mov	r3, r0
 8004bae:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8004bb0:	88fb      	ldrh	r3, [r7, #6]
 8004bb2:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8004bb4:	88fb      	ldrh	r3, [r7, #6]
 8004bb6:	0a1b      	lsrs	r3, r3, #8
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5500
   imr &= ~(1<<4); // IK_WOL
 8004bbc:	7bfb      	ldrb	r3, [r7, #15]
 8004bbe:	f023 0310 	bic.w	r3, r3, #16
 8004bc2:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);
#endif
   
#if _WIZCHIP_ < W5200
   simr &= 0x0F;
 8004bc4:	7bbb      	ldrb	r3, [r7, #14]
 8004bc6:	f003 030f 	and.w	r3, r3, #15
 8004bca:	73bb      	strb	r3, [r7, #14]
   imr |= simr;
 8004bcc:	7bfa      	ldrb	r2, [r7, #15]
 8004bce:	7bbb      	ldrb	r3, [r7, #14]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	73fb      	strb	r3, [r7, #15]
   setIMR(imr);
 8004bd4:	7bfb      	ldrb	r3, [r7, #15]
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	2016      	movs	r0, #22
 8004bda:	f7ff fb89 	bl	80042f0 <WIZCHIP_WRITE>
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
   setSIMR(simr);
#endif   
}
 8004bde:	bf00      	nop
 8004be0:	3710      	adds	r7, #16
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b082      	sub	sp, #8
 8004bea:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8004bec:	2300      	movs	r3, #0
 8004bee:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ < W5200
   imr  = getIMR();
 8004bf8:	2016      	movs	r0, #22
 8004bfa:	f7ff fbbf 	bl	800437c <WIZCHIP_READ>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	71fb      	strb	r3, [r7, #7]
   simr = imr & 0x0F;
 8004c02:	79fb      	ldrb	r3, [r7, #7]
 8004c04:	f003 030f 	and.w	r3, r3, #15
 8004c08:	71bb      	strb	r3, [r7, #6]
   imr  = getIMR();
   simr = getSIMR();
#endif         

#if _WIZCHIP_ < W5500
   imr &= ~(1<<4); // IK_WOL
 8004c0a:	79fb      	ldrb	r3, [r7, #7]
 8004c0c:	f023 0310 	bic.w	r3, r3, #16
 8004c10:	71fb      	strb	r3, [r7, #7]
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8004c12:	79bb      	ldrb	r3, [r7, #6]
 8004c14:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8004c16:	88bb      	ldrh	r3, [r7, #4]
 8004c18:	021b      	lsls	r3, r3, #8
 8004c1a:	b29a      	uxth	r2, r3
 8004c1c:	79fb      	ldrb	r3, [r7, #7]
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	4413      	add	r3, r2
 8004c22:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8004c24:	88bb      	ldrh	r3, [r7, #4]
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3708      	adds	r7, #8
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b082      	sub	sp, #8
 8004c32:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8004c34:	2300      	movs	r3, #0
 8004c36:	71fb      	strb	r3, [r7, #7]
#if _WIZCHIP_ == W5100S
   if(getPHYSR() & PHYSR_LNK)
 8004c38:	203c      	movs	r0, #60	; 0x3c
 8004c3a:	f7ff fb9f 	bl	800437c <WIZCHIP_READ>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	f003 0301 	and.w	r3, r3, #1
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d001      	beq.n	8004c4c <wizphy_getphylink+0x1e>
	   tmp = PHY_LINK_ON;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	71fb      	strb	r3, [r7, #7]
      tmp = PHY_LINK_ON;

#else
   tmp = -1;
#endif
   return tmp;
 8004c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3708      	adds	r7, #8
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	71fb      	strb	r3, [r7, #7]
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
         tmp = PHY_POWER_DOWN;
      else 
         tmp = PHY_POWER_NORM;
   #else
      tmp = -1;
 8004c62:	23ff      	movs	r3, #255	; 0xff
 8004c64:	71fb      	strb	r3, [r7, #7]
   #endif
   return tmp;
 8004c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	370c      	adds	r7, #12
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr

08004c76 <wizphy_reset>:
#endif

#if _WIZCHIP_ == W5100S
void wizphy_reset(void)
{
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b082      	sub	sp, #8
 8004c7a:	af00      	add	r7, sp, #0
	uint16_t tmp = wiz_mdio_read(PHYMDIO_BMCR);
 8004c7c:	2000      	movs	r0, #0
 8004c7e:	f7ff fcca 	bl	8004616 <wiz_mdio_read>
 8004c82:	4603      	mov	r3, r0
 8004c84:	80fb      	strh	r3, [r7, #6]
	tmp |= BMCR_RESET;
 8004c86:	88fb      	ldrh	r3, [r7, #6]
 8004c88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c90:	80fb      	strh	r3, [r7, #6]
	wiz_mdio_write(PHYMDIO_BMCR, tmp);
 8004c92:	88fb      	ldrh	r3, [r7, #6]
 8004c94:	4619      	mov	r1, r3
 8004c96:	2000      	movs	r0, #0
 8004c98:	f7ff fc92 	bl	80045c0 <wiz_mdio_write>
	while(wiz_mdio_read(PHYMDIO_BMCR)&BMCR_RESET){}
 8004c9c:	bf00      	nop
 8004c9e:	2000      	movs	r0, #0
 8004ca0:	f7ff fcb9 	bl	8004616 <wiz_mdio_read>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	b21b      	sxth	r3, r3
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	dbf8      	blt.n	8004c9e <wizphy_reset+0x28>
}
 8004cac:	bf00      	nop
 8004cae:	bf00      	nop
 8004cb0:	3708      	adds	r7, #8
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}

08004cb6 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b084      	sub	sp, #16
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
   uint16_t tmp = wiz_mdio_read(PHYMDIO_BMCR);
 8004cbe:	2000      	movs	r0, #0
 8004cc0:	f7ff fca9 	bl	8004616 <wiz_mdio_read>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	81fb      	strh	r3, [r7, #14]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	785b      	ldrb	r3, [r3, #1]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d104      	bne.n	8004cda <wizphy_setphyconf+0x24>
      tmp |= BMCR_AUTONEGO;
 8004cd0:	89fb      	ldrh	r3, [r7, #14]
 8004cd2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004cd6:	81fb      	strh	r3, [r7, #14]
 8004cd8:	e01d      	b.n	8004d16 <wizphy_setphyconf+0x60>
   else
   {
	  tmp &= ~BMCR_AUTONEGO;
 8004cda:	89fb      	ldrh	r3, [r7, #14]
 8004cdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ce0:	81fb      	strh	r3, [r7, #14]
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	78db      	ldrb	r3, [r3, #3]
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d104      	bne.n	8004cf4 <wizphy_setphyconf+0x3e>
      {
    	  tmp |= BMCR_DUP;
 8004cea:	89fb      	ldrh	r3, [r7, #14]
 8004cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cf0:	81fb      	strh	r3, [r7, #14]
 8004cf2:	e003      	b.n	8004cfc <wizphy_setphyconf+0x46>
      }
      else
      {
    	  tmp &= ~BMCR_DUP;
 8004cf4:	89fb      	ldrh	r3, [r7, #14]
 8004cf6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cfa:	81fb      	strh	r3, [r7, #14]
      }
      if(phyconf->speed == PHY_SPEED_100)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	789b      	ldrb	r3, [r3, #2]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d104      	bne.n	8004d0e <wizphy_setphyconf+0x58>
      {
    	  tmp |= BMCR_SPEED;
 8004d04:	89fb      	ldrh	r3, [r7, #14]
 8004d06:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004d0a:	81fb      	strh	r3, [r7, #14]
 8004d0c:	e003      	b.n	8004d16 <wizphy_setphyconf+0x60>
      }
      else
      {
    	  tmp &= ~BMCR_SPEED;
 8004d0e:	89fb      	ldrh	r3, [r7, #14]
 8004d10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d14:	81fb      	strh	r3, [r7, #14]
      }
   }
   wiz_mdio_write(PHYMDIO_BMCR, tmp);
 8004d16:	89fb      	ldrh	r3, [r7, #14]
 8004d18:	4619      	mov	r1, r3
 8004d1a:	2000      	movs	r0, #0
 8004d1c:	f7ff fc50 	bl	80045c0 <wiz_mdio_write>
}
 8004d20:	bf00      	nop
 8004d22:	3710      	adds	r7, #16
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
   uint16_t tmp = 0;
 8004d30:	2300      	movs	r3, #0
 8004d32:	81fb      	strh	r3, [r7, #14]
   tmp = wiz_mdio_read(PHYMDIO_BMCR);
 8004d34:	2000      	movs	r0, #0
 8004d36:	f7ff fc6e 	bl	8004616 <wiz_mdio_read>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	81fb      	strh	r3, [r7, #14]
   phyconf->by   = PHY_CONFBY_SW;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2201      	movs	r2, #1
 8004d42:	701a      	strb	r2, [r3, #0]
   if(tmp & BMCR_AUTONEGO)
 8004d44:	89fb      	ldrh	r3, [r7, #14]
 8004d46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d003      	beq.n	8004d56 <wizphy_getphyconf+0x2e>
   {
	   phyconf->mode = PHY_MODE_AUTONEGO;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2201      	movs	r2, #1
 8004d52:	705a      	strb	r2, [r3, #1]
	   if(tmp&BMCR_DUP) phyconf->duplex = PHY_DUPLEX_FULL;
	   else phyconf->duplex = PHY_DUPLEX_HALF;
	   if(tmp&BMCR_SPEED) phyconf->speed = PHY_SPEED_100;
	   else phyconf->speed = PHY_SPEED_10;
   }
}
 8004d54:	e01a      	b.n	8004d8c <wizphy_getphyconf+0x64>
	   phyconf->mode = PHY_MODE_MANUAL;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	705a      	strb	r2, [r3, #1]
	   if(tmp&BMCR_DUP) phyconf->duplex = PHY_DUPLEX_FULL;
 8004d5c:	89fb      	ldrh	r3, [r7, #14]
 8004d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d003      	beq.n	8004d6e <wizphy_getphyconf+0x46>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	70da      	strb	r2, [r3, #3]
 8004d6c:	e002      	b.n	8004d74 <wizphy_getphyconf+0x4c>
	   else phyconf->duplex = PHY_DUPLEX_HALF;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	70da      	strb	r2, [r3, #3]
	   if(tmp&BMCR_SPEED) phyconf->speed = PHY_SPEED_100;
 8004d74:	89fb      	ldrh	r3, [r7, #14]
 8004d76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d003      	beq.n	8004d86 <wizphy_getphyconf+0x5e>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2201      	movs	r2, #1
 8004d82:	709a      	strb	r2, [r3, #2]
}
 8004d84:	e002      	b.n	8004d8c <wizphy_getphyconf+0x64>
	   else phyconf->speed = PHY_SPEED_10;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	709a      	strb	r2, [r3, #2]
}
 8004d8c:	bf00      	nop
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <wizphy_setphypmode>:

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	71fb      	strb	r3, [r7, #7]
   uint16_t tmp = 0;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	81fb      	strh	r3, [r7, #14]
   tmp = wiz_mdio_read(PHYMDIO_BMCR);
 8004da2:	2000      	movs	r0, #0
 8004da4:	f7ff fc37 	bl	8004616 <wiz_mdio_read>
 8004da8:	4603      	mov	r3, r0
 8004daa:	81fb      	strh	r3, [r7, #14]
   if( pmode == PHY_POWER_DOWN)
 8004dac:	79fb      	ldrb	r3, [r7, #7]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d104      	bne.n	8004dbc <wizphy_setphypmode+0x28>
   {
      tmp |= BMCR_PWDN;
 8004db2:	89fb      	ldrh	r3, [r7, #14]
 8004db4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004db8:	81fb      	strh	r3, [r7, #14]
 8004dba:	e003      	b.n	8004dc4 <wizphy_setphypmode+0x30>
   }
   else
   {
	   tmp &= ~BMCR_PWDN;
 8004dbc:	89fb      	ldrh	r3, [r7, #14]
 8004dbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004dc2:	81fb      	strh	r3, [r7, #14]
   }
   wiz_mdio_write(PHYMDIO_BMCR, tmp);
 8004dc4:	89fb      	ldrh	r3, [r7, #14]
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	2000      	movs	r0, #0
 8004dca:	f7ff fbf9 	bl	80045c0 <wiz_mdio_write>
   tmp = wiz_mdio_read(PHYMDIO_BMCR);
 8004dce:	2000      	movs	r0, #0
 8004dd0:	f7ff fc21 	bl	8004616 <wiz_mdio_read>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	81fb      	strh	r3, [r7, #14]
   if( pmode == PHY_POWER_DOWN)
 8004dd8:	79fb      	ldrb	r3, [r7, #7]
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d106      	bne.n	8004dec <wizphy_setphypmode+0x58>
   {
      if(tmp & BMCR_PWDN) return 0;
 8004dde:	89fb      	ldrh	r3, [r7, #14]
 8004de0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d008      	beq.n	8004dfa <wizphy_setphypmode+0x66>
 8004de8:	2300      	movs	r3, #0
 8004dea:	e008      	b.n	8004dfe <wizphy_setphypmode+0x6a>
   }
   else
   {
      if((tmp & BMCR_PWDN) != BMCR_PWDN) return 0;
 8004dec:	89fb      	ldrh	r3, [r7, #14]
 8004dee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d101      	bne.n	8004dfa <wizphy_setphypmode+0x66>
 8004df6:	2300      	movs	r3, #0
 8004df8:	e001      	b.n	8004dfe <wizphy_setphypmode+0x6a>
   }
   return -1;
 8004dfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3710      	adds	r7, #16
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
	...

08004e08 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2206      	movs	r2, #6
 8004e14:	4619      	mov	r1, r3
 8004e16:	2009      	movs	r0, #9
 8004e18:	f7ff faf6 	bl	8004408 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	330e      	adds	r3, #14
 8004e20:	2204      	movs	r2, #4
 8004e22:	4619      	mov	r1, r3
 8004e24:	2001      	movs	r0, #1
 8004e26:	f7ff faef 	bl	8004408 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	330a      	adds	r3, #10
 8004e2e:	2204      	movs	r2, #4
 8004e30:	4619      	mov	r1, r3
 8004e32:	2005      	movs	r0, #5
 8004e34:	f7ff fae8 	bl	8004408 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	3306      	adds	r3, #6
 8004e3c:	2204      	movs	r2, #4
 8004e3e:	4619      	mov	r1, r3
 8004e40:	200f      	movs	r0, #15
 8004e42:	f7ff fae1 	bl	8004408 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	7c9a      	ldrb	r2, [r3, #18]
 8004e4a:	4b0b      	ldr	r3, [pc, #44]	; (8004e78 <wizchip_setnetinfo+0x70>)
 8004e4c:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	7cda      	ldrb	r2, [r3, #19]
 8004e52:	4b09      	ldr	r3, [pc, #36]	; (8004e78 <wizchip_setnetinfo+0x70>)
 8004e54:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	7d1a      	ldrb	r2, [r3, #20]
 8004e5a:	4b07      	ldr	r3, [pc, #28]	; (8004e78 <wizchip_setnetinfo+0x70>)
 8004e5c:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	7d5a      	ldrb	r2, [r3, #21]
 8004e62:	4b05      	ldr	r3, [pc, #20]	; (8004e78 <wizchip_setnetinfo+0x70>)
 8004e64:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	7d9a      	ldrb	r2, [r3, #22]
 8004e6a:	4b04      	ldr	r3, [pc, #16]	; (8004e7c <wizchip_setnetinfo+0x74>)
 8004e6c:	701a      	strb	r2, [r3, #0]
}
 8004e6e:	bf00      	nop
 8004e70:	3708      	adds	r7, #8
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	20000270 	.word	0x20000270
 8004e7c:	20000274 	.word	0x20000274

08004e80 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2206      	movs	r2, #6
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	2009      	movs	r0, #9
 8004e90:	f7ff fb26 	bl	80044e0 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	330e      	adds	r3, #14
 8004e98:	2204      	movs	r2, #4
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	2001      	movs	r0, #1
 8004e9e:	f7ff fb1f 	bl	80044e0 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	330a      	adds	r3, #10
 8004ea6:	2204      	movs	r2, #4
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	2005      	movs	r0, #5
 8004eac:	f7ff fb18 	bl	80044e0 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	3306      	adds	r3, #6
 8004eb4:	2204      	movs	r2, #4
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	200f      	movs	r0, #15
 8004eba:	f7ff fb11 	bl	80044e0 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8004ebe:	4b0c      	ldr	r3, [pc, #48]	; (8004ef0 <wizchip_getnetinfo+0x70>)
 8004ec0:	781a      	ldrb	r2, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8004ec6:	4b0a      	ldr	r3, [pc, #40]	; (8004ef0 <wizchip_getnetinfo+0x70>)
 8004ec8:	785a      	ldrb	r2, [r3, #1]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8004ece:	4b08      	ldr	r3, [pc, #32]	; (8004ef0 <wizchip_getnetinfo+0x70>)
 8004ed0:	789a      	ldrb	r2, [r3, #2]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8004ed6:	4b06      	ldr	r3, [pc, #24]	; (8004ef0 <wizchip_getnetinfo+0x70>)
 8004ed8:	78da      	ldrb	r2, [r3, #3]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8004ede:	4b05      	ldr	r3, [pc, #20]	; (8004ef4 <wizchip_getnetinfo+0x74>)
 8004ee0:	781a      	ldrb	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	759a      	strb	r2, [r3, #22]
}
 8004ee6:	bf00      	nop
 8004ee8:	3708      	adds	r7, #8
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	20000270 	.word	0x20000270
 8004ef4:	20000274 	.word	0x20000274

08004ef8 <std>:
 8004ef8:	2300      	movs	r3, #0
 8004efa:	b510      	push	{r4, lr}
 8004efc:	4604      	mov	r4, r0
 8004efe:	e9c0 3300 	strd	r3, r3, [r0]
 8004f02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f06:	6083      	str	r3, [r0, #8]
 8004f08:	8181      	strh	r1, [r0, #12]
 8004f0a:	6643      	str	r3, [r0, #100]	; 0x64
 8004f0c:	81c2      	strh	r2, [r0, #14]
 8004f0e:	6183      	str	r3, [r0, #24]
 8004f10:	4619      	mov	r1, r3
 8004f12:	2208      	movs	r2, #8
 8004f14:	305c      	adds	r0, #92	; 0x5c
 8004f16:	f000 f9f7 	bl	8005308 <memset>
 8004f1a:	4b0d      	ldr	r3, [pc, #52]	; (8004f50 <std+0x58>)
 8004f1c:	6263      	str	r3, [r4, #36]	; 0x24
 8004f1e:	4b0d      	ldr	r3, [pc, #52]	; (8004f54 <std+0x5c>)
 8004f20:	62a3      	str	r3, [r4, #40]	; 0x28
 8004f22:	4b0d      	ldr	r3, [pc, #52]	; (8004f58 <std+0x60>)
 8004f24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004f26:	4b0d      	ldr	r3, [pc, #52]	; (8004f5c <std+0x64>)
 8004f28:	6323      	str	r3, [r4, #48]	; 0x30
 8004f2a:	4b0d      	ldr	r3, [pc, #52]	; (8004f60 <std+0x68>)
 8004f2c:	6224      	str	r4, [r4, #32]
 8004f2e:	429c      	cmp	r4, r3
 8004f30:	d006      	beq.n	8004f40 <std+0x48>
 8004f32:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004f36:	4294      	cmp	r4, r2
 8004f38:	d002      	beq.n	8004f40 <std+0x48>
 8004f3a:	33d0      	adds	r3, #208	; 0xd0
 8004f3c:	429c      	cmp	r4, r3
 8004f3e:	d105      	bne.n	8004f4c <std+0x54>
 8004f40:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004f44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f48:	f000 ba56 	b.w	80053f8 <__retarget_lock_init_recursive>
 8004f4c:	bd10      	pop	{r4, pc}
 8004f4e:	bf00      	nop
 8004f50:	08005159 	.word	0x08005159
 8004f54:	0800517b 	.word	0x0800517b
 8004f58:	080051b3 	.word	0x080051b3
 8004f5c:	080051d7 	.word	0x080051d7
 8004f60:	20000278 	.word	0x20000278

08004f64 <stdio_exit_handler>:
 8004f64:	4a02      	ldr	r2, [pc, #8]	; (8004f70 <stdio_exit_handler+0xc>)
 8004f66:	4903      	ldr	r1, [pc, #12]	; (8004f74 <stdio_exit_handler+0x10>)
 8004f68:	4803      	ldr	r0, [pc, #12]	; (8004f78 <stdio_exit_handler+0x14>)
 8004f6a:	f000 b869 	b.w	8005040 <_fwalk_sglue>
 8004f6e:	bf00      	nop
 8004f70:	20000050 	.word	0x20000050
 8004f74:	08005ca5 	.word	0x08005ca5
 8004f78:	2000005c 	.word	0x2000005c

08004f7c <cleanup_stdio>:
 8004f7c:	6841      	ldr	r1, [r0, #4]
 8004f7e:	4b0c      	ldr	r3, [pc, #48]	; (8004fb0 <cleanup_stdio+0x34>)
 8004f80:	4299      	cmp	r1, r3
 8004f82:	b510      	push	{r4, lr}
 8004f84:	4604      	mov	r4, r0
 8004f86:	d001      	beq.n	8004f8c <cleanup_stdio+0x10>
 8004f88:	f000 fe8c 	bl	8005ca4 <_fflush_r>
 8004f8c:	68a1      	ldr	r1, [r4, #8]
 8004f8e:	4b09      	ldr	r3, [pc, #36]	; (8004fb4 <cleanup_stdio+0x38>)
 8004f90:	4299      	cmp	r1, r3
 8004f92:	d002      	beq.n	8004f9a <cleanup_stdio+0x1e>
 8004f94:	4620      	mov	r0, r4
 8004f96:	f000 fe85 	bl	8005ca4 <_fflush_r>
 8004f9a:	68e1      	ldr	r1, [r4, #12]
 8004f9c:	4b06      	ldr	r3, [pc, #24]	; (8004fb8 <cleanup_stdio+0x3c>)
 8004f9e:	4299      	cmp	r1, r3
 8004fa0:	d004      	beq.n	8004fac <cleanup_stdio+0x30>
 8004fa2:	4620      	mov	r0, r4
 8004fa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fa8:	f000 be7c 	b.w	8005ca4 <_fflush_r>
 8004fac:	bd10      	pop	{r4, pc}
 8004fae:	bf00      	nop
 8004fb0:	20000278 	.word	0x20000278
 8004fb4:	200002e0 	.word	0x200002e0
 8004fb8:	20000348 	.word	0x20000348

08004fbc <global_stdio_init.part.0>:
 8004fbc:	b510      	push	{r4, lr}
 8004fbe:	4b0b      	ldr	r3, [pc, #44]	; (8004fec <global_stdio_init.part.0+0x30>)
 8004fc0:	4c0b      	ldr	r4, [pc, #44]	; (8004ff0 <global_stdio_init.part.0+0x34>)
 8004fc2:	4a0c      	ldr	r2, [pc, #48]	; (8004ff4 <global_stdio_init.part.0+0x38>)
 8004fc4:	601a      	str	r2, [r3, #0]
 8004fc6:	4620      	mov	r0, r4
 8004fc8:	2200      	movs	r2, #0
 8004fca:	2104      	movs	r1, #4
 8004fcc:	f7ff ff94 	bl	8004ef8 <std>
 8004fd0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	2109      	movs	r1, #9
 8004fd8:	f7ff ff8e 	bl	8004ef8 <std>
 8004fdc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004fe0:	2202      	movs	r2, #2
 8004fe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fe6:	2112      	movs	r1, #18
 8004fe8:	f7ff bf86 	b.w	8004ef8 <std>
 8004fec:	200003b0 	.word	0x200003b0
 8004ff0:	20000278 	.word	0x20000278
 8004ff4:	08004f65 	.word	0x08004f65

08004ff8 <__sfp_lock_acquire>:
 8004ff8:	4801      	ldr	r0, [pc, #4]	; (8005000 <__sfp_lock_acquire+0x8>)
 8004ffa:	f000 b9fe 	b.w	80053fa <__retarget_lock_acquire_recursive>
 8004ffe:	bf00      	nop
 8005000:	200003b9 	.word	0x200003b9

08005004 <__sfp_lock_release>:
 8005004:	4801      	ldr	r0, [pc, #4]	; (800500c <__sfp_lock_release+0x8>)
 8005006:	f000 b9f9 	b.w	80053fc <__retarget_lock_release_recursive>
 800500a:	bf00      	nop
 800500c:	200003b9 	.word	0x200003b9

08005010 <__sinit>:
 8005010:	b510      	push	{r4, lr}
 8005012:	4604      	mov	r4, r0
 8005014:	f7ff fff0 	bl	8004ff8 <__sfp_lock_acquire>
 8005018:	6a23      	ldr	r3, [r4, #32]
 800501a:	b11b      	cbz	r3, 8005024 <__sinit+0x14>
 800501c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005020:	f7ff bff0 	b.w	8005004 <__sfp_lock_release>
 8005024:	4b04      	ldr	r3, [pc, #16]	; (8005038 <__sinit+0x28>)
 8005026:	6223      	str	r3, [r4, #32]
 8005028:	4b04      	ldr	r3, [pc, #16]	; (800503c <__sinit+0x2c>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d1f5      	bne.n	800501c <__sinit+0xc>
 8005030:	f7ff ffc4 	bl	8004fbc <global_stdio_init.part.0>
 8005034:	e7f2      	b.n	800501c <__sinit+0xc>
 8005036:	bf00      	nop
 8005038:	08004f7d 	.word	0x08004f7d
 800503c:	200003b0 	.word	0x200003b0

08005040 <_fwalk_sglue>:
 8005040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005044:	4607      	mov	r7, r0
 8005046:	4688      	mov	r8, r1
 8005048:	4614      	mov	r4, r2
 800504a:	2600      	movs	r6, #0
 800504c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005050:	f1b9 0901 	subs.w	r9, r9, #1
 8005054:	d505      	bpl.n	8005062 <_fwalk_sglue+0x22>
 8005056:	6824      	ldr	r4, [r4, #0]
 8005058:	2c00      	cmp	r4, #0
 800505a:	d1f7      	bne.n	800504c <_fwalk_sglue+0xc>
 800505c:	4630      	mov	r0, r6
 800505e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005062:	89ab      	ldrh	r3, [r5, #12]
 8005064:	2b01      	cmp	r3, #1
 8005066:	d907      	bls.n	8005078 <_fwalk_sglue+0x38>
 8005068:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800506c:	3301      	adds	r3, #1
 800506e:	d003      	beq.n	8005078 <_fwalk_sglue+0x38>
 8005070:	4629      	mov	r1, r5
 8005072:	4638      	mov	r0, r7
 8005074:	47c0      	blx	r8
 8005076:	4306      	orrs	r6, r0
 8005078:	3568      	adds	r5, #104	; 0x68
 800507a:	e7e9      	b.n	8005050 <_fwalk_sglue+0x10>

0800507c <iprintf>:
 800507c:	b40f      	push	{r0, r1, r2, r3}
 800507e:	b507      	push	{r0, r1, r2, lr}
 8005080:	4906      	ldr	r1, [pc, #24]	; (800509c <iprintf+0x20>)
 8005082:	ab04      	add	r3, sp, #16
 8005084:	6808      	ldr	r0, [r1, #0]
 8005086:	f853 2b04 	ldr.w	r2, [r3], #4
 800508a:	6881      	ldr	r1, [r0, #8]
 800508c:	9301      	str	r3, [sp, #4]
 800508e:	f000 fad9 	bl	8005644 <_vfiprintf_r>
 8005092:	b003      	add	sp, #12
 8005094:	f85d eb04 	ldr.w	lr, [sp], #4
 8005098:	b004      	add	sp, #16
 800509a:	4770      	bx	lr
 800509c:	200000a8 	.word	0x200000a8

080050a0 <_puts_r>:
 80050a0:	6a03      	ldr	r3, [r0, #32]
 80050a2:	b570      	push	{r4, r5, r6, lr}
 80050a4:	6884      	ldr	r4, [r0, #8]
 80050a6:	4605      	mov	r5, r0
 80050a8:	460e      	mov	r6, r1
 80050aa:	b90b      	cbnz	r3, 80050b0 <_puts_r+0x10>
 80050ac:	f7ff ffb0 	bl	8005010 <__sinit>
 80050b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80050b2:	07db      	lsls	r3, r3, #31
 80050b4:	d405      	bmi.n	80050c2 <_puts_r+0x22>
 80050b6:	89a3      	ldrh	r3, [r4, #12]
 80050b8:	0598      	lsls	r0, r3, #22
 80050ba:	d402      	bmi.n	80050c2 <_puts_r+0x22>
 80050bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050be:	f000 f99c 	bl	80053fa <__retarget_lock_acquire_recursive>
 80050c2:	89a3      	ldrh	r3, [r4, #12]
 80050c4:	0719      	lsls	r1, r3, #28
 80050c6:	d513      	bpl.n	80050f0 <_puts_r+0x50>
 80050c8:	6923      	ldr	r3, [r4, #16]
 80050ca:	b18b      	cbz	r3, 80050f0 <_puts_r+0x50>
 80050cc:	3e01      	subs	r6, #1
 80050ce:	68a3      	ldr	r3, [r4, #8]
 80050d0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80050d4:	3b01      	subs	r3, #1
 80050d6:	60a3      	str	r3, [r4, #8]
 80050d8:	b9e9      	cbnz	r1, 8005116 <_puts_r+0x76>
 80050da:	2b00      	cmp	r3, #0
 80050dc:	da2e      	bge.n	800513c <_puts_r+0x9c>
 80050de:	4622      	mov	r2, r4
 80050e0:	210a      	movs	r1, #10
 80050e2:	4628      	mov	r0, r5
 80050e4:	f000 f87b 	bl	80051de <__swbuf_r>
 80050e8:	3001      	adds	r0, #1
 80050ea:	d007      	beq.n	80050fc <_puts_r+0x5c>
 80050ec:	250a      	movs	r5, #10
 80050ee:	e007      	b.n	8005100 <_puts_r+0x60>
 80050f0:	4621      	mov	r1, r4
 80050f2:	4628      	mov	r0, r5
 80050f4:	f000 f8b0 	bl	8005258 <__swsetup_r>
 80050f8:	2800      	cmp	r0, #0
 80050fa:	d0e7      	beq.n	80050cc <_puts_r+0x2c>
 80050fc:	f04f 35ff 	mov.w	r5, #4294967295
 8005100:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005102:	07da      	lsls	r2, r3, #31
 8005104:	d405      	bmi.n	8005112 <_puts_r+0x72>
 8005106:	89a3      	ldrh	r3, [r4, #12]
 8005108:	059b      	lsls	r3, r3, #22
 800510a:	d402      	bmi.n	8005112 <_puts_r+0x72>
 800510c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800510e:	f000 f975 	bl	80053fc <__retarget_lock_release_recursive>
 8005112:	4628      	mov	r0, r5
 8005114:	bd70      	pop	{r4, r5, r6, pc}
 8005116:	2b00      	cmp	r3, #0
 8005118:	da04      	bge.n	8005124 <_puts_r+0x84>
 800511a:	69a2      	ldr	r2, [r4, #24]
 800511c:	429a      	cmp	r2, r3
 800511e:	dc06      	bgt.n	800512e <_puts_r+0x8e>
 8005120:	290a      	cmp	r1, #10
 8005122:	d004      	beq.n	800512e <_puts_r+0x8e>
 8005124:	6823      	ldr	r3, [r4, #0]
 8005126:	1c5a      	adds	r2, r3, #1
 8005128:	6022      	str	r2, [r4, #0]
 800512a:	7019      	strb	r1, [r3, #0]
 800512c:	e7cf      	b.n	80050ce <_puts_r+0x2e>
 800512e:	4622      	mov	r2, r4
 8005130:	4628      	mov	r0, r5
 8005132:	f000 f854 	bl	80051de <__swbuf_r>
 8005136:	3001      	adds	r0, #1
 8005138:	d1c9      	bne.n	80050ce <_puts_r+0x2e>
 800513a:	e7df      	b.n	80050fc <_puts_r+0x5c>
 800513c:	6823      	ldr	r3, [r4, #0]
 800513e:	250a      	movs	r5, #10
 8005140:	1c5a      	adds	r2, r3, #1
 8005142:	6022      	str	r2, [r4, #0]
 8005144:	701d      	strb	r5, [r3, #0]
 8005146:	e7db      	b.n	8005100 <_puts_r+0x60>

08005148 <puts>:
 8005148:	4b02      	ldr	r3, [pc, #8]	; (8005154 <puts+0xc>)
 800514a:	4601      	mov	r1, r0
 800514c:	6818      	ldr	r0, [r3, #0]
 800514e:	f7ff bfa7 	b.w	80050a0 <_puts_r>
 8005152:	bf00      	nop
 8005154:	200000a8 	.word	0x200000a8

08005158 <__sread>:
 8005158:	b510      	push	{r4, lr}
 800515a:	460c      	mov	r4, r1
 800515c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005160:	f000 f8fc 	bl	800535c <_read_r>
 8005164:	2800      	cmp	r0, #0
 8005166:	bfab      	itete	ge
 8005168:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800516a:	89a3      	ldrhlt	r3, [r4, #12]
 800516c:	181b      	addge	r3, r3, r0
 800516e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005172:	bfac      	ite	ge
 8005174:	6563      	strge	r3, [r4, #84]	; 0x54
 8005176:	81a3      	strhlt	r3, [r4, #12]
 8005178:	bd10      	pop	{r4, pc}

0800517a <__swrite>:
 800517a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800517e:	461f      	mov	r7, r3
 8005180:	898b      	ldrh	r3, [r1, #12]
 8005182:	05db      	lsls	r3, r3, #23
 8005184:	4605      	mov	r5, r0
 8005186:	460c      	mov	r4, r1
 8005188:	4616      	mov	r6, r2
 800518a:	d505      	bpl.n	8005198 <__swrite+0x1e>
 800518c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005190:	2302      	movs	r3, #2
 8005192:	2200      	movs	r2, #0
 8005194:	f000 f8d0 	bl	8005338 <_lseek_r>
 8005198:	89a3      	ldrh	r3, [r4, #12]
 800519a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800519e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051a2:	81a3      	strh	r3, [r4, #12]
 80051a4:	4632      	mov	r2, r6
 80051a6:	463b      	mov	r3, r7
 80051a8:	4628      	mov	r0, r5
 80051aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051ae:	f000 b8e7 	b.w	8005380 <_write_r>

080051b2 <__sseek>:
 80051b2:	b510      	push	{r4, lr}
 80051b4:	460c      	mov	r4, r1
 80051b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051ba:	f000 f8bd 	bl	8005338 <_lseek_r>
 80051be:	1c43      	adds	r3, r0, #1
 80051c0:	89a3      	ldrh	r3, [r4, #12]
 80051c2:	bf15      	itete	ne
 80051c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80051c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80051ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80051ce:	81a3      	strheq	r3, [r4, #12]
 80051d0:	bf18      	it	ne
 80051d2:	81a3      	strhne	r3, [r4, #12]
 80051d4:	bd10      	pop	{r4, pc}

080051d6 <__sclose>:
 80051d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051da:	f000 b89d 	b.w	8005318 <_close_r>

080051de <__swbuf_r>:
 80051de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051e0:	460e      	mov	r6, r1
 80051e2:	4614      	mov	r4, r2
 80051e4:	4605      	mov	r5, r0
 80051e6:	b118      	cbz	r0, 80051f0 <__swbuf_r+0x12>
 80051e8:	6a03      	ldr	r3, [r0, #32]
 80051ea:	b90b      	cbnz	r3, 80051f0 <__swbuf_r+0x12>
 80051ec:	f7ff ff10 	bl	8005010 <__sinit>
 80051f0:	69a3      	ldr	r3, [r4, #24]
 80051f2:	60a3      	str	r3, [r4, #8]
 80051f4:	89a3      	ldrh	r3, [r4, #12]
 80051f6:	071a      	lsls	r2, r3, #28
 80051f8:	d525      	bpl.n	8005246 <__swbuf_r+0x68>
 80051fa:	6923      	ldr	r3, [r4, #16]
 80051fc:	b31b      	cbz	r3, 8005246 <__swbuf_r+0x68>
 80051fe:	6823      	ldr	r3, [r4, #0]
 8005200:	6922      	ldr	r2, [r4, #16]
 8005202:	1a98      	subs	r0, r3, r2
 8005204:	6963      	ldr	r3, [r4, #20]
 8005206:	b2f6      	uxtb	r6, r6
 8005208:	4283      	cmp	r3, r0
 800520a:	4637      	mov	r7, r6
 800520c:	dc04      	bgt.n	8005218 <__swbuf_r+0x3a>
 800520e:	4621      	mov	r1, r4
 8005210:	4628      	mov	r0, r5
 8005212:	f000 fd47 	bl	8005ca4 <_fflush_r>
 8005216:	b9e0      	cbnz	r0, 8005252 <__swbuf_r+0x74>
 8005218:	68a3      	ldr	r3, [r4, #8]
 800521a:	3b01      	subs	r3, #1
 800521c:	60a3      	str	r3, [r4, #8]
 800521e:	6823      	ldr	r3, [r4, #0]
 8005220:	1c5a      	adds	r2, r3, #1
 8005222:	6022      	str	r2, [r4, #0]
 8005224:	701e      	strb	r6, [r3, #0]
 8005226:	6962      	ldr	r2, [r4, #20]
 8005228:	1c43      	adds	r3, r0, #1
 800522a:	429a      	cmp	r2, r3
 800522c:	d004      	beq.n	8005238 <__swbuf_r+0x5a>
 800522e:	89a3      	ldrh	r3, [r4, #12]
 8005230:	07db      	lsls	r3, r3, #31
 8005232:	d506      	bpl.n	8005242 <__swbuf_r+0x64>
 8005234:	2e0a      	cmp	r6, #10
 8005236:	d104      	bne.n	8005242 <__swbuf_r+0x64>
 8005238:	4621      	mov	r1, r4
 800523a:	4628      	mov	r0, r5
 800523c:	f000 fd32 	bl	8005ca4 <_fflush_r>
 8005240:	b938      	cbnz	r0, 8005252 <__swbuf_r+0x74>
 8005242:	4638      	mov	r0, r7
 8005244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005246:	4621      	mov	r1, r4
 8005248:	4628      	mov	r0, r5
 800524a:	f000 f805 	bl	8005258 <__swsetup_r>
 800524e:	2800      	cmp	r0, #0
 8005250:	d0d5      	beq.n	80051fe <__swbuf_r+0x20>
 8005252:	f04f 37ff 	mov.w	r7, #4294967295
 8005256:	e7f4      	b.n	8005242 <__swbuf_r+0x64>

08005258 <__swsetup_r>:
 8005258:	b538      	push	{r3, r4, r5, lr}
 800525a:	4b2a      	ldr	r3, [pc, #168]	; (8005304 <__swsetup_r+0xac>)
 800525c:	4605      	mov	r5, r0
 800525e:	6818      	ldr	r0, [r3, #0]
 8005260:	460c      	mov	r4, r1
 8005262:	b118      	cbz	r0, 800526c <__swsetup_r+0x14>
 8005264:	6a03      	ldr	r3, [r0, #32]
 8005266:	b90b      	cbnz	r3, 800526c <__swsetup_r+0x14>
 8005268:	f7ff fed2 	bl	8005010 <__sinit>
 800526c:	89a3      	ldrh	r3, [r4, #12]
 800526e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005272:	0718      	lsls	r0, r3, #28
 8005274:	d422      	bmi.n	80052bc <__swsetup_r+0x64>
 8005276:	06d9      	lsls	r1, r3, #27
 8005278:	d407      	bmi.n	800528a <__swsetup_r+0x32>
 800527a:	2309      	movs	r3, #9
 800527c:	602b      	str	r3, [r5, #0]
 800527e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005282:	81a3      	strh	r3, [r4, #12]
 8005284:	f04f 30ff 	mov.w	r0, #4294967295
 8005288:	e034      	b.n	80052f4 <__swsetup_r+0x9c>
 800528a:	0758      	lsls	r0, r3, #29
 800528c:	d512      	bpl.n	80052b4 <__swsetup_r+0x5c>
 800528e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005290:	b141      	cbz	r1, 80052a4 <__swsetup_r+0x4c>
 8005292:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005296:	4299      	cmp	r1, r3
 8005298:	d002      	beq.n	80052a0 <__swsetup_r+0x48>
 800529a:	4628      	mov	r0, r5
 800529c:	f000 f8b0 	bl	8005400 <_free_r>
 80052a0:	2300      	movs	r3, #0
 80052a2:	6363      	str	r3, [r4, #52]	; 0x34
 80052a4:	89a3      	ldrh	r3, [r4, #12]
 80052a6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80052aa:	81a3      	strh	r3, [r4, #12]
 80052ac:	2300      	movs	r3, #0
 80052ae:	6063      	str	r3, [r4, #4]
 80052b0:	6923      	ldr	r3, [r4, #16]
 80052b2:	6023      	str	r3, [r4, #0]
 80052b4:	89a3      	ldrh	r3, [r4, #12]
 80052b6:	f043 0308 	orr.w	r3, r3, #8
 80052ba:	81a3      	strh	r3, [r4, #12]
 80052bc:	6923      	ldr	r3, [r4, #16]
 80052be:	b94b      	cbnz	r3, 80052d4 <__swsetup_r+0x7c>
 80052c0:	89a3      	ldrh	r3, [r4, #12]
 80052c2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80052c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052ca:	d003      	beq.n	80052d4 <__swsetup_r+0x7c>
 80052cc:	4621      	mov	r1, r4
 80052ce:	4628      	mov	r0, r5
 80052d0:	f000 fd36 	bl	8005d40 <__smakebuf_r>
 80052d4:	89a0      	ldrh	r0, [r4, #12]
 80052d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80052da:	f010 0301 	ands.w	r3, r0, #1
 80052de:	d00a      	beq.n	80052f6 <__swsetup_r+0x9e>
 80052e0:	2300      	movs	r3, #0
 80052e2:	60a3      	str	r3, [r4, #8]
 80052e4:	6963      	ldr	r3, [r4, #20]
 80052e6:	425b      	negs	r3, r3
 80052e8:	61a3      	str	r3, [r4, #24]
 80052ea:	6923      	ldr	r3, [r4, #16]
 80052ec:	b943      	cbnz	r3, 8005300 <__swsetup_r+0xa8>
 80052ee:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80052f2:	d1c4      	bne.n	800527e <__swsetup_r+0x26>
 80052f4:	bd38      	pop	{r3, r4, r5, pc}
 80052f6:	0781      	lsls	r1, r0, #30
 80052f8:	bf58      	it	pl
 80052fa:	6963      	ldrpl	r3, [r4, #20]
 80052fc:	60a3      	str	r3, [r4, #8]
 80052fe:	e7f4      	b.n	80052ea <__swsetup_r+0x92>
 8005300:	2000      	movs	r0, #0
 8005302:	e7f7      	b.n	80052f4 <__swsetup_r+0x9c>
 8005304:	200000a8 	.word	0x200000a8

08005308 <memset>:
 8005308:	4402      	add	r2, r0
 800530a:	4603      	mov	r3, r0
 800530c:	4293      	cmp	r3, r2
 800530e:	d100      	bne.n	8005312 <memset+0xa>
 8005310:	4770      	bx	lr
 8005312:	f803 1b01 	strb.w	r1, [r3], #1
 8005316:	e7f9      	b.n	800530c <memset+0x4>

08005318 <_close_r>:
 8005318:	b538      	push	{r3, r4, r5, lr}
 800531a:	4d06      	ldr	r5, [pc, #24]	; (8005334 <_close_r+0x1c>)
 800531c:	2300      	movs	r3, #0
 800531e:	4604      	mov	r4, r0
 8005320:	4608      	mov	r0, r1
 8005322:	602b      	str	r3, [r5, #0]
 8005324:	f7fb fe1b 	bl	8000f5e <_close>
 8005328:	1c43      	adds	r3, r0, #1
 800532a:	d102      	bne.n	8005332 <_close_r+0x1a>
 800532c:	682b      	ldr	r3, [r5, #0]
 800532e:	b103      	cbz	r3, 8005332 <_close_r+0x1a>
 8005330:	6023      	str	r3, [r4, #0]
 8005332:	bd38      	pop	{r3, r4, r5, pc}
 8005334:	200003b4 	.word	0x200003b4

08005338 <_lseek_r>:
 8005338:	b538      	push	{r3, r4, r5, lr}
 800533a:	4d07      	ldr	r5, [pc, #28]	; (8005358 <_lseek_r+0x20>)
 800533c:	4604      	mov	r4, r0
 800533e:	4608      	mov	r0, r1
 8005340:	4611      	mov	r1, r2
 8005342:	2200      	movs	r2, #0
 8005344:	602a      	str	r2, [r5, #0]
 8005346:	461a      	mov	r2, r3
 8005348:	f7fb fe30 	bl	8000fac <_lseek>
 800534c:	1c43      	adds	r3, r0, #1
 800534e:	d102      	bne.n	8005356 <_lseek_r+0x1e>
 8005350:	682b      	ldr	r3, [r5, #0]
 8005352:	b103      	cbz	r3, 8005356 <_lseek_r+0x1e>
 8005354:	6023      	str	r3, [r4, #0]
 8005356:	bd38      	pop	{r3, r4, r5, pc}
 8005358:	200003b4 	.word	0x200003b4

0800535c <_read_r>:
 800535c:	b538      	push	{r3, r4, r5, lr}
 800535e:	4d07      	ldr	r5, [pc, #28]	; (800537c <_read_r+0x20>)
 8005360:	4604      	mov	r4, r0
 8005362:	4608      	mov	r0, r1
 8005364:	4611      	mov	r1, r2
 8005366:	2200      	movs	r2, #0
 8005368:	602a      	str	r2, [r5, #0]
 800536a:	461a      	mov	r2, r3
 800536c:	f7fb fdda 	bl	8000f24 <_read>
 8005370:	1c43      	adds	r3, r0, #1
 8005372:	d102      	bne.n	800537a <_read_r+0x1e>
 8005374:	682b      	ldr	r3, [r5, #0]
 8005376:	b103      	cbz	r3, 800537a <_read_r+0x1e>
 8005378:	6023      	str	r3, [r4, #0]
 800537a:	bd38      	pop	{r3, r4, r5, pc}
 800537c:	200003b4 	.word	0x200003b4

08005380 <_write_r>:
 8005380:	b538      	push	{r3, r4, r5, lr}
 8005382:	4d07      	ldr	r5, [pc, #28]	; (80053a0 <_write_r+0x20>)
 8005384:	4604      	mov	r4, r0
 8005386:	4608      	mov	r0, r1
 8005388:	4611      	mov	r1, r2
 800538a:	2200      	movs	r2, #0
 800538c:	602a      	str	r2, [r5, #0]
 800538e:	461a      	mov	r2, r3
 8005390:	f7fb f8f4 	bl	800057c <_write>
 8005394:	1c43      	adds	r3, r0, #1
 8005396:	d102      	bne.n	800539e <_write_r+0x1e>
 8005398:	682b      	ldr	r3, [r5, #0]
 800539a:	b103      	cbz	r3, 800539e <_write_r+0x1e>
 800539c:	6023      	str	r3, [r4, #0]
 800539e:	bd38      	pop	{r3, r4, r5, pc}
 80053a0:	200003b4 	.word	0x200003b4

080053a4 <__errno>:
 80053a4:	4b01      	ldr	r3, [pc, #4]	; (80053ac <__errno+0x8>)
 80053a6:	6818      	ldr	r0, [r3, #0]
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	200000a8 	.word	0x200000a8

080053b0 <__libc_init_array>:
 80053b0:	b570      	push	{r4, r5, r6, lr}
 80053b2:	4d0d      	ldr	r5, [pc, #52]	; (80053e8 <__libc_init_array+0x38>)
 80053b4:	4c0d      	ldr	r4, [pc, #52]	; (80053ec <__libc_init_array+0x3c>)
 80053b6:	1b64      	subs	r4, r4, r5
 80053b8:	10a4      	asrs	r4, r4, #2
 80053ba:	2600      	movs	r6, #0
 80053bc:	42a6      	cmp	r6, r4
 80053be:	d109      	bne.n	80053d4 <__libc_init_array+0x24>
 80053c0:	4d0b      	ldr	r5, [pc, #44]	; (80053f0 <__libc_init_array+0x40>)
 80053c2:	4c0c      	ldr	r4, [pc, #48]	; (80053f4 <__libc_init_array+0x44>)
 80053c4:	f000 fd2a 	bl	8005e1c <_init>
 80053c8:	1b64      	subs	r4, r4, r5
 80053ca:	10a4      	asrs	r4, r4, #2
 80053cc:	2600      	movs	r6, #0
 80053ce:	42a6      	cmp	r6, r4
 80053d0:	d105      	bne.n	80053de <__libc_init_array+0x2e>
 80053d2:	bd70      	pop	{r4, r5, r6, pc}
 80053d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80053d8:	4798      	blx	r3
 80053da:	3601      	adds	r6, #1
 80053dc:	e7ee      	b.n	80053bc <__libc_init_array+0xc>
 80053de:	f855 3b04 	ldr.w	r3, [r5], #4
 80053e2:	4798      	blx	r3
 80053e4:	3601      	adds	r6, #1
 80053e6:	e7f2      	b.n	80053ce <__libc_init_array+0x1e>
 80053e8:	08005fb0 	.word	0x08005fb0
 80053ec:	08005fb0 	.word	0x08005fb0
 80053f0:	08005fb0 	.word	0x08005fb0
 80053f4:	08005fb4 	.word	0x08005fb4

080053f8 <__retarget_lock_init_recursive>:
 80053f8:	4770      	bx	lr

080053fa <__retarget_lock_acquire_recursive>:
 80053fa:	4770      	bx	lr

080053fc <__retarget_lock_release_recursive>:
 80053fc:	4770      	bx	lr
	...

08005400 <_free_r>:
 8005400:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005402:	2900      	cmp	r1, #0
 8005404:	d044      	beq.n	8005490 <_free_r+0x90>
 8005406:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800540a:	9001      	str	r0, [sp, #4]
 800540c:	2b00      	cmp	r3, #0
 800540e:	f1a1 0404 	sub.w	r4, r1, #4
 8005412:	bfb8      	it	lt
 8005414:	18e4      	addlt	r4, r4, r3
 8005416:	f000 f8df 	bl	80055d8 <__malloc_lock>
 800541a:	4a1e      	ldr	r2, [pc, #120]	; (8005494 <_free_r+0x94>)
 800541c:	9801      	ldr	r0, [sp, #4]
 800541e:	6813      	ldr	r3, [r2, #0]
 8005420:	b933      	cbnz	r3, 8005430 <_free_r+0x30>
 8005422:	6063      	str	r3, [r4, #4]
 8005424:	6014      	str	r4, [r2, #0]
 8005426:	b003      	add	sp, #12
 8005428:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800542c:	f000 b8da 	b.w	80055e4 <__malloc_unlock>
 8005430:	42a3      	cmp	r3, r4
 8005432:	d908      	bls.n	8005446 <_free_r+0x46>
 8005434:	6825      	ldr	r5, [r4, #0]
 8005436:	1961      	adds	r1, r4, r5
 8005438:	428b      	cmp	r3, r1
 800543a:	bf01      	itttt	eq
 800543c:	6819      	ldreq	r1, [r3, #0]
 800543e:	685b      	ldreq	r3, [r3, #4]
 8005440:	1949      	addeq	r1, r1, r5
 8005442:	6021      	streq	r1, [r4, #0]
 8005444:	e7ed      	b.n	8005422 <_free_r+0x22>
 8005446:	461a      	mov	r2, r3
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	b10b      	cbz	r3, 8005450 <_free_r+0x50>
 800544c:	42a3      	cmp	r3, r4
 800544e:	d9fa      	bls.n	8005446 <_free_r+0x46>
 8005450:	6811      	ldr	r1, [r2, #0]
 8005452:	1855      	adds	r5, r2, r1
 8005454:	42a5      	cmp	r5, r4
 8005456:	d10b      	bne.n	8005470 <_free_r+0x70>
 8005458:	6824      	ldr	r4, [r4, #0]
 800545a:	4421      	add	r1, r4
 800545c:	1854      	adds	r4, r2, r1
 800545e:	42a3      	cmp	r3, r4
 8005460:	6011      	str	r1, [r2, #0]
 8005462:	d1e0      	bne.n	8005426 <_free_r+0x26>
 8005464:	681c      	ldr	r4, [r3, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	6053      	str	r3, [r2, #4]
 800546a:	440c      	add	r4, r1
 800546c:	6014      	str	r4, [r2, #0]
 800546e:	e7da      	b.n	8005426 <_free_r+0x26>
 8005470:	d902      	bls.n	8005478 <_free_r+0x78>
 8005472:	230c      	movs	r3, #12
 8005474:	6003      	str	r3, [r0, #0]
 8005476:	e7d6      	b.n	8005426 <_free_r+0x26>
 8005478:	6825      	ldr	r5, [r4, #0]
 800547a:	1961      	adds	r1, r4, r5
 800547c:	428b      	cmp	r3, r1
 800547e:	bf04      	itt	eq
 8005480:	6819      	ldreq	r1, [r3, #0]
 8005482:	685b      	ldreq	r3, [r3, #4]
 8005484:	6063      	str	r3, [r4, #4]
 8005486:	bf04      	itt	eq
 8005488:	1949      	addeq	r1, r1, r5
 800548a:	6021      	streq	r1, [r4, #0]
 800548c:	6054      	str	r4, [r2, #4]
 800548e:	e7ca      	b.n	8005426 <_free_r+0x26>
 8005490:	b003      	add	sp, #12
 8005492:	bd30      	pop	{r4, r5, pc}
 8005494:	200003bc 	.word	0x200003bc

08005498 <sbrk_aligned>:
 8005498:	b570      	push	{r4, r5, r6, lr}
 800549a:	4e0e      	ldr	r6, [pc, #56]	; (80054d4 <sbrk_aligned+0x3c>)
 800549c:	460c      	mov	r4, r1
 800549e:	6831      	ldr	r1, [r6, #0]
 80054a0:	4605      	mov	r5, r0
 80054a2:	b911      	cbnz	r1, 80054aa <sbrk_aligned+0x12>
 80054a4:	f000 fcaa 	bl	8005dfc <_sbrk_r>
 80054a8:	6030      	str	r0, [r6, #0]
 80054aa:	4621      	mov	r1, r4
 80054ac:	4628      	mov	r0, r5
 80054ae:	f000 fca5 	bl	8005dfc <_sbrk_r>
 80054b2:	1c43      	adds	r3, r0, #1
 80054b4:	d00a      	beq.n	80054cc <sbrk_aligned+0x34>
 80054b6:	1cc4      	adds	r4, r0, #3
 80054b8:	f024 0403 	bic.w	r4, r4, #3
 80054bc:	42a0      	cmp	r0, r4
 80054be:	d007      	beq.n	80054d0 <sbrk_aligned+0x38>
 80054c0:	1a21      	subs	r1, r4, r0
 80054c2:	4628      	mov	r0, r5
 80054c4:	f000 fc9a 	bl	8005dfc <_sbrk_r>
 80054c8:	3001      	adds	r0, #1
 80054ca:	d101      	bne.n	80054d0 <sbrk_aligned+0x38>
 80054cc:	f04f 34ff 	mov.w	r4, #4294967295
 80054d0:	4620      	mov	r0, r4
 80054d2:	bd70      	pop	{r4, r5, r6, pc}
 80054d4:	200003c0 	.word	0x200003c0

080054d8 <_malloc_r>:
 80054d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054dc:	1ccd      	adds	r5, r1, #3
 80054de:	f025 0503 	bic.w	r5, r5, #3
 80054e2:	3508      	adds	r5, #8
 80054e4:	2d0c      	cmp	r5, #12
 80054e6:	bf38      	it	cc
 80054e8:	250c      	movcc	r5, #12
 80054ea:	2d00      	cmp	r5, #0
 80054ec:	4607      	mov	r7, r0
 80054ee:	db01      	blt.n	80054f4 <_malloc_r+0x1c>
 80054f0:	42a9      	cmp	r1, r5
 80054f2:	d905      	bls.n	8005500 <_malloc_r+0x28>
 80054f4:	230c      	movs	r3, #12
 80054f6:	603b      	str	r3, [r7, #0]
 80054f8:	2600      	movs	r6, #0
 80054fa:	4630      	mov	r0, r6
 80054fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005500:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80055d4 <_malloc_r+0xfc>
 8005504:	f000 f868 	bl	80055d8 <__malloc_lock>
 8005508:	f8d8 3000 	ldr.w	r3, [r8]
 800550c:	461c      	mov	r4, r3
 800550e:	bb5c      	cbnz	r4, 8005568 <_malloc_r+0x90>
 8005510:	4629      	mov	r1, r5
 8005512:	4638      	mov	r0, r7
 8005514:	f7ff ffc0 	bl	8005498 <sbrk_aligned>
 8005518:	1c43      	adds	r3, r0, #1
 800551a:	4604      	mov	r4, r0
 800551c:	d155      	bne.n	80055ca <_malloc_r+0xf2>
 800551e:	f8d8 4000 	ldr.w	r4, [r8]
 8005522:	4626      	mov	r6, r4
 8005524:	2e00      	cmp	r6, #0
 8005526:	d145      	bne.n	80055b4 <_malloc_r+0xdc>
 8005528:	2c00      	cmp	r4, #0
 800552a:	d048      	beq.n	80055be <_malloc_r+0xe6>
 800552c:	6823      	ldr	r3, [r4, #0]
 800552e:	4631      	mov	r1, r6
 8005530:	4638      	mov	r0, r7
 8005532:	eb04 0903 	add.w	r9, r4, r3
 8005536:	f000 fc61 	bl	8005dfc <_sbrk_r>
 800553a:	4581      	cmp	r9, r0
 800553c:	d13f      	bne.n	80055be <_malloc_r+0xe6>
 800553e:	6821      	ldr	r1, [r4, #0]
 8005540:	1a6d      	subs	r5, r5, r1
 8005542:	4629      	mov	r1, r5
 8005544:	4638      	mov	r0, r7
 8005546:	f7ff ffa7 	bl	8005498 <sbrk_aligned>
 800554a:	3001      	adds	r0, #1
 800554c:	d037      	beq.n	80055be <_malloc_r+0xe6>
 800554e:	6823      	ldr	r3, [r4, #0]
 8005550:	442b      	add	r3, r5
 8005552:	6023      	str	r3, [r4, #0]
 8005554:	f8d8 3000 	ldr.w	r3, [r8]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d038      	beq.n	80055ce <_malloc_r+0xf6>
 800555c:	685a      	ldr	r2, [r3, #4]
 800555e:	42a2      	cmp	r2, r4
 8005560:	d12b      	bne.n	80055ba <_malloc_r+0xe2>
 8005562:	2200      	movs	r2, #0
 8005564:	605a      	str	r2, [r3, #4]
 8005566:	e00f      	b.n	8005588 <_malloc_r+0xb0>
 8005568:	6822      	ldr	r2, [r4, #0]
 800556a:	1b52      	subs	r2, r2, r5
 800556c:	d41f      	bmi.n	80055ae <_malloc_r+0xd6>
 800556e:	2a0b      	cmp	r2, #11
 8005570:	d917      	bls.n	80055a2 <_malloc_r+0xca>
 8005572:	1961      	adds	r1, r4, r5
 8005574:	42a3      	cmp	r3, r4
 8005576:	6025      	str	r5, [r4, #0]
 8005578:	bf18      	it	ne
 800557a:	6059      	strne	r1, [r3, #4]
 800557c:	6863      	ldr	r3, [r4, #4]
 800557e:	bf08      	it	eq
 8005580:	f8c8 1000 	streq.w	r1, [r8]
 8005584:	5162      	str	r2, [r4, r5]
 8005586:	604b      	str	r3, [r1, #4]
 8005588:	4638      	mov	r0, r7
 800558a:	f104 060b 	add.w	r6, r4, #11
 800558e:	f000 f829 	bl	80055e4 <__malloc_unlock>
 8005592:	f026 0607 	bic.w	r6, r6, #7
 8005596:	1d23      	adds	r3, r4, #4
 8005598:	1af2      	subs	r2, r6, r3
 800559a:	d0ae      	beq.n	80054fa <_malloc_r+0x22>
 800559c:	1b9b      	subs	r3, r3, r6
 800559e:	50a3      	str	r3, [r4, r2]
 80055a0:	e7ab      	b.n	80054fa <_malloc_r+0x22>
 80055a2:	42a3      	cmp	r3, r4
 80055a4:	6862      	ldr	r2, [r4, #4]
 80055a6:	d1dd      	bne.n	8005564 <_malloc_r+0x8c>
 80055a8:	f8c8 2000 	str.w	r2, [r8]
 80055ac:	e7ec      	b.n	8005588 <_malloc_r+0xb0>
 80055ae:	4623      	mov	r3, r4
 80055b0:	6864      	ldr	r4, [r4, #4]
 80055b2:	e7ac      	b.n	800550e <_malloc_r+0x36>
 80055b4:	4634      	mov	r4, r6
 80055b6:	6876      	ldr	r6, [r6, #4]
 80055b8:	e7b4      	b.n	8005524 <_malloc_r+0x4c>
 80055ba:	4613      	mov	r3, r2
 80055bc:	e7cc      	b.n	8005558 <_malloc_r+0x80>
 80055be:	230c      	movs	r3, #12
 80055c0:	603b      	str	r3, [r7, #0]
 80055c2:	4638      	mov	r0, r7
 80055c4:	f000 f80e 	bl	80055e4 <__malloc_unlock>
 80055c8:	e797      	b.n	80054fa <_malloc_r+0x22>
 80055ca:	6025      	str	r5, [r4, #0]
 80055cc:	e7dc      	b.n	8005588 <_malloc_r+0xb0>
 80055ce:	605b      	str	r3, [r3, #4]
 80055d0:	deff      	udf	#255	; 0xff
 80055d2:	bf00      	nop
 80055d4:	200003bc 	.word	0x200003bc

080055d8 <__malloc_lock>:
 80055d8:	4801      	ldr	r0, [pc, #4]	; (80055e0 <__malloc_lock+0x8>)
 80055da:	f7ff bf0e 	b.w	80053fa <__retarget_lock_acquire_recursive>
 80055de:	bf00      	nop
 80055e0:	200003b8 	.word	0x200003b8

080055e4 <__malloc_unlock>:
 80055e4:	4801      	ldr	r0, [pc, #4]	; (80055ec <__malloc_unlock+0x8>)
 80055e6:	f7ff bf09 	b.w	80053fc <__retarget_lock_release_recursive>
 80055ea:	bf00      	nop
 80055ec:	200003b8 	.word	0x200003b8

080055f0 <__sfputc_r>:
 80055f0:	6893      	ldr	r3, [r2, #8]
 80055f2:	3b01      	subs	r3, #1
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	b410      	push	{r4}
 80055f8:	6093      	str	r3, [r2, #8]
 80055fa:	da08      	bge.n	800560e <__sfputc_r+0x1e>
 80055fc:	6994      	ldr	r4, [r2, #24]
 80055fe:	42a3      	cmp	r3, r4
 8005600:	db01      	blt.n	8005606 <__sfputc_r+0x16>
 8005602:	290a      	cmp	r1, #10
 8005604:	d103      	bne.n	800560e <__sfputc_r+0x1e>
 8005606:	f85d 4b04 	ldr.w	r4, [sp], #4
 800560a:	f7ff bde8 	b.w	80051de <__swbuf_r>
 800560e:	6813      	ldr	r3, [r2, #0]
 8005610:	1c58      	adds	r0, r3, #1
 8005612:	6010      	str	r0, [r2, #0]
 8005614:	7019      	strb	r1, [r3, #0]
 8005616:	4608      	mov	r0, r1
 8005618:	f85d 4b04 	ldr.w	r4, [sp], #4
 800561c:	4770      	bx	lr

0800561e <__sfputs_r>:
 800561e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005620:	4606      	mov	r6, r0
 8005622:	460f      	mov	r7, r1
 8005624:	4614      	mov	r4, r2
 8005626:	18d5      	adds	r5, r2, r3
 8005628:	42ac      	cmp	r4, r5
 800562a:	d101      	bne.n	8005630 <__sfputs_r+0x12>
 800562c:	2000      	movs	r0, #0
 800562e:	e007      	b.n	8005640 <__sfputs_r+0x22>
 8005630:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005634:	463a      	mov	r2, r7
 8005636:	4630      	mov	r0, r6
 8005638:	f7ff ffda 	bl	80055f0 <__sfputc_r>
 800563c:	1c43      	adds	r3, r0, #1
 800563e:	d1f3      	bne.n	8005628 <__sfputs_r+0xa>
 8005640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005644 <_vfiprintf_r>:
 8005644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005648:	460d      	mov	r5, r1
 800564a:	b09d      	sub	sp, #116	; 0x74
 800564c:	4614      	mov	r4, r2
 800564e:	4698      	mov	r8, r3
 8005650:	4606      	mov	r6, r0
 8005652:	b118      	cbz	r0, 800565c <_vfiprintf_r+0x18>
 8005654:	6a03      	ldr	r3, [r0, #32]
 8005656:	b90b      	cbnz	r3, 800565c <_vfiprintf_r+0x18>
 8005658:	f7ff fcda 	bl	8005010 <__sinit>
 800565c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800565e:	07d9      	lsls	r1, r3, #31
 8005660:	d405      	bmi.n	800566e <_vfiprintf_r+0x2a>
 8005662:	89ab      	ldrh	r3, [r5, #12]
 8005664:	059a      	lsls	r2, r3, #22
 8005666:	d402      	bmi.n	800566e <_vfiprintf_r+0x2a>
 8005668:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800566a:	f7ff fec6 	bl	80053fa <__retarget_lock_acquire_recursive>
 800566e:	89ab      	ldrh	r3, [r5, #12]
 8005670:	071b      	lsls	r3, r3, #28
 8005672:	d501      	bpl.n	8005678 <_vfiprintf_r+0x34>
 8005674:	692b      	ldr	r3, [r5, #16]
 8005676:	b99b      	cbnz	r3, 80056a0 <_vfiprintf_r+0x5c>
 8005678:	4629      	mov	r1, r5
 800567a:	4630      	mov	r0, r6
 800567c:	f7ff fdec 	bl	8005258 <__swsetup_r>
 8005680:	b170      	cbz	r0, 80056a0 <_vfiprintf_r+0x5c>
 8005682:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005684:	07dc      	lsls	r4, r3, #31
 8005686:	d504      	bpl.n	8005692 <_vfiprintf_r+0x4e>
 8005688:	f04f 30ff 	mov.w	r0, #4294967295
 800568c:	b01d      	add	sp, #116	; 0x74
 800568e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005692:	89ab      	ldrh	r3, [r5, #12]
 8005694:	0598      	lsls	r0, r3, #22
 8005696:	d4f7      	bmi.n	8005688 <_vfiprintf_r+0x44>
 8005698:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800569a:	f7ff feaf 	bl	80053fc <__retarget_lock_release_recursive>
 800569e:	e7f3      	b.n	8005688 <_vfiprintf_r+0x44>
 80056a0:	2300      	movs	r3, #0
 80056a2:	9309      	str	r3, [sp, #36]	; 0x24
 80056a4:	2320      	movs	r3, #32
 80056a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80056aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80056ae:	2330      	movs	r3, #48	; 0x30
 80056b0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005864 <_vfiprintf_r+0x220>
 80056b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80056b8:	f04f 0901 	mov.w	r9, #1
 80056bc:	4623      	mov	r3, r4
 80056be:	469a      	mov	sl, r3
 80056c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056c4:	b10a      	cbz	r2, 80056ca <_vfiprintf_r+0x86>
 80056c6:	2a25      	cmp	r2, #37	; 0x25
 80056c8:	d1f9      	bne.n	80056be <_vfiprintf_r+0x7a>
 80056ca:	ebba 0b04 	subs.w	fp, sl, r4
 80056ce:	d00b      	beq.n	80056e8 <_vfiprintf_r+0xa4>
 80056d0:	465b      	mov	r3, fp
 80056d2:	4622      	mov	r2, r4
 80056d4:	4629      	mov	r1, r5
 80056d6:	4630      	mov	r0, r6
 80056d8:	f7ff ffa1 	bl	800561e <__sfputs_r>
 80056dc:	3001      	adds	r0, #1
 80056de:	f000 80a9 	beq.w	8005834 <_vfiprintf_r+0x1f0>
 80056e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056e4:	445a      	add	r2, fp
 80056e6:	9209      	str	r2, [sp, #36]	; 0x24
 80056e8:	f89a 3000 	ldrb.w	r3, [sl]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f000 80a1 	beq.w	8005834 <_vfiprintf_r+0x1f0>
 80056f2:	2300      	movs	r3, #0
 80056f4:	f04f 32ff 	mov.w	r2, #4294967295
 80056f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056fc:	f10a 0a01 	add.w	sl, sl, #1
 8005700:	9304      	str	r3, [sp, #16]
 8005702:	9307      	str	r3, [sp, #28]
 8005704:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005708:	931a      	str	r3, [sp, #104]	; 0x68
 800570a:	4654      	mov	r4, sl
 800570c:	2205      	movs	r2, #5
 800570e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005712:	4854      	ldr	r0, [pc, #336]	; (8005864 <_vfiprintf_r+0x220>)
 8005714:	f7fa fd64 	bl	80001e0 <memchr>
 8005718:	9a04      	ldr	r2, [sp, #16]
 800571a:	b9d8      	cbnz	r0, 8005754 <_vfiprintf_r+0x110>
 800571c:	06d1      	lsls	r1, r2, #27
 800571e:	bf44      	itt	mi
 8005720:	2320      	movmi	r3, #32
 8005722:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005726:	0713      	lsls	r3, r2, #28
 8005728:	bf44      	itt	mi
 800572a:	232b      	movmi	r3, #43	; 0x2b
 800572c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005730:	f89a 3000 	ldrb.w	r3, [sl]
 8005734:	2b2a      	cmp	r3, #42	; 0x2a
 8005736:	d015      	beq.n	8005764 <_vfiprintf_r+0x120>
 8005738:	9a07      	ldr	r2, [sp, #28]
 800573a:	4654      	mov	r4, sl
 800573c:	2000      	movs	r0, #0
 800573e:	f04f 0c0a 	mov.w	ip, #10
 8005742:	4621      	mov	r1, r4
 8005744:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005748:	3b30      	subs	r3, #48	; 0x30
 800574a:	2b09      	cmp	r3, #9
 800574c:	d94d      	bls.n	80057ea <_vfiprintf_r+0x1a6>
 800574e:	b1b0      	cbz	r0, 800577e <_vfiprintf_r+0x13a>
 8005750:	9207      	str	r2, [sp, #28]
 8005752:	e014      	b.n	800577e <_vfiprintf_r+0x13a>
 8005754:	eba0 0308 	sub.w	r3, r0, r8
 8005758:	fa09 f303 	lsl.w	r3, r9, r3
 800575c:	4313      	orrs	r3, r2
 800575e:	9304      	str	r3, [sp, #16]
 8005760:	46a2      	mov	sl, r4
 8005762:	e7d2      	b.n	800570a <_vfiprintf_r+0xc6>
 8005764:	9b03      	ldr	r3, [sp, #12]
 8005766:	1d19      	adds	r1, r3, #4
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	9103      	str	r1, [sp, #12]
 800576c:	2b00      	cmp	r3, #0
 800576e:	bfbb      	ittet	lt
 8005770:	425b      	neglt	r3, r3
 8005772:	f042 0202 	orrlt.w	r2, r2, #2
 8005776:	9307      	strge	r3, [sp, #28]
 8005778:	9307      	strlt	r3, [sp, #28]
 800577a:	bfb8      	it	lt
 800577c:	9204      	strlt	r2, [sp, #16]
 800577e:	7823      	ldrb	r3, [r4, #0]
 8005780:	2b2e      	cmp	r3, #46	; 0x2e
 8005782:	d10c      	bne.n	800579e <_vfiprintf_r+0x15a>
 8005784:	7863      	ldrb	r3, [r4, #1]
 8005786:	2b2a      	cmp	r3, #42	; 0x2a
 8005788:	d134      	bne.n	80057f4 <_vfiprintf_r+0x1b0>
 800578a:	9b03      	ldr	r3, [sp, #12]
 800578c:	1d1a      	adds	r2, r3, #4
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	9203      	str	r2, [sp, #12]
 8005792:	2b00      	cmp	r3, #0
 8005794:	bfb8      	it	lt
 8005796:	f04f 33ff 	movlt.w	r3, #4294967295
 800579a:	3402      	adds	r4, #2
 800579c:	9305      	str	r3, [sp, #20]
 800579e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005874 <_vfiprintf_r+0x230>
 80057a2:	7821      	ldrb	r1, [r4, #0]
 80057a4:	2203      	movs	r2, #3
 80057a6:	4650      	mov	r0, sl
 80057a8:	f7fa fd1a 	bl	80001e0 <memchr>
 80057ac:	b138      	cbz	r0, 80057be <_vfiprintf_r+0x17a>
 80057ae:	9b04      	ldr	r3, [sp, #16]
 80057b0:	eba0 000a 	sub.w	r0, r0, sl
 80057b4:	2240      	movs	r2, #64	; 0x40
 80057b6:	4082      	lsls	r2, r0
 80057b8:	4313      	orrs	r3, r2
 80057ba:	3401      	adds	r4, #1
 80057bc:	9304      	str	r3, [sp, #16]
 80057be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057c2:	4829      	ldr	r0, [pc, #164]	; (8005868 <_vfiprintf_r+0x224>)
 80057c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80057c8:	2206      	movs	r2, #6
 80057ca:	f7fa fd09 	bl	80001e0 <memchr>
 80057ce:	2800      	cmp	r0, #0
 80057d0:	d03f      	beq.n	8005852 <_vfiprintf_r+0x20e>
 80057d2:	4b26      	ldr	r3, [pc, #152]	; (800586c <_vfiprintf_r+0x228>)
 80057d4:	bb1b      	cbnz	r3, 800581e <_vfiprintf_r+0x1da>
 80057d6:	9b03      	ldr	r3, [sp, #12]
 80057d8:	3307      	adds	r3, #7
 80057da:	f023 0307 	bic.w	r3, r3, #7
 80057de:	3308      	adds	r3, #8
 80057e0:	9303      	str	r3, [sp, #12]
 80057e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057e4:	443b      	add	r3, r7
 80057e6:	9309      	str	r3, [sp, #36]	; 0x24
 80057e8:	e768      	b.n	80056bc <_vfiprintf_r+0x78>
 80057ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80057ee:	460c      	mov	r4, r1
 80057f0:	2001      	movs	r0, #1
 80057f2:	e7a6      	b.n	8005742 <_vfiprintf_r+0xfe>
 80057f4:	2300      	movs	r3, #0
 80057f6:	3401      	adds	r4, #1
 80057f8:	9305      	str	r3, [sp, #20]
 80057fa:	4619      	mov	r1, r3
 80057fc:	f04f 0c0a 	mov.w	ip, #10
 8005800:	4620      	mov	r0, r4
 8005802:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005806:	3a30      	subs	r2, #48	; 0x30
 8005808:	2a09      	cmp	r2, #9
 800580a:	d903      	bls.n	8005814 <_vfiprintf_r+0x1d0>
 800580c:	2b00      	cmp	r3, #0
 800580e:	d0c6      	beq.n	800579e <_vfiprintf_r+0x15a>
 8005810:	9105      	str	r1, [sp, #20]
 8005812:	e7c4      	b.n	800579e <_vfiprintf_r+0x15a>
 8005814:	fb0c 2101 	mla	r1, ip, r1, r2
 8005818:	4604      	mov	r4, r0
 800581a:	2301      	movs	r3, #1
 800581c:	e7f0      	b.n	8005800 <_vfiprintf_r+0x1bc>
 800581e:	ab03      	add	r3, sp, #12
 8005820:	9300      	str	r3, [sp, #0]
 8005822:	462a      	mov	r2, r5
 8005824:	4b12      	ldr	r3, [pc, #72]	; (8005870 <_vfiprintf_r+0x22c>)
 8005826:	a904      	add	r1, sp, #16
 8005828:	4630      	mov	r0, r6
 800582a:	f3af 8000 	nop.w
 800582e:	4607      	mov	r7, r0
 8005830:	1c78      	adds	r0, r7, #1
 8005832:	d1d6      	bne.n	80057e2 <_vfiprintf_r+0x19e>
 8005834:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005836:	07d9      	lsls	r1, r3, #31
 8005838:	d405      	bmi.n	8005846 <_vfiprintf_r+0x202>
 800583a:	89ab      	ldrh	r3, [r5, #12]
 800583c:	059a      	lsls	r2, r3, #22
 800583e:	d402      	bmi.n	8005846 <_vfiprintf_r+0x202>
 8005840:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005842:	f7ff fddb 	bl	80053fc <__retarget_lock_release_recursive>
 8005846:	89ab      	ldrh	r3, [r5, #12]
 8005848:	065b      	lsls	r3, r3, #25
 800584a:	f53f af1d 	bmi.w	8005688 <_vfiprintf_r+0x44>
 800584e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005850:	e71c      	b.n	800568c <_vfiprintf_r+0x48>
 8005852:	ab03      	add	r3, sp, #12
 8005854:	9300      	str	r3, [sp, #0]
 8005856:	462a      	mov	r2, r5
 8005858:	4b05      	ldr	r3, [pc, #20]	; (8005870 <_vfiprintf_r+0x22c>)
 800585a:	a904      	add	r1, sp, #16
 800585c:	4630      	mov	r0, r6
 800585e:	f000 f879 	bl	8005954 <_printf_i>
 8005862:	e7e4      	b.n	800582e <_vfiprintf_r+0x1ea>
 8005864:	08005f74 	.word	0x08005f74
 8005868:	08005f7e 	.word	0x08005f7e
 800586c:	00000000 	.word	0x00000000
 8005870:	0800561f 	.word	0x0800561f
 8005874:	08005f7a 	.word	0x08005f7a

08005878 <_printf_common>:
 8005878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800587c:	4616      	mov	r6, r2
 800587e:	4699      	mov	r9, r3
 8005880:	688a      	ldr	r2, [r1, #8]
 8005882:	690b      	ldr	r3, [r1, #16]
 8005884:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005888:	4293      	cmp	r3, r2
 800588a:	bfb8      	it	lt
 800588c:	4613      	movlt	r3, r2
 800588e:	6033      	str	r3, [r6, #0]
 8005890:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005894:	4607      	mov	r7, r0
 8005896:	460c      	mov	r4, r1
 8005898:	b10a      	cbz	r2, 800589e <_printf_common+0x26>
 800589a:	3301      	adds	r3, #1
 800589c:	6033      	str	r3, [r6, #0]
 800589e:	6823      	ldr	r3, [r4, #0]
 80058a0:	0699      	lsls	r1, r3, #26
 80058a2:	bf42      	ittt	mi
 80058a4:	6833      	ldrmi	r3, [r6, #0]
 80058a6:	3302      	addmi	r3, #2
 80058a8:	6033      	strmi	r3, [r6, #0]
 80058aa:	6825      	ldr	r5, [r4, #0]
 80058ac:	f015 0506 	ands.w	r5, r5, #6
 80058b0:	d106      	bne.n	80058c0 <_printf_common+0x48>
 80058b2:	f104 0a19 	add.w	sl, r4, #25
 80058b6:	68e3      	ldr	r3, [r4, #12]
 80058b8:	6832      	ldr	r2, [r6, #0]
 80058ba:	1a9b      	subs	r3, r3, r2
 80058bc:	42ab      	cmp	r3, r5
 80058be:	dc26      	bgt.n	800590e <_printf_common+0x96>
 80058c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80058c4:	1e13      	subs	r3, r2, #0
 80058c6:	6822      	ldr	r2, [r4, #0]
 80058c8:	bf18      	it	ne
 80058ca:	2301      	movne	r3, #1
 80058cc:	0692      	lsls	r2, r2, #26
 80058ce:	d42b      	bmi.n	8005928 <_printf_common+0xb0>
 80058d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058d4:	4649      	mov	r1, r9
 80058d6:	4638      	mov	r0, r7
 80058d8:	47c0      	blx	r8
 80058da:	3001      	adds	r0, #1
 80058dc:	d01e      	beq.n	800591c <_printf_common+0xa4>
 80058de:	6823      	ldr	r3, [r4, #0]
 80058e0:	6922      	ldr	r2, [r4, #16]
 80058e2:	f003 0306 	and.w	r3, r3, #6
 80058e6:	2b04      	cmp	r3, #4
 80058e8:	bf02      	ittt	eq
 80058ea:	68e5      	ldreq	r5, [r4, #12]
 80058ec:	6833      	ldreq	r3, [r6, #0]
 80058ee:	1aed      	subeq	r5, r5, r3
 80058f0:	68a3      	ldr	r3, [r4, #8]
 80058f2:	bf0c      	ite	eq
 80058f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058f8:	2500      	movne	r5, #0
 80058fa:	4293      	cmp	r3, r2
 80058fc:	bfc4      	itt	gt
 80058fe:	1a9b      	subgt	r3, r3, r2
 8005900:	18ed      	addgt	r5, r5, r3
 8005902:	2600      	movs	r6, #0
 8005904:	341a      	adds	r4, #26
 8005906:	42b5      	cmp	r5, r6
 8005908:	d11a      	bne.n	8005940 <_printf_common+0xc8>
 800590a:	2000      	movs	r0, #0
 800590c:	e008      	b.n	8005920 <_printf_common+0xa8>
 800590e:	2301      	movs	r3, #1
 8005910:	4652      	mov	r2, sl
 8005912:	4649      	mov	r1, r9
 8005914:	4638      	mov	r0, r7
 8005916:	47c0      	blx	r8
 8005918:	3001      	adds	r0, #1
 800591a:	d103      	bne.n	8005924 <_printf_common+0xac>
 800591c:	f04f 30ff 	mov.w	r0, #4294967295
 8005920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005924:	3501      	adds	r5, #1
 8005926:	e7c6      	b.n	80058b6 <_printf_common+0x3e>
 8005928:	18e1      	adds	r1, r4, r3
 800592a:	1c5a      	adds	r2, r3, #1
 800592c:	2030      	movs	r0, #48	; 0x30
 800592e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005932:	4422      	add	r2, r4
 8005934:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005938:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800593c:	3302      	adds	r3, #2
 800593e:	e7c7      	b.n	80058d0 <_printf_common+0x58>
 8005940:	2301      	movs	r3, #1
 8005942:	4622      	mov	r2, r4
 8005944:	4649      	mov	r1, r9
 8005946:	4638      	mov	r0, r7
 8005948:	47c0      	blx	r8
 800594a:	3001      	adds	r0, #1
 800594c:	d0e6      	beq.n	800591c <_printf_common+0xa4>
 800594e:	3601      	adds	r6, #1
 8005950:	e7d9      	b.n	8005906 <_printf_common+0x8e>
	...

08005954 <_printf_i>:
 8005954:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005958:	7e0f      	ldrb	r7, [r1, #24]
 800595a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800595c:	2f78      	cmp	r7, #120	; 0x78
 800595e:	4691      	mov	r9, r2
 8005960:	4680      	mov	r8, r0
 8005962:	460c      	mov	r4, r1
 8005964:	469a      	mov	sl, r3
 8005966:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800596a:	d807      	bhi.n	800597c <_printf_i+0x28>
 800596c:	2f62      	cmp	r7, #98	; 0x62
 800596e:	d80a      	bhi.n	8005986 <_printf_i+0x32>
 8005970:	2f00      	cmp	r7, #0
 8005972:	f000 80d4 	beq.w	8005b1e <_printf_i+0x1ca>
 8005976:	2f58      	cmp	r7, #88	; 0x58
 8005978:	f000 80c0 	beq.w	8005afc <_printf_i+0x1a8>
 800597c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005980:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005984:	e03a      	b.n	80059fc <_printf_i+0xa8>
 8005986:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800598a:	2b15      	cmp	r3, #21
 800598c:	d8f6      	bhi.n	800597c <_printf_i+0x28>
 800598e:	a101      	add	r1, pc, #4	; (adr r1, 8005994 <_printf_i+0x40>)
 8005990:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005994:	080059ed 	.word	0x080059ed
 8005998:	08005a01 	.word	0x08005a01
 800599c:	0800597d 	.word	0x0800597d
 80059a0:	0800597d 	.word	0x0800597d
 80059a4:	0800597d 	.word	0x0800597d
 80059a8:	0800597d 	.word	0x0800597d
 80059ac:	08005a01 	.word	0x08005a01
 80059b0:	0800597d 	.word	0x0800597d
 80059b4:	0800597d 	.word	0x0800597d
 80059b8:	0800597d 	.word	0x0800597d
 80059bc:	0800597d 	.word	0x0800597d
 80059c0:	08005b05 	.word	0x08005b05
 80059c4:	08005a2d 	.word	0x08005a2d
 80059c8:	08005abf 	.word	0x08005abf
 80059cc:	0800597d 	.word	0x0800597d
 80059d0:	0800597d 	.word	0x0800597d
 80059d4:	08005b27 	.word	0x08005b27
 80059d8:	0800597d 	.word	0x0800597d
 80059dc:	08005a2d 	.word	0x08005a2d
 80059e0:	0800597d 	.word	0x0800597d
 80059e4:	0800597d 	.word	0x0800597d
 80059e8:	08005ac7 	.word	0x08005ac7
 80059ec:	682b      	ldr	r3, [r5, #0]
 80059ee:	1d1a      	adds	r2, r3, #4
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	602a      	str	r2, [r5, #0]
 80059f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059fc:	2301      	movs	r3, #1
 80059fe:	e09f      	b.n	8005b40 <_printf_i+0x1ec>
 8005a00:	6820      	ldr	r0, [r4, #0]
 8005a02:	682b      	ldr	r3, [r5, #0]
 8005a04:	0607      	lsls	r7, r0, #24
 8005a06:	f103 0104 	add.w	r1, r3, #4
 8005a0a:	6029      	str	r1, [r5, #0]
 8005a0c:	d501      	bpl.n	8005a12 <_printf_i+0xbe>
 8005a0e:	681e      	ldr	r6, [r3, #0]
 8005a10:	e003      	b.n	8005a1a <_printf_i+0xc6>
 8005a12:	0646      	lsls	r6, r0, #25
 8005a14:	d5fb      	bpl.n	8005a0e <_printf_i+0xba>
 8005a16:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005a1a:	2e00      	cmp	r6, #0
 8005a1c:	da03      	bge.n	8005a26 <_printf_i+0xd2>
 8005a1e:	232d      	movs	r3, #45	; 0x2d
 8005a20:	4276      	negs	r6, r6
 8005a22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a26:	485a      	ldr	r0, [pc, #360]	; (8005b90 <_printf_i+0x23c>)
 8005a28:	230a      	movs	r3, #10
 8005a2a:	e012      	b.n	8005a52 <_printf_i+0xfe>
 8005a2c:	682b      	ldr	r3, [r5, #0]
 8005a2e:	6820      	ldr	r0, [r4, #0]
 8005a30:	1d19      	adds	r1, r3, #4
 8005a32:	6029      	str	r1, [r5, #0]
 8005a34:	0605      	lsls	r5, r0, #24
 8005a36:	d501      	bpl.n	8005a3c <_printf_i+0xe8>
 8005a38:	681e      	ldr	r6, [r3, #0]
 8005a3a:	e002      	b.n	8005a42 <_printf_i+0xee>
 8005a3c:	0641      	lsls	r1, r0, #25
 8005a3e:	d5fb      	bpl.n	8005a38 <_printf_i+0xe4>
 8005a40:	881e      	ldrh	r6, [r3, #0]
 8005a42:	4853      	ldr	r0, [pc, #332]	; (8005b90 <_printf_i+0x23c>)
 8005a44:	2f6f      	cmp	r7, #111	; 0x6f
 8005a46:	bf0c      	ite	eq
 8005a48:	2308      	moveq	r3, #8
 8005a4a:	230a      	movne	r3, #10
 8005a4c:	2100      	movs	r1, #0
 8005a4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a52:	6865      	ldr	r5, [r4, #4]
 8005a54:	60a5      	str	r5, [r4, #8]
 8005a56:	2d00      	cmp	r5, #0
 8005a58:	bfa2      	ittt	ge
 8005a5a:	6821      	ldrge	r1, [r4, #0]
 8005a5c:	f021 0104 	bicge.w	r1, r1, #4
 8005a60:	6021      	strge	r1, [r4, #0]
 8005a62:	b90e      	cbnz	r6, 8005a68 <_printf_i+0x114>
 8005a64:	2d00      	cmp	r5, #0
 8005a66:	d04b      	beq.n	8005b00 <_printf_i+0x1ac>
 8005a68:	4615      	mov	r5, r2
 8005a6a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005a6e:	fb03 6711 	mls	r7, r3, r1, r6
 8005a72:	5dc7      	ldrb	r7, [r0, r7]
 8005a74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a78:	4637      	mov	r7, r6
 8005a7a:	42bb      	cmp	r3, r7
 8005a7c:	460e      	mov	r6, r1
 8005a7e:	d9f4      	bls.n	8005a6a <_printf_i+0x116>
 8005a80:	2b08      	cmp	r3, #8
 8005a82:	d10b      	bne.n	8005a9c <_printf_i+0x148>
 8005a84:	6823      	ldr	r3, [r4, #0]
 8005a86:	07de      	lsls	r6, r3, #31
 8005a88:	d508      	bpl.n	8005a9c <_printf_i+0x148>
 8005a8a:	6923      	ldr	r3, [r4, #16]
 8005a8c:	6861      	ldr	r1, [r4, #4]
 8005a8e:	4299      	cmp	r1, r3
 8005a90:	bfde      	ittt	le
 8005a92:	2330      	movle	r3, #48	; 0x30
 8005a94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a98:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a9c:	1b52      	subs	r2, r2, r5
 8005a9e:	6122      	str	r2, [r4, #16]
 8005aa0:	f8cd a000 	str.w	sl, [sp]
 8005aa4:	464b      	mov	r3, r9
 8005aa6:	aa03      	add	r2, sp, #12
 8005aa8:	4621      	mov	r1, r4
 8005aaa:	4640      	mov	r0, r8
 8005aac:	f7ff fee4 	bl	8005878 <_printf_common>
 8005ab0:	3001      	adds	r0, #1
 8005ab2:	d14a      	bne.n	8005b4a <_printf_i+0x1f6>
 8005ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ab8:	b004      	add	sp, #16
 8005aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005abe:	6823      	ldr	r3, [r4, #0]
 8005ac0:	f043 0320 	orr.w	r3, r3, #32
 8005ac4:	6023      	str	r3, [r4, #0]
 8005ac6:	4833      	ldr	r0, [pc, #204]	; (8005b94 <_printf_i+0x240>)
 8005ac8:	2778      	movs	r7, #120	; 0x78
 8005aca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005ace:	6823      	ldr	r3, [r4, #0]
 8005ad0:	6829      	ldr	r1, [r5, #0]
 8005ad2:	061f      	lsls	r7, r3, #24
 8005ad4:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ad8:	d402      	bmi.n	8005ae0 <_printf_i+0x18c>
 8005ada:	065f      	lsls	r7, r3, #25
 8005adc:	bf48      	it	mi
 8005ade:	b2b6      	uxthmi	r6, r6
 8005ae0:	07df      	lsls	r7, r3, #31
 8005ae2:	bf48      	it	mi
 8005ae4:	f043 0320 	orrmi.w	r3, r3, #32
 8005ae8:	6029      	str	r1, [r5, #0]
 8005aea:	bf48      	it	mi
 8005aec:	6023      	strmi	r3, [r4, #0]
 8005aee:	b91e      	cbnz	r6, 8005af8 <_printf_i+0x1a4>
 8005af0:	6823      	ldr	r3, [r4, #0]
 8005af2:	f023 0320 	bic.w	r3, r3, #32
 8005af6:	6023      	str	r3, [r4, #0]
 8005af8:	2310      	movs	r3, #16
 8005afa:	e7a7      	b.n	8005a4c <_printf_i+0xf8>
 8005afc:	4824      	ldr	r0, [pc, #144]	; (8005b90 <_printf_i+0x23c>)
 8005afe:	e7e4      	b.n	8005aca <_printf_i+0x176>
 8005b00:	4615      	mov	r5, r2
 8005b02:	e7bd      	b.n	8005a80 <_printf_i+0x12c>
 8005b04:	682b      	ldr	r3, [r5, #0]
 8005b06:	6826      	ldr	r6, [r4, #0]
 8005b08:	6961      	ldr	r1, [r4, #20]
 8005b0a:	1d18      	adds	r0, r3, #4
 8005b0c:	6028      	str	r0, [r5, #0]
 8005b0e:	0635      	lsls	r5, r6, #24
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	d501      	bpl.n	8005b18 <_printf_i+0x1c4>
 8005b14:	6019      	str	r1, [r3, #0]
 8005b16:	e002      	b.n	8005b1e <_printf_i+0x1ca>
 8005b18:	0670      	lsls	r0, r6, #25
 8005b1a:	d5fb      	bpl.n	8005b14 <_printf_i+0x1c0>
 8005b1c:	8019      	strh	r1, [r3, #0]
 8005b1e:	2300      	movs	r3, #0
 8005b20:	6123      	str	r3, [r4, #16]
 8005b22:	4615      	mov	r5, r2
 8005b24:	e7bc      	b.n	8005aa0 <_printf_i+0x14c>
 8005b26:	682b      	ldr	r3, [r5, #0]
 8005b28:	1d1a      	adds	r2, r3, #4
 8005b2a:	602a      	str	r2, [r5, #0]
 8005b2c:	681d      	ldr	r5, [r3, #0]
 8005b2e:	6862      	ldr	r2, [r4, #4]
 8005b30:	2100      	movs	r1, #0
 8005b32:	4628      	mov	r0, r5
 8005b34:	f7fa fb54 	bl	80001e0 <memchr>
 8005b38:	b108      	cbz	r0, 8005b3e <_printf_i+0x1ea>
 8005b3a:	1b40      	subs	r0, r0, r5
 8005b3c:	6060      	str	r0, [r4, #4]
 8005b3e:	6863      	ldr	r3, [r4, #4]
 8005b40:	6123      	str	r3, [r4, #16]
 8005b42:	2300      	movs	r3, #0
 8005b44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b48:	e7aa      	b.n	8005aa0 <_printf_i+0x14c>
 8005b4a:	6923      	ldr	r3, [r4, #16]
 8005b4c:	462a      	mov	r2, r5
 8005b4e:	4649      	mov	r1, r9
 8005b50:	4640      	mov	r0, r8
 8005b52:	47d0      	blx	sl
 8005b54:	3001      	adds	r0, #1
 8005b56:	d0ad      	beq.n	8005ab4 <_printf_i+0x160>
 8005b58:	6823      	ldr	r3, [r4, #0]
 8005b5a:	079b      	lsls	r3, r3, #30
 8005b5c:	d413      	bmi.n	8005b86 <_printf_i+0x232>
 8005b5e:	68e0      	ldr	r0, [r4, #12]
 8005b60:	9b03      	ldr	r3, [sp, #12]
 8005b62:	4298      	cmp	r0, r3
 8005b64:	bfb8      	it	lt
 8005b66:	4618      	movlt	r0, r3
 8005b68:	e7a6      	b.n	8005ab8 <_printf_i+0x164>
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	4632      	mov	r2, r6
 8005b6e:	4649      	mov	r1, r9
 8005b70:	4640      	mov	r0, r8
 8005b72:	47d0      	blx	sl
 8005b74:	3001      	adds	r0, #1
 8005b76:	d09d      	beq.n	8005ab4 <_printf_i+0x160>
 8005b78:	3501      	adds	r5, #1
 8005b7a:	68e3      	ldr	r3, [r4, #12]
 8005b7c:	9903      	ldr	r1, [sp, #12]
 8005b7e:	1a5b      	subs	r3, r3, r1
 8005b80:	42ab      	cmp	r3, r5
 8005b82:	dcf2      	bgt.n	8005b6a <_printf_i+0x216>
 8005b84:	e7eb      	b.n	8005b5e <_printf_i+0x20a>
 8005b86:	2500      	movs	r5, #0
 8005b88:	f104 0619 	add.w	r6, r4, #25
 8005b8c:	e7f5      	b.n	8005b7a <_printf_i+0x226>
 8005b8e:	bf00      	nop
 8005b90:	08005f85 	.word	0x08005f85
 8005b94:	08005f96 	.word	0x08005f96

08005b98 <__sflush_r>:
 8005b98:	898a      	ldrh	r2, [r1, #12]
 8005b9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b9e:	4605      	mov	r5, r0
 8005ba0:	0710      	lsls	r0, r2, #28
 8005ba2:	460c      	mov	r4, r1
 8005ba4:	d458      	bmi.n	8005c58 <__sflush_r+0xc0>
 8005ba6:	684b      	ldr	r3, [r1, #4]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	dc05      	bgt.n	8005bb8 <__sflush_r+0x20>
 8005bac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	dc02      	bgt.n	8005bb8 <__sflush_r+0x20>
 8005bb2:	2000      	movs	r0, #0
 8005bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005bba:	2e00      	cmp	r6, #0
 8005bbc:	d0f9      	beq.n	8005bb2 <__sflush_r+0x1a>
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005bc4:	682f      	ldr	r7, [r5, #0]
 8005bc6:	6a21      	ldr	r1, [r4, #32]
 8005bc8:	602b      	str	r3, [r5, #0]
 8005bca:	d032      	beq.n	8005c32 <__sflush_r+0x9a>
 8005bcc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005bce:	89a3      	ldrh	r3, [r4, #12]
 8005bd0:	075a      	lsls	r2, r3, #29
 8005bd2:	d505      	bpl.n	8005be0 <__sflush_r+0x48>
 8005bd4:	6863      	ldr	r3, [r4, #4]
 8005bd6:	1ac0      	subs	r0, r0, r3
 8005bd8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005bda:	b10b      	cbz	r3, 8005be0 <__sflush_r+0x48>
 8005bdc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005bde:	1ac0      	subs	r0, r0, r3
 8005be0:	2300      	movs	r3, #0
 8005be2:	4602      	mov	r2, r0
 8005be4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005be6:	6a21      	ldr	r1, [r4, #32]
 8005be8:	4628      	mov	r0, r5
 8005bea:	47b0      	blx	r6
 8005bec:	1c43      	adds	r3, r0, #1
 8005bee:	89a3      	ldrh	r3, [r4, #12]
 8005bf0:	d106      	bne.n	8005c00 <__sflush_r+0x68>
 8005bf2:	6829      	ldr	r1, [r5, #0]
 8005bf4:	291d      	cmp	r1, #29
 8005bf6:	d82b      	bhi.n	8005c50 <__sflush_r+0xb8>
 8005bf8:	4a29      	ldr	r2, [pc, #164]	; (8005ca0 <__sflush_r+0x108>)
 8005bfa:	410a      	asrs	r2, r1
 8005bfc:	07d6      	lsls	r6, r2, #31
 8005bfe:	d427      	bmi.n	8005c50 <__sflush_r+0xb8>
 8005c00:	2200      	movs	r2, #0
 8005c02:	6062      	str	r2, [r4, #4]
 8005c04:	04d9      	lsls	r1, r3, #19
 8005c06:	6922      	ldr	r2, [r4, #16]
 8005c08:	6022      	str	r2, [r4, #0]
 8005c0a:	d504      	bpl.n	8005c16 <__sflush_r+0x7e>
 8005c0c:	1c42      	adds	r2, r0, #1
 8005c0e:	d101      	bne.n	8005c14 <__sflush_r+0x7c>
 8005c10:	682b      	ldr	r3, [r5, #0]
 8005c12:	b903      	cbnz	r3, 8005c16 <__sflush_r+0x7e>
 8005c14:	6560      	str	r0, [r4, #84]	; 0x54
 8005c16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c18:	602f      	str	r7, [r5, #0]
 8005c1a:	2900      	cmp	r1, #0
 8005c1c:	d0c9      	beq.n	8005bb2 <__sflush_r+0x1a>
 8005c1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c22:	4299      	cmp	r1, r3
 8005c24:	d002      	beq.n	8005c2c <__sflush_r+0x94>
 8005c26:	4628      	mov	r0, r5
 8005c28:	f7ff fbea 	bl	8005400 <_free_r>
 8005c2c:	2000      	movs	r0, #0
 8005c2e:	6360      	str	r0, [r4, #52]	; 0x34
 8005c30:	e7c0      	b.n	8005bb4 <__sflush_r+0x1c>
 8005c32:	2301      	movs	r3, #1
 8005c34:	4628      	mov	r0, r5
 8005c36:	47b0      	blx	r6
 8005c38:	1c41      	adds	r1, r0, #1
 8005c3a:	d1c8      	bne.n	8005bce <__sflush_r+0x36>
 8005c3c:	682b      	ldr	r3, [r5, #0]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d0c5      	beq.n	8005bce <__sflush_r+0x36>
 8005c42:	2b1d      	cmp	r3, #29
 8005c44:	d001      	beq.n	8005c4a <__sflush_r+0xb2>
 8005c46:	2b16      	cmp	r3, #22
 8005c48:	d101      	bne.n	8005c4e <__sflush_r+0xb6>
 8005c4a:	602f      	str	r7, [r5, #0]
 8005c4c:	e7b1      	b.n	8005bb2 <__sflush_r+0x1a>
 8005c4e:	89a3      	ldrh	r3, [r4, #12]
 8005c50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c54:	81a3      	strh	r3, [r4, #12]
 8005c56:	e7ad      	b.n	8005bb4 <__sflush_r+0x1c>
 8005c58:	690f      	ldr	r7, [r1, #16]
 8005c5a:	2f00      	cmp	r7, #0
 8005c5c:	d0a9      	beq.n	8005bb2 <__sflush_r+0x1a>
 8005c5e:	0793      	lsls	r3, r2, #30
 8005c60:	680e      	ldr	r6, [r1, #0]
 8005c62:	bf08      	it	eq
 8005c64:	694b      	ldreq	r3, [r1, #20]
 8005c66:	600f      	str	r7, [r1, #0]
 8005c68:	bf18      	it	ne
 8005c6a:	2300      	movne	r3, #0
 8005c6c:	eba6 0807 	sub.w	r8, r6, r7
 8005c70:	608b      	str	r3, [r1, #8]
 8005c72:	f1b8 0f00 	cmp.w	r8, #0
 8005c76:	dd9c      	ble.n	8005bb2 <__sflush_r+0x1a>
 8005c78:	6a21      	ldr	r1, [r4, #32]
 8005c7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005c7c:	4643      	mov	r3, r8
 8005c7e:	463a      	mov	r2, r7
 8005c80:	4628      	mov	r0, r5
 8005c82:	47b0      	blx	r6
 8005c84:	2800      	cmp	r0, #0
 8005c86:	dc06      	bgt.n	8005c96 <__sflush_r+0xfe>
 8005c88:	89a3      	ldrh	r3, [r4, #12]
 8005c8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c8e:	81a3      	strh	r3, [r4, #12]
 8005c90:	f04f 30ff 	mov.w	r0, #4294967295
 8005c94:	e78e      	b.n	8005bb4 <__sflush_r+0x1c>
 8005c96:	4407      	add	r7, r0
 8005c98:	eba8 0800 	sub.w	r8, r8, r0
 8005c9c:	e7e9      	b.n	8005c72 <__sflush_r+0xda>
 8005c9e:	bf00      	nop
 8005ca0:	dfbffffe 	.word	0xdfbffffe

08005ca4 <_fflush_r>:
 8005ca4:	b538      	push	{r3, r4, r5, lr}
 8005ca6:	690b      	ldr	r3, [r1, #16]
 8005ca8:	4605      	mov	r5, r0
 8005caa:	460c      	mov	r4, r1
 8005cac:	b913      	cbnz	r3, 8005cb4 <_fflush_r+0x10>
 8005cae:	2500      	movs	r5, #0
 8005cb0:	4628      	mov	r0, r5
 8005cb2:	bd38      	pop	{r3, r4, r5, pc}
 8005cb4:	b118      	cbz	r0, 8005cbe <_fflush_r+0x1a>
 8005cb6:	6a03      	ldr	r3, [r0, #32]
 8005cb8:	b90b      	cbnz	r3, 8005cbe <_fflush_r+0x1a>
 8005cba:	f7ff f9a9 	bl	8005010 <__sinit>
 8005cbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d0f3      	beq.n	8005cae <_fflush_r+0xa>
 8005cc6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005cc8:	07d0      	lsls	r0, r2, #31
 8005cca:	d404      	bmi.n	8005cd6 <_fflush_r+0x32>
 8005ccc:	0599      	lsls	r1, r3, #22
 8005cce:	d402      	bmi.n	8005cd6 <_fflush_r+0x32>
 8005cd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cd2:	f7ff fb92 	bl	80053fa <__retarget_lock_acquire_recursive>
 8005cd6:	4628      	mov	r0, r5
 8005cd8:	4621      	mov	r1, r4
 8005cda:	f7ff ff5d 	bl	8005b98 <__sflush_r>
 8005cde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ce0:	07da      	lsls	r2, r3, #31
 8005ce2:	4605      	mov	r5, r0
 8005ce4:	d4e4      	bmi.n	8005cb0 <_fflush_r+0xc>
 8005ce6:	89a3      	ldrh	r3, [r4, #12]
 8005ce8:	059b      	lsls	r3, r3, #22
 8005cea:	d4e1      	bmi.n	8005cb0 <_fflush_r+0xc>
 8005cec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cee:	f7ff fb85 	bl	80053fc <__retarget_lock_release_recursive>
 8005cf2:	e7dd      	b.n	8005cb0 <_fflush_r+0xc>

08005cf4 <__swhatbuf_r>:
 8005cf4:	b570      	push	{r4, r5, r6, lr}
 8005cf6:	460c      	mov	r4, r1
 8005cf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cfc:	2900      	cmp	r1, #0
 8005cfe:	b096      	sub	sp, #88	; 0x58
 8005d00:	4615      	mov	r5, r2
 8005d02:	461e      	mov	r6, r3
 8005d04:	da0d      	bge.n	8005d22 <__swhatbuf_r+0x2e>
 8005d06:	89a3      	ldrh	r3, [r4, #12]
 8005d08:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005d0c:	f04f 0100 	mov.w	r1, #0
 8005d10:	bf0c      	ite	eq
 8005d12:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005d16:	2340      	movne	r3, #64	; 0x40
 8005d18:	2000      	movs	r0, #0
 8005d1a:	6031      	str	r1, [r6, #0]
 8005d1c:	602b      	str	r3, [r5, #0]
 8005d1e:	b016      	add	sp, #88	; 0x58
 8005d20:	bd70      	pop	{r4, r5, r6, pc}
 8005d22:	466a      	mov	r2, sp
 8005d24:	f000 f848 	bl	8005db8 <_fstat_r>
 8005d28:	2800      	cmp	r0, #0
 8005d2a:	dbec      	blt.n	8005d06 <__swhatbuf_r+0x12>
 8005d2c:	9901      	ldr	r1, [sp, #4]
 8005d2e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005d32:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005d36:	4259      	negs	r1, r3
 8005d38:	4159      	adcs	r1, r3
 8005d3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d3e:	e7eb      	b.n	8005d18 <__swhatbuf_r+0x24>

08005d40 <__smakebuf_r>:
 8005d40:	898b      	ldrh	r3, [r1, #12]
 8005d42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005d44:	079d      	lsls	r5, r3, #30
 8005d46:	4606      	mov	r6, r0
 8005d48:	460c      	mov	r4, r1
 8005d4a:	d507      	bpl.n	8005d5c <__smakebuf_r+0x1c>
 8005d4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005d50:	6023      	str	r3, [r4, #0]
 8005d52:	6123      	str	r3, [r4, #16]
 8005d54:	2301      	movs	r3, #1
 8005d56:	6163      	str	r3, [r4, #20]
 8005d58:	b002      	add	sp, #8
 8005d5a:	bd70      	pop	{r4, r5, r6, pc}
 8005d5c:	ab01      	add	r3, sp, #4
 8005d5e:	466a      	mov	r2, sp
 8005d60:	f7ff ffc8 	bl	8005cf4 <__swhatbuf_r>
 8005d64:	9900      	ldr	r1, [sp, #0]
 8005d66:	4605      	mov	r5, r0
 8005d68:	4630      	mov	r0, r6
 8005d6a:	f7ff fbb5 	bl	80054d8 <_malloc_r>
 8005d6e:	b948      	cbnz	r0, 8005d84 <__smakebuf_r+0x44>
 8005d70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d74:	059a      	lsls	r2, r3, #22
 8005d76:	d4ef      	bmi.n	8005d58 <__smakebuf_r+0x18>
 8005d78:	f023 0303 	bic.w	r3, r3, #3
 8005d7c:	f043 0302 	orr.w	r3, r3, #2
 8005d80:	81a3      	strh	r3, [r4, #12]
 8005d82:	e7e3      	b.n	8005d4c <__smakebuf_r+0xc>
 8005d84:	89a3      	ldrh	r3, [r4, #12]
 8005d86:	6020      	str	r0, [r4, #0]
 8005d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d8c:	81a3      	strh	r3, [r4, #12]
 8005d8e:	9b00      	ldr	r3, [sp, #0]
 8005d90:	6163      	str	r3, [r4, #20]
 8005d92:	9b01      	ldr	r3, [sp, #4]
 8005d94:	6120      	str	r0, [r4, #16]
 8005d96:	b15b      	cbz	r3, 8005db0 <__smakebuf_r+0x70>
 8005d98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d9c:	4630      	mov	r0, r6
 8005d9e:	f000 f81d 	bl	8005ddc <_isatty_r>
 8005da2:	b128      	cbz	r0, 8005db0 <__smakebuf_r+0x70>
 8005da4:	89a3      	ldrh	r3, [r4, #12]
 8005da6:	f023 0303 	bic.w	r3, r3, #3
 8005daa:	f043 0301 	orr.w	r3, r3, #1
 8005dae:	81a3      	strh	r3, [r4, #12]
 8005db0:	89a3      	ldrh	r3, [r4, #12]
 8005db2:	431d      	orrs	r5, r3
 8005db4:	81a5      	strh	r5, [r4, #12]
 8005db6:	e7cf      	b.n	8005d58 <__smakebuf_r+0x18>

08005db8 <_fstat_r>:
 8005db8:	b538      	push	{r3, r4, r5, lr}
 8005dba:	4d07      	ldr	r5, [pc, #28]	; (8005dd8 <_fstat_r+0x20>)
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	4604      	mov	r4, r0
 8005dc0:	4608      	mov	r0, r1
 8005dc2:	4611      	mov	r1, r2
 8005dc4:	602b      	str	r3, [r5, #0]
 8005dc6:	f7fb f8d6 	bl	8000f76 <_fstat>
 8005dca:	1c43      	adds	r3, r0, #1
 8005dcc:	d102      	bne.n	8005dd4 <_fstat_r+0x1c>
 8005dce:	682b      	ldr	r3, [r5, #0]
 8005dd0:	b103      	cbz	r3, 8005dd4 <_fstat_r+0x1c>
 8005dd2:	6023      	str	r3, [r4, #0]
 8005dd4:	bd38      	pop	{r3, r4, r5, pc}
 8005dd6:	bf00      	nop
 8005dd8:	200003b4 	.word	0x200003b4

08005ddc <_isatty_r>:
 8005ddc:	b538      	push	{r3, r4, r5, lr}
 8005dde:	4d06      	ldr	r5, [pc, #24]	; (8005df8 <_isatty_r+0x1c>)
 8005de0:	2300      	movs	r3, #0
 8005de2:	4604      	mov	r4, r0
 8005de4:	4608      	mov	r0, r1
 8005de6:	602b      	str	r3, [r5, #0]
 8005de8:	f7fb f8d5 	bl	8000f96 <_isatty>
 8005dec:	1c43      	adds	r3, r0, #1
 8005dee:	d102      	bne.n	8005df6 <_isatty_r+0x1a>
 8005df0:	682b      	ldr	r3, [r5, #0]
 8005df2:	b103      	cbz	r3, 8005df6 <_isatty_r+0x1a>
 8005df4:	6023      	str	r3, [r4, #0]
 8005df6:	bd38      	pop	{r3, r4, r5, pc}
 8005df8:	200003b4 	.word	0x200003b4

08005dfc <_sbrk_r>:
 8005dfc:	b538      	push	{r3, r4, r5, lr}
 8005dfe:	4d06      	ldr	r5, [pc, #24]	; (8005e18 <_sbrk_r+0x1c>)
 8005e00:	2300      	movs	r3, #0
 8005e02:	4604      	mov	r4, r0
 8005e04:	4608      	mov	r0, r1
 8005e06:	602b      	str	r3, [r5, #0]
 8005e08:	f7fb f8de 	bl	8000fc8 <_sbrk>
 8005e0c:	1c43      	adds	r3, r0, #1
 8005e0e:	d102      	bne.n	8005e16 <_sbrk_r+0x1a>
 8005e10:	682b      	ldr	r3, [r5, #0]
 8005e12:	b103      	cbz	r3, 8005e16 <_sbrk_r+0x1a>
 8005e14:	6023      	str	r3, [r4, #0]
 8005e16:	bd38      	pop	{r3, r4, r5, pc}
 8005e18:	200003b4 	.word	0x200003b4

08005e1c <_init>:
 8005e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e1e:	bf00      	nop
 8005e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e22:	bc08      	pop	{r3}
 8005e24:	469e      	mov	lr, r3
 8005e26:	4770      	bx	lr

08005e28 <_fini>:
 8005e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e2a:	bf00      	nop
 8005e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e2e:	bc08      	pop	{r3}
 8005e30:	469e      	mov	lr, r3
 8005e32:	4770      	bx	lr
